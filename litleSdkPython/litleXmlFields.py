# ./litleXmlFields.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:f03bd2be92cca0df00d3d054794f8a47756ec009
# Generated 2014-08-08 12:32:43.591088 by PyXB version 1.2.2
# Namespace http://www.litle.com/schema

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import StringIO
import pyxb.utils.utility
import pyxb.utils.domutils
import re
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:c43ebca3-1f32-11e4-9b4d-6003089e0166')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.2'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI(u'http://www.litle.com/schema', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

illegal_chars = re.compile(ur'[^\x09\x0A\x0D\x20-\xD7FF\xE000-\xFFFD]')
def strip_illegal_xml(ss):
    # http://www.w3.org/TR/2000/WD-xml-2e-20000814#dt-character
    # https://stackoverflow.com/questions/4513672/python-escaping-non-ascii-characters-in-xml
    def replacer(m):
        return ''
    return re.sub(illegal_chars, replacer, ss)

class myComplexTypeDefinition(pyxb.binding.basis.complexTypeDefinition):

      def __setattr__(self, name, value):
          if value and isinstance(value, basestring):
              value = strip_illegal_xml(value)
          super(myComplexTypeDefinition, self).__setattr__(
              name, value)


def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @kw default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    saxer.parse(StringIO.StringIO(xml_text))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.litle.com/schema}batchTotalAmountType
class batchTotalAmountType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'batchTotalAmountType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 227, 4)
    _Documentation = None
batchTotalAmountType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(10L))
batchTotalAmountType._InitializeFacetMap(batchTotalAmountType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'batchTotalAmountType', batchTotalAmountType)

# Atomic simple type: {http://www.litle.com/schema}template
class template (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'template')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 233, 4)
    _Documentation = None
template._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
template._InitializeFacetMap(template._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'template', template)

# Atomic simple type: {http://www.litle.com/schema}string20Type
class string20Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string20Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 14, 4)
    _Documentation = None
string20Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20L))
string20Type._InitializeFacetMap(string20Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'string20Type', string20Type)

# Atomic simple type: {http://www.litle.com/schema}versionType
class versionType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'versionType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 20, 4)
    _Documentation = None
versionType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10L))
versionType._InitializeFacetMap(versionType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'versionType', versionType)

# Atomic simple type: {http://www.litle.com/schema}messageType
class messageType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'messageType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 26, 4)
    _Documentation = None
messageType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(512L))
messageType._InitializeFacetMap(messageType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'messageType', messageType)

# Atomic simple type: {http://www.litle.com/schema}string2Type
class string2Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string2Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 32, 4)
    _Documentation = None
string2Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
string2Type._InitializeFacetMap(string2Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'string2Type', string2Type)

# Atomic simple type: {http://www.litle.com/schema}string3Type
class string3Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string3Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 38, 4)
    _Documentation = None
string3Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(3L))
string3Type._InitializeFacetMap(string3Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'string3Type', string3Type)

# Atomic simple type: {http://www.litle.com/schema}responseType
class responseType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'responseType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 44, 4)
    _Documentation = None
responseType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(3L))
responseType._InitializeFacetMap(responseType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'responseType', responseType)

# Atomic simple type: {http://www.litle.com/schema}litleIdType
class litleIdType (pyxb.binding.datatypes.long):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'litleIdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 50, 4)
    _Documentation = None
litleIdType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(19L))
litleIdType._InitializeFacetMap(litleIdType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'litleIdType', litleIdType)

# Atomic simple type: {http://www.litle.com/schema}string25Type
class string25Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string25Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 56, 4)
    _Documentation = None
string25Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
string25Type._InitializeFacetMap(string25Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'string25Type', string25Type)

# Atomic simple type: {http://www.litle.com/schema}string50Type
class string50Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string50Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 62, 4)
    _Documentation = None
string50Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50L))
string50Type._InitializeFacetMap(string50Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'string50Type', string50Type)

# Atomic simple type: {http://www.litle.com/schema}string256Type
class string256Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string256Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 68, 4)
    _Documentation = None
string256Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256L))
string256Type._InitializeFacetMap(string256Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'string256Type', string256Type)

# Atomic simple type: {http://www.litle.com/schema}string512Type
class string512Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'string512Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 74, 4)
    _Documentation = None
string512Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(512L))
string512Type._InitializeFacetMap(string512Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'string512Type', string512Type)

# Atomic simple type: {http://www.litle.com/schema}cardNumberLast4Type
class cardNumberLast4Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardNumberLast4Type')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 80, 4)
    _Documentation = None
cardNumberLast4Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
cardNumberLast4Type._InitializeFacetMap(cardNumberLast4Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'cardNumberLast4Type', cardNumberLast4Type)

# Atomic simple type: {http://www.litle.com/schema}virtualAuthenticationKeyData
class virtualAuthenticationKeyData (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyData')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 85, 4)
    _Documentation = None
virtualAuthenticationKeyData._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
virtualAuthenticationKeyData._InitializeFacetMap(virtualAuthenticationKeyData._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'virtualAuthenticationKeyData', virtualAuthenticationKeyData)

# Atomic simple type: {http://www.litle.com/schema}virtualAuthenticationKeyPresenceIndicator
class virtualAuthenticationKeyPresenceIndicator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyPresenceIndicator')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 91, 4)
    _Documentation = None
virtualAuthenticationKeyPresenceIndicator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
virtualAuthenticationKeyPresenceIndicator._InitializeFacetMap(virtualAuthenticationKeyPresenceIndicator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'virtualAuthenticationKeyPresenceIndicator', virtualAuthenticationKeyPresenceIndicator)

# Atomic simple type: {http://www.litle.com/schema}authorizationSourcePlatform
class authorizationSourcePlatform (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'authorizationSourcePlatform')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 96, 4)
    _Documentation = None
authorizationSourcePlatform._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
authorizationSourcePlatform._InitializeFacetMap(authorizationSourcePlatform._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'authorizationSourcePlatform', authorizationSourcePlatform)

# Atomic simple type: {http://www.litle.com/schema}addressIndicator
class addressIndicator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'addressIndicator')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 101, 4)
    _Documentation = None
addressIndicator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
addressIndicator._InitializeFacetMap(addressIndicator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'addressIndicator', addressIndicator)

# Atomic simple type: {http://www.litle.com/schema}authenticationResultType
class authenticationResultType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'authenticationResultType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 106, 4)
    _Documentation = None
authenticationResultType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
authenticationResultType._InitializeFacetMap(authenticationResultType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'authenticationResultType', authenticationResultType)

# Atomic simple type: {http://www.litle.com/schema}methodOfPaymentTypeEnum
class methodOfPaymentTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'methodOfPaymentTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 112, 4)
    _Documentation = None
methodOfPaymentTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=methodOfPaymentTypeEnum, enum_prefix=None)
methodOfPaymentTypeEnum.MC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MC', tag=u'MC')
methodOfPaymentTypeEnum.VI = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VI', tag=u'VI')
methodOfPaymentTypeEnum.AX = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AX', tag=u'AX')
methodOfPaymentTypeEnum.DC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DC', tag=u'DC')
methodOfPaymentTypeEnum.DI = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DI', tag=u'DI')
methodOfPaymentTypeEnum.PP = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PP', tag=u'PP')
methodOfPaymentTypeEnum.JC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'JC', tag=u'JC')
methodOfPaymentTypeEnum.BL = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BL', tag=u'BL')
methodOfPaymentTypeEnum.EC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'EC', tag=u'EC')
methodOfPaymentTypeEnum.GC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GC', tag=u'GC')
methodOfPaymentTypeEnum.emptyString = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'', tag='emptyString')
methodOfPaymentTypeEnum._InitializeFacetMap(methodOfPaymentTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'methodOfPaymentTypeEnum', methodOfPaymentTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}govtTaxTypeEnum
class govtTaxTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'govtTaxTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 128, 4)
    _Documentation = None
govtTaxTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=govtTaxTypeEnum, enum_prefix=None)
govtTaxTypeEnum.payment = govtTaxTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'payment', tag=u'payment')
govtTaxTypeEnum.fee = govtTaxTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'fee', tag=u'fee')
govtTaxTypeEnum._InitializeFacetMap(govtTaxTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'govtTaxTypeEnum', govtTaxTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}transactionAmountType
class transactionAmountType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'transactionAmountType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 135, 4)
    _Documentation = None
transactionAmountType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(12L))
transactionAmountType._InitializeFacetMap(transactionAmountType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'transactionAmountType', transactionAmountType)

# Atomic simple type: {http://www.litle.com/schema}loanToValueEstimator
class loanToValueEstimator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'loanToValueEstimator')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 141, 4)
    _Documentation = None
loanToValueEstimator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8L))
loanToValueEstimator._InitializeFacetMap(loanToValueEstimator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'loanToValueEstimator', loanToValueEstimator)

# Atomic simple type: {http://www.litle.com/schema}riskEstimator
class riskEstimator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'riskEstimator')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 146, 4)
    _Documentation = None
riskEstimator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8L))
riskEstimator._InitializeFacetMap(riskEstimator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'riskEstimator', riskEstimator)

# Atomic simple type: {http://www.litle.com/schema}riskQueueAssignment
class riskQueueAssignment (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'riskQueueAssignment')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 151, 4)
    _Documentation = None
riskQueueAssignment._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8L))
riskQueueAssignment._InitializeFacetMap(riskQueueAssignment._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'riskQueueAssignment', riskQueueAssignment)

# Atomic simple type: {http://www.litle.com/schema}merchantIdentificationType
class merchantIdentificationType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'merchantIdentificationType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 157, 4)
    _Documentation = None
merchantIdentificationType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50L))
merchantIdentificationType._InitializeFacetMap(merchantIdentificationType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'merchantIdentificationType', merchantIdentificationType)

# Atomic simple type: {http://www.litle.com/schema}currencyCodeEnum
class currencyCodeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'currencyCodeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 163, 4)
    _Documentation = None
currencyCodeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=currencyCodeEnum, enum_prefix=None)
currencyCodeEnum.AUD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'AUD', tag=u'AUD')
currencyCodeEnum.CAD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'CAD', tag=u'CAD')
currencyCodeEnum.CHF = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'CHF', tag=u'CHF')
currencyCodeEnum.DKK = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'DKK', tag=u'DKK')
currencyCodeEnum.EUR = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'EUR', tag=u'EUR')
currencyCodeEnum.GBP = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'GBP', tag=u'GBP')
currencyCodeEnum.HKD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'HKD', tag=u'HKD')
currencyCodeEnum.JPY = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'JPY', tag=u'JPY')
currencyCodeEnum.NOK = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'NOK', tag=u'NOK')
currencyCodeEnum.NZD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'NZD', tag=u'NZD')
currencyCodeEnum.SEK = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'SEK', tag=u'SEK')
currencyCodeEnum.SGD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'SGD', tag=u'SGD')
currencyCodeEnum.USD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value=u'USD', tag=u'USD')
currencyCodeEnum._InitializeFacetMap(currencyCodeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'currencyCodeEnum', currencyCodeEnum)

# Atomic simple type: {http://www.litle.com/schema}countryTypeEnum
class countryTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'countryTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 181, 4)
    _Documentation = None
countryTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=countryTypeEnum, enum_prefix=None)
countryTypeEnum.USA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'USA', tag=u'USA')
countryTypeEnum.AF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AF', tag=u'AF')
countryTypeEnum.AX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AX', tag=u'AX')
countryTypeEnum.AL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AL', tag=u'AL')
countryTypeEnum.DZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DZ', tag=u'DZ')
countryTypeEnum.AS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AS', tag=u'AS')
countryTypeEnum.AD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AD', tag=u'AD')
countryTypeEnum.AO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AO', tag=u'AO')
countryTypeEnum.AI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AI', tag=u'AI')
countryTypeEnum.AQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AQ', tag=u'AQ')
countryTypeEnum.AG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AG', tag=u'AG')
countryTypeEnum.AR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AR', tag=u'AR')
countryTypeEnum.AM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AM', tag=u'AM')
countryTypeEnum.AW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AW', tag=u'AW')
countryTypeEnum.AU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AU', tag=u'AU')
countryTypeEnum.AT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AT', tag=u'AT')
countryTypeEnum.AZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AZ', tag=u'AZ')
countryTypeEnum.BS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BS', tag=u'BS')
countryTypeEnum.BH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BH', tag=u'BH')
countryTypeEnum.BD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BD', tag=u'BD')
countryTypeEnum.BB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BB', tag=u'BB')
countryTypeEnum.BY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BY', tag=u'BY')
countryTypeEnum.BE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BE', tag=u'BE')
countryTypeEnum.BZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BZ', tag=u'BZ')
countryTypeEnum.BJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BJ', tag=u'BJ')
countryTypeEnum.BM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BM', tag=u'BM')
countryTypeEnum.BT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BT', tag=u'BT')
countryTypeEnum.BO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BO', tag=u'BO')
countryTypeEnum.BQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BQ', tag=u'BQ')
countryTypeEnum.BA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BA', tag=u'BA')
countryTypeEnum.BW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BW', tag=u'BW')
countryTypeEnum.BV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BV', tag=u'BV')
countryTypeEnum.BR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BR', tag=u'BR')
countryTypeEnum.IO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IO', tag=u'IO')
countryTypeEnum.BN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BN', tag=u'BN')
countryTypeEnum.BG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BG', tag=u'BG')
countryTypeEnum.BF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BF', tag=u'BF')
countryTypeEnum.BI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BI', tag=u'BI')
countryTypeEnum.KH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KH', tag=u'KH')
countryTypeEnum.CM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CM', tag=u'CM')
countryTypeEnum.CA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CA', tag=u'CA')
countryTypeEnum.CV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CV', tag=u'CV')
countryTypeEnum.KY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KY', tag=u'KY')
countryTypeEnum.CF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CF', tag=u'CF')
countryTypeEnum.TD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TD', tag=u'TD')
countryTypeEnum.CL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CL', tag=u'CL')
countryTypeEnum.CN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CN', tag=u'CN')
countryTypeEnum.CX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CX', tag=u'CX')
countryTypeEnum.CC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CC', tag=u'CC')
countryTypeEnum.CO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CO', tag=u'CO')
countryTypeEnum.KM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KM', tag=u'KM')
countryTypeEnum.CG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CG', tag=u'CG')
countryTypeEnum.CD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CD', tag=u'CD')
countryTypeEnum.CK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CK', tag=u'CK')
countryTypeEnum.CR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CR', tag=u'CR')
countryTypeEnum.CI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CI', tag=u'CI')
countryTypeEnum.HR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'HR', tag=u'HR')
countryTypeEnum.CU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CU', tag=u'CU')
countryTypeEnum.CW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CW', tag=u'CW')
countryTypeEnum.CY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CY', tag=u'CY')
countryTypeEnum.CZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CZ', tag=u'CZ')
countryTypeEnum.DK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DK', tag=u'DK')
countryTypeEnum.DJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DJ', tag=u'DJ')
countryTypeEnum.DM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DM', tag=u'DM')
countryTypeEnum.DO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DO', tag=u'DO')
countryTypeEnum.TL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TL', tag=u'TL')
countryTypeEnum.EC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'EC', tag=u'EC')
countryTypeEnum.EG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'EG', tag=u'EG')
countryTypeEnum.SV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SV', tag=u'SV')
countryTypeEnum.GQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GQ', tag=u'GQ')
countryTypeEnum.ER = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ER', tag=u'ER')
countryTypeEnum.EE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'EE', tag=u'EE')
countryTypeEnum.ET = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ET', tag=u'ET')
countryTypeEnum.FK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'FK', tag=u'FK')
countryTypeEnum.FO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'FO', tag=u'FO')
countryTypeEnum.FJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'FJ', tag=u'FJ')
countryTypeEnum.FI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'FI', tag=u'FI')
countryTypeEnum.FR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'FR', tag=u'FR')
countryTypeEnum.GF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GF', tag=u'GF')
countryTypeEnum.PF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PF', tag=u'PF')
countryTypeEnum.TF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TF', tag=u'TF')
countryTypeEnum.GA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GA', tag=u'GA')
countryTypeEnum.GM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GM', tag=u'GM')
countryTypeEnum.GE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GE', tag=u'GE')
countryTypeEnum.DE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DE', tag=u'DE')
countryTypeEnum.GH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GH', tag=u'GH')
countryTypeEnum.GI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GI', tag=u'GI')
countryTypeEnum.GR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GR', tag=u'GR')
countryTypeEnum.GL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GL', tag=u'GL')
countryTypeEnum.GD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GD', tag=u'GD')
countryTypeEnum.GP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GP', tag=u'GP')
countryTypeEnum.GU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GU', tag=u'GU')
countryTypeEnum.GT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GT', tag=u'GT')
countryTypeEnum.GG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GG', tag=u'GG')
countryTypeEnum.GN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GN', tag=u'GN')
countryTypeEnum.GW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GW', tag=u'GW')
countryTypeEnum.GY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GY', tag=u'GY')
countryTypeEnum.HT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'HT', tag=u'HT')
countryTypeEnum.HM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'HM', tag=u'HM')
countryTypeEnum.HN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'HN', tag=u'HN')
countryTypeEnum.HK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'HK', tag=u'HK')
countryTypeEnum.HU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'HU', tag=u'HU')
countryTypeEnum.IS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IS', tag=u'IS')
countryTypeEnum.IN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IN', tag=u'IN')
countryTypeEnum.ID = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ID', tag=u'ID')
countryTypeEnum.IR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IR', tag=u'IR')
countryTypeEnum.IQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IQ', tag=u'IQ')
countryTypeEnum.IE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IE', tag=u'IE')
countryTypeEnum.IM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IM', tag=u'IM')
countryTypeEnum.IL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IL', tag=u'IL')
countryTypeEnum.IT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'IT', tag=u'IT')
countryTypeEnum.JM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'JM', tag=u'JM')
countryTypeEnum.JP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'JP', tag=u'JP')
countryTypeEnum.JE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'JE', tag=u'JE')
countryTypeEnum.JO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'JO', tag=u'JO')
countryTypeEnum.KZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KZ', tag=u'KZ')
countryTypeEnum.KE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KE', tag=u'KE')
countryTypeEnum.KI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KI', tag=u'KI')
countryTypeEnum.KP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KP', tag=u'KP')
countryTypeEnum.KR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KR', tag=u'KR')
countryTypeEnum.KW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KW', tag=u'KW')
countryTypeEnum.KG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KG', tag=u'KG')
countryTypeEnum.LA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LA', tag=u'LA')
countryTypeEnum.LV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LV', tag=u'LV')
countryTypeEnum.LB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LB', tag=u'LB')
countryTypeEnum.LS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LS', tag=u'LS')
countryTypeEnum.LR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LR', tag=u'LR')
countryTypeEnum.LY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LY', tag=u'LY')
countryTypeEnum.LI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LI', tag=u'LI')
countryTypeEnum.LT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LT', tag=u'LT')
countryTypeEnum.LU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LU', tag=u'LU')
countryTypeEnum.MO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MO', tag=u'MO')
countryTypeEnum.MK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MK', tag=u'MK')
countryTypeEnum.MG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MG', tag=u'MG')
countryTypeEnum.MW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MW', tag=u'MW')
countryTypeEnum.MY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MY', tag=u'MY')
countryTypeEnum.MV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MV', tag=u'MV')
countryTypeEnum.ML = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ML', tag=u'ML')
countryTypeEnum.MT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MT', tag=u'MT')
countryTypeEnum.MH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MH', tag=u'MH')
countryTypeEnum.MQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MQ', tag=u'MQ')
countryTypeEnum.MR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MR', tag=u'MR')
countryTypeEnum.MU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MU', tag=u'MU')
countryTypeEnum.YT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'YT', tag=u'YT')
countryTypeEnum.MX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MX', tag=u'MX')
countryTypeEnum.FM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'FM', tag=u'FM')
countryTypeEnum.MD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MD', tag=u'MD')
countryTypeEnum.MC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MC', tag=u'MC')
countryTypeEnum.MN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MN', tag=u'MN')
countryTypeEnum.MS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MS', tag=u'MS')
countryTypeEnum.MA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MA', tag=u'MA')
countryTypeEnum.MZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MZ', tag=u'MZ')
countryTypeEnum.MM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MM', tag=u'MM')
countryTypeEnum.NA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NA', tag=u'NA')
countryTypeEnum.NR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NR', tag=u'NR')
countryTypeEnum.NP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NP', tag=u'NP')
countryTypeEnum.NL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NL', tag=u'NL')
countryTypeEnum.AN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AN', tag=u'AN')
countryTypeEnum.NC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NC', tag=u'NC')
countryTypeEnum.NZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NZ', tag=u'NZ')
countryTypeEnum.NI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NI', tag=u'NI')
countryTypeEnum.NE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NE', tag=u'NE')
countryTypeEnum.NG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NG', tag=u'NG')
countryTypeEnum.NU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NU', tag=u'NU')
countryTypeEnum.NF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NF', tag=u'NF')
countryTypeEnum.MP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MP', tag=u'MP')
countryTypeEnum.NO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NO', tag=u'NO')
countryTypeEnum.OM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'OM', tag=u'OM')
countryTypeEnum.PK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PK', tag=u'PK')
countryTypeEnum.PW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PW', tag=u'PW')
countryTypeEnum.PS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PS', tag=u'PS')
countryTypeEnum.PA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PA', tag=u'PA')
countryTypeEnum.PG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PG', tag=u'PG')
countryTypeEnum.PY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PY', tag=u'PY')
countryTypeEnum.PE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PE', tag=u'PE')
countryTypeEnum.PH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PH', tag=u'PH')
countryTypeEnum.PN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PN', tag=u'PN')
countryTypeEnum.PL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PL', tag=u'PL')
countryTypeEnum.PT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PT', tag=u'PT')
countryTypeEnum.PR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PR', tag=u'PR')
countryTypeEnum.QA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'QA', tag=u'QA')
countryTypeEnum.RE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'RE', tag=u'RE')
countryTypeEnum.RO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'RO', tag=u'RO')
countryTypeEnum.RU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'RU', tag=u'RU')
countryTypeEnum.RW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'RW', tag=u'RW')
countryTypeEnum.BL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'BL', tag=u'BL')
countryTypeEnum.KN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'KN', tag=u'KN')
countryTypeEnum.LC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LC', tag=u'LC')
countryTypeEnum.MF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MF', tag=u'MF')
countryTypeEnum.VC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VC', tag=u'VC')
countryTypeEnum.WS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'WS', tag=u'WS')
countryTypeEnum.SM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SM', tag=u'SM')
countryTypeEnum.ST = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ST', tag=u'ST')
countryTypeEnum.SA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SA', tag=u'SA')
countryTypeEnum.SN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SN', tag=u'SN')
countryTypeEnum.SC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SC', tag=u'SC')
countryTypeEnum.SL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SL', tag=u'SL')
countryTypeEnum.SG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SG', tag=u'SG')
countryTypeEnum.SX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SX', tag=u'SX')
countryTypeEnum.SK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SK', tag=u'SK')
countryTypeEnum.SI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SI', tag=u'SI')
countryTypeEnum.SB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SB', tag=u'SB')
countryTypeEnum.SO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SO', tag=u'SO')
countryTypeEnum.ZA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ZA', tag=u'ZA')
countryTypeEnum.GS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GS', tag=u'GS')
countryTypeEnum.ES = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ES', tag=u'ES')
countryTypeEnum.LK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'LK', tag=u'LK')
countryTypeEnum.SH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SH', tag=u'SH')
countryTypeEnum.PM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PM', tag=u'PM')
countryTypeEnum.SD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SD', tag=u'SD')
countryTypeEnum.SR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SR', tag=u'SR')
countryTypeEnum.SJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SJ', tag=u'SJ')
countryTypeEnum.SZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SZ', tag=u'SZ')
countryTypeEnum.SE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SE', tag=u'SE')
countryTypeEnum.CH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CH', tag=u'CH')
countryTypeEnum.SY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SY', tag=u'SY')
countryTypeEnum.TW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TW', tag=u'TW')
countryTypeEnum.TJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TJ', tag=u'TJ')
countryTypeEnum.TZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TZ', tag=u'TZ')
countryTypeEnum.TH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TH', tag=u'TH')
countryTypeEnum.TG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TG', tag=u'TG')
countryTypeEnum.TK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TK', tag=u'TK')
countryTypeEnum.TO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TO', tag=u'TO')
countryTypeEnum.TT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TT', tag=u'TT')
countryTypeEnum.TN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TN', tag=u'TN')
countryTypeEnum.TR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TR', tag=u'TR')
countryTypeEnum.TM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TM', tag=u'TM')
countryTypeEnum.TC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TC', tag=u'TC')
countryTypeEnum.TV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'TV', tag=u'TV')
countryTypeEnum.UG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UG', tag=u'UG')
countryTypeEnum.UA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UA', tag=u'UA')
countryTypeEnum.AE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AE', tag=u'AE')
countryTypeEnum.GB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'GB', tag=u'GB')
countryTypeEnum.US = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'US', tag=u'US')
countryTypeEnum.UM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UM', tag=u'UM')
countryTypeEnum.UY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UY', tag=u'UY')
countryTypeEnum.UZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UZ', tag=u'UZ')
countryTypeEnum.VU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VU', tag=u'VU')
countryTypeEnum.VA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VA', tag=u'VA')
countryTypeEnum.VE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VE', tag=u'VE')
countryTypeEnum.VN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VN', tag=u'VN')
countryTypeEnum.VG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VG', tag=u'VG')
countryTypeEnum.VI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'VI', tag=u'VI')
countryTypeEnum.WF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'WF', tag=u'WF')
countryTypeEnum.EH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'EH', tag=u'EH')
countryTypeEnum.YE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'YE', tag=u'YE')
countryTypeEnum.ZM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ZM', tag=u'ZM')
countryTypeEnum.ZW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ZW', tag=u'ZW')
countryTypeEnum.RS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'RS', tag=u'RS')
countryTypeEnum.ME = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ME', tag=u'ME')
countryTypeEnum.SS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SS', tag=u'SS')
countryTypeEnum._InitializeFacetMap(countryTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'countryTypeEnum', countryTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}addressLineType
class addressLineType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'addressLineType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 437, 4)
    _Documentation = None
addressLineType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(35L))
addressLineType._InitializeFacetMap(addressLineType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'addressLineType', addressLineType)

# Atomic simple type: {http://www.litle.com/schema}cityType
class cityType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cityType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 442, 4)
    _Documentation = None
cityType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(35L))
cityType._InitializeFacetMap(cityType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'cityType', cityType)

# Atomic simple type: {http://www.litle.com/schema}customBillingCityType
class customBillingCityType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'customBillingCityType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 447, 4)
    _Documentation = None
customBillingCityType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(35L))
customBillingCityType._InitializeFacetMap(customBillingCityType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'customBillingCityType', customBillingCityType)

# Atomic simple type: {http://www.litle.com/schema}stateType
class stateType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stateType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 452, 4)
    _Documentation = None
stateType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30L))
stateType._InitializeFacetMap(stateType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'stateType', stateType)

# Atomic simple type: {http://www.litle.com/schema}zipType
class zipType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'zipType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 457, 4)
    _Documentation = None
zipType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20L))
zipType._InitializeFacetMap(zipType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'zipType', zipType)

# Atomic simple type: {http://www.litle.com/schema}emailType
class emailType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'emailType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 463, 4)
    _Documentation = None
emailType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100L))
emailType._InitializeFacetMap(emailType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'emailType', emailType)

# Atomic simple type: {http://www.litle.com/schema}phoneType
class phoneType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'phoneType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 468, 4)
    _Documentation = None
phoneType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20L))
phoneType._InitializeFacetMap(phoneType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'phoneType', phoneType)

# Atomic simple type: {http://www.litle.com/schema}nameType
class nameType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'nameType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 473, 4)
    _Documentation = None
nameType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100L))
nameType._InitializeFacetMap(nameType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'nameType', nameType)

# Atomic simple type: {http://www.litle.com/schema}cvNumType
class cvNumType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cvNumType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 478, 4)
    _Documentation = None
cvNumType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
cvNumType._InitializeFacetMap(cvNumType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'cvNumType', cvNumType)

# Atomic simple type: {http://www.litle.com/schema}authCodeType
class authCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'authCodeType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 483, 4)
    _Documentation = None
authCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(6L))
authCodeType._InitializeFacetMap(authCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'authCodeType', authCodeType)

# Atomic simple type: {http://www.litle.com/schema}customerIdType
class customerIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'customerIdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 488, 4)
    _Documentation = None
customerIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50L))
customerIdType._InitializeFacetMap(customerIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'customerIdType', customerIdType)

# Atomic simple type: {http://www.litle.com/schema}customBillingUrlType
class customBillingUrlType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'customBillingUrlType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 493, 4)
    _Documentation = None
customBillingUrlType._CF_pattern = pyxb.binding.facets.CF_pattern()
customBillingUrlType._CF_pattern.addPattern(pattern=u'[A-Z,a-z,0-9,/,\\-,_,.]*')
customBillingUrlType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(13L))
customBillingUrlType._InitializeFacetMap(customBillingUrlType._CF_pattern,
   customBillingUrlType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'customBillingUrlType', customBillingUrlType)

# Atomic simple type: {http://www.litle.com/schema}IIASFlagType
class IIASFlagType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'IIASFlagType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 500, 4)
    _Documentation = None
IIASFlagType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IIASFlagType, enum_prefix=None)
IIASFlagType.Y = IIASFlagType._CF_enumeration.addEnumeration(unicode_value=u'Y', tag=u'Y')
IIASFlagType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
IIASFlagType._InitializeFacetMap(IIASFlagType._CF_enumeration,
   IIASFlagType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'IIASFlagType', IIASFlagType)

# Atomic simple type: {http://www.litle.com/schema}driversLicenseType
class driversLicenseType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'driversLicenseType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 507, 4)
    _Documentation = None
driversLicenseType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30L))
driversLicenseType._InitializeFacetMap(driversLicenseType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'driversLicenseType', driversLicenseType)

# Atomic simple type: {http://www.litle.com/schema}stateCodeType
class stateCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stateCodeType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 513, 4)
    _Documentation = None
stateCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
stateCodeType._InitializeFacetMap(stateCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'stateCodeType', stateCodeType)

# Atomic simple type: {http://www.litle.com/schema}dateOfBirthType
class dateOfBirthType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'dateOfBirthType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 519, 4)
    _Documentation = None
dateOfBirthType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8L))
dateOfBirthType._InitializeFacetMap(dateOfBirthType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'dateOfBirthType', dateOfBirthType)

# Atomic simple type: {http://www.litle.com/schema}firstNameType
class firstNameType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'firstNameType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 525, 4)
    _Documentation = None
firstNameType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
firstNameType._InitializeFacetMap(firstNameType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'firstNameType', firstNameType)

# Atomic simple type: {http://www.litle.com/schema}lastNameType
class lastNameType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'lastNameType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 531, 4)
    _Documentation = None
lastNameType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
lastNameType._InitializeFacetMap(lastNameType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'lastNameType', lastNameType)

# Atomic simple type: {http://www.litle.com/schema}middleInitialType
class middleInitialType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'middleInitialType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 537, 4)
    _Documentation = None
middleInitialType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
middleInitialType._InitializeFacetMap(middleInitialType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'middleInitialType', middleInitialType)

# Atomic simple type: {http://www.litle.com/schema}companyName
class companyName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'companyName')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 543, 4)
    _Documentation = None
companyName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(40L))
companyName._InitializeFacetMap(companyName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'companyName', companyName)

# Atomic simple type: {http://www.litle.com/schema}redeliveryCycle
class redeliveryCycle (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'redeliveryCycle')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 549, 4)
    _Documentation = None
redeliveryCycle._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(1L))
redeliveryCycle._InitializeFacetMap(redeliveryCycle._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'redeliveryCycle', redeliveryCycle)

# Atomic simple type: {http://www.litle.com/schema}numberOfDeposits
class numberOfDeposits (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'numberOfDeposits')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 555, 4)
    _Documentation = None
numberOfDeposits._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(1L))
numberOfDeposits._InitializeFacetMap(numberOfDeposits._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'numberOfDeposits', numberOfDeposits)

# Atomic simple type: {http://www.litle.com/schema}ccAccountNumberType
class ccAccountNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ccAccountNumberType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 633, 4)
    _Documentation = None
ccAccountNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(13L))
ccAccountNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
ccAccountNumberType._InitializeFacetMap(ccAccountNumberType._CF_minLength,
   ccAccountNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'ccAccountNumberType', ccAccountNumberType)

# Atomic simple type: {http://www.litle.com/schema}expDateType
class expDateType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'expDateType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 639, 4)
    _Documentation = None
expDateType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
expDateType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
expDateType._InitializeFacetMap(expDateType._CF_minLength,
   expDateType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'expDateType', expDateType)

# Atomic simple type: {http://www.litle.com/schema}trackDataType
class trackDataType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'trackDataType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 645, 4)
    _Documentation = None
trackDataType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
trackDataType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
trackDataType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256L))
trackDataType._InitializeFacetMap(trackDataType._CF_minLength,
   trackDataType._CF_whiteSpace,
   trackDataType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'trackDataType', trackDataType)

# Atomic simple type: {http://www.litle.com/schema}threatMetrixSessionIdType
class threatMetrixSessionIdType (pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'threatMetrixSessionIdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 659, 4)
    _Documentation = None
threatMetrixSessionIdType._CF_pattern = pyxb.binding.facets.CF_pattern()
threatMetrixSessionIdType._CF_pattern.addPattern(pattern=u'[-a-zA-Z0-9_]{1,128}')
threatMetrixSessionIdType._InitializeFacetMap(threatMetrixSessionIdType._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'threatMetrixSessionIdType', threatMetrixSessionIdType)

# Atomic simple type: {http://www.litle.com/schema}numberOfPaymentsType
class numberOfPaymentsType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'numberOfPaymentsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 153, 4)
    _Documentation = None
numberOfPaymentsType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=numberOfPaymentsType, value=pyxb.binding.datatypes.integer(1L))
numberOfPaymentsType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=numberOfPaymentsType, value=pyxb.binding.datatypes.integer(99L))
numberOfPaymentsType._InitializeFacetMap(numberOfPaymentsType._CF_minInclusive,
   numberOfPaymentsType._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', u'numberOfPaymentsType', numberOfPaymentsType)

# Atomic simple type: {http://www.litle.com/schema}intervalTypeEnum
class intervalTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'intervalTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 160, 4)
    _Documentation = None
intervalTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=intervalTypeEnum, enum_prefix=None)
intervalTypeEnum.ANNUAL = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'ANNUAL', tag=u'ANNUAL')
intervalTypeEnum.SEMIANNUAL = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'SEMIANNUAL', tag=u'SEMIANNUAL')
intervalTypeEnum.QUARTERLY = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'QUARTERLY', tag=u'QUARTERLY')
intervalTypeEnum.MONTHLY = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MONTHLY', tag=u'MONTHLY')
intervalTypeEnum.WEEKLY = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'WEEKLY', tag=u'WEEKLY')
intervalTypeEnum._InitializeFacetMap(intervalTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'intervalTypeEnum', intervalTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}trialIntervalTypeEnum
class trialIntervalTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'trialIntervalTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 170, 4)
    _Documentation = None
trialIntervalTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=trialIntervalTypeEnum, enum_prefix=None)
trialIntervalTypeEnum.MONTH = trialIntervalTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MONTH', tag=u'MONTH')
trialIntervalTypeEnum.DAY = trialIntervalTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DAY', tag=u'DAY')
trialIntervalTypeEnum._InitializeFacetMap(trialIntervalTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'trialIntervalTypeEnum', trialIntervalTypeEnum)

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 60, 20)
    _Documentation = None
STD_ANON._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON._CF_pattern.addPattern(pattern=u'(\\d{5})?\\d{4}')
STD_ANON._InitializeFacetMap(STD_ANON._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 69, 20)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.New = STD_ANON_._CF_enumeration.addEnumeration(unicode_value=u'New', tag=u'New')
STD_ANON_.Existing = STD_ANON_._CF_enumeration.addEnumeration(unicode_value=u'Existing', tag=u'Existing')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 83, 20)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.Own = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'Own', tag=u'Own')
STD_ANON_2.Rent = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'Rent', tag=u'Rent')
STD_ANON_2.Other = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'Other', tag=u'Other')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 92, 20)
    _Documentation = None
STD_ANON_3._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(2L))
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_totalDigits)

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 99, 20)
    _Documentation = None
STD_ANON_4._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(2L))
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_totalDigits)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 110, 8)
    _Documentation = None
STD_ANON_5._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_length)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 124, 20)
    _Documentation = None
STD_ANON_6._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(5L))
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_totalDigits)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 132, 20)
    _Documentation = None
STD_ANON_7._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(4L))
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_totalDigits)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 151, 20)
    _Documentation = None
STD_ANON_8._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(4L))
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_totalDigits)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 171, 20)
    _Documentation = None
STD_ANON_9._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(8L))
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_totalDigits)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 420, 52)
    _Documentation = None
STD_ANON_10._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
STD_ANON_10._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
STD_ANON_10._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(17L))
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_minLength,
   STD_ANON_10._CF_whiteSpace,
   STD_ANON_10._CF_maxLength)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 429, 52)
    _Documentation = None
STD_ANON_11._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
STD_ANON_11._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
STD_ANON_11._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(127L))
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_minLength,
   STD_ANON_11._CF_whiteSpace,
   STD_ANON_11._CF_maxLength)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 575, 20)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.CNC = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'CNC', tag=u'CNC')
STD_ANON_12.DIG = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'DIG', tag=u'DIG')
STD_ANON_12.PHY = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'PHY', tag=u'PHY')
STD_ANON_12.SVC = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'SVC', tag=u'SVC')
STD_ANON_12.TBD = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'TBD', tag=u'TBD')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

# Atomic simple type: {http://www.litle.com/schema}payPalNotesType
class payPalNotesType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'payPalNotesType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 666, 4)
    _Documentation = None
payPalNotesType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255L))
payPalNotesType._InitializeFacetMap(payPalNotesType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'payPalNotesType', payPalNotesType)

# Atomic simple type: {http://www.litle.com/schema}actionReasonType
class actionReasonType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'actionReasonType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 672, 4)
    _Documentation = None
actionReasonType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255L))
actionReasonType._InitializeFacetMap(actionReasonType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'actionReasonType', actionReasonType)

# Atomic simple type: {http://www.litle.com/schema}taxTypeIdentifierEnum
class taxTypeIdentifierEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'taxTypeIdentifierEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 693, 4)
    _Documentation = None
taxTypeIdentifierEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=taxTypeIdentifierEnum, enum_prefix=None)
taxTypeIdentifierEnum.n00 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'00', tag=u'n00')
taxTypeIdentifierEnum.n01 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'01', tag=u'n01')
taxTypeIdentifierEnum.n02 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'02', tag=u'n02')
taxTypeIdentifierEnum.n03 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'03', tag=u'n03')
taxTypeIdentifierEnum.n04 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'04', tag=u'n04')
taxTypeIdentifierEnum.n05 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'05', tag=u'n05')
taxTypeIdentifierEnum.n06 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'06', tag=u'n06')
taxTypeIdentifierEnum.n10 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'10', tag=u'n10')
taxTypeIdentifierEnum.n11 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'11', tag=u'n11')
taxTypeIdentifierEnum.n12 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'12', tag=u'n12')
taxTypeIdentifierEnum.n13 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'13', tag=u'n13')
taxTypeIdentifierEnum.n14 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'14', tag=u'n14')
taxTypeIdentifierEnum.n20 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'20', tag=u'n20')
taxTypeIdentifierEnum.n21 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'21', tag=u'n21')
taxTypeIdentifierEnum.n22 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value=u'22', tag=u'n22')
taxTypeIdentifierEnum._InitializeFacetMap(taxTypeIdentifierEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'taxTypeIdentifierEnum', taxTypeIdentifierEnum)

# Atomic simple type: {http://www.litle.com/schema}fundingSourceTypeEnum
class fundingSourceTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fundingSourceTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 806, 4)
    _Documentation = None
fundingSourceTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=fundingSourceTypeEnum, enum_prefix=None)
fundingSourceTypeEnum.UNKNOWN = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UNKNOWN', tag=u'UNKNOWN')
fundingSourceTypeEnum.PREPAID = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'PREPAID', tag=u'PREPAID')
fundingSourceTypeEnum.FSA = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'FSA', tag=u'FSA')
fundingSourceTypeEnum.CREDIT = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CREDIT', tag=u'CREDIT')
fundingSourceTypeEnum.DEBIT = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'DEBIT', tag=u'DEBIT')
fundingSourceTypeEnum._InitializeFacetMap(fundingSourceTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'fundingSourceTypeEnum', fundingSourceTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}affluenceTypeEnum
class affluenceTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'affluenceTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 816, 4)
    _Documentation = None
affluenceTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=affluenceTypeEnum, enum_prefix=None)
affluenceTypeEnum.AFFLUENT = affluenceTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'AFFLUENT', tag=u'AFFLUENT')
affluenceTypeEnum.MASS_AFFLUENT = affluenceTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'MASS AFFLUENT', tag=u'MASS_AFFLUENT')
affluenceTypeEnum._InitializeFacetMap(affluenceTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'affluenceTypeEnum', affluenceTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}reloadablePrepaidTypeEnum
class reloadablePrepaidTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reloadablePrepaidTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 823, 4)
    _Documentation = None
reloadablePrepaidTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=reloadablePrepaidTypeEnum, enum_prefix=None)
reloadablePrepaidTypeEnum.UNKNOWN = reloadablePrepaidTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UNKNOWN', tag=u'UNKNOWN')
reloadablePrepaidTypeEnum.YES = reloadablePrepaidTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'YES', tag=u'YES')
reloadablePrepaidTypeEnum.NO = reloadablePrepaidTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'NO', tag=u'NO')
reloadablePrepaidTypeEnum._InitializeFacetMap(reloadablePrepaidTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'reloadablePrepaidTypeEnum', reloadablePrepaidTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}cardProductTypeEnum
class cardProductTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardProductTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 831, 4)
    _Documentation = None
cardProductTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cardProductTypeEnum, enum_prefix=None)
cardProductTypeEnum.UNKNOWN = cardProductTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'UNKNOWN', tag=u'UNKNOWN')
cardProductTypeEnum.COMMERCIAL = cardProductTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'COMMERCIAL', tag=u'COMMERCIAL')
cardProductTypeEnum.CONSUMER = cardProductTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'CONSUMER', tag=u'CONSUMER')
cardProductTypeEnum._InitializeFacetMap(cardProductTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'cardProductTypeEnum', cardProductTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}recycleByTypeEnum
class recycleByTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recycleByTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 846, 4)
    _Documentation = None
recycleByTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=recycleByTypeEnum, enum_prefix=None)
recycleByTypeEnum.Merchant = recycleByTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'Merchant', tag=u'Merchant')
recycleByTypeEnum.Litle = recycleByTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'Litle', tag=u'Litle')
recycleByTypeEnum.None_ = recycleByTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'None', tag=u'None_')
recycleByTypeEnum._InitializeFacetMap(recycleByTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'recycleByTypeEnum', recycleByTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}echeckAccountTypeEnum
class echeckAccountTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'echeckAccountTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1570, 4)
    _Documentation = None
echeckAccountTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=echeckAccountTypeEnum, enum_prefix=None)
echeckAccountTypeEnum.Checking = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'Checking', tag=u'Checking')
echeckAccountTypeEnum.Savings = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'Savings', tag=u'Savings')
echeckAccountTypeEnum.Corporate = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'Corporate', tag=u'Corporate')
echeckAccountTypeEnum.Corp_Savings = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'Corp Savings', tag=u'Corp_Savings')
echeckAccountTypeEnum._InitializeFacetMap(echeckAccountTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'echeckAccountTypeEnum', echeckAccountTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}echeckAccountNumberType
class echeckAccountNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'echeckAccountNumberType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1578, 4)
    _Documentation = None
echeckAccountNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(17L))
echeckAccountNumberType._InitializeFacetMap(echeckAccountNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'echeckAccountNumberType', echeckAccountNumberType)

# Atomic simple type: {http://www.litle.com/schema}routingNumberType
class routingNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'routingNumberType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1583, 4)
    _Documentation = None
routingNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(9L))
routingNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(9L))
routingNumberType._InitializeFacetMap(routingNumberType._CF_minLength,
   routingNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'routingNumberType', routingNumberType)

# Atomic simple type: {http://www.litle.com/schema}checkNumberType
class checkNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'checkNumberType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1589, 4)
    _Documentation = None
checkNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
checkNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(15L))
checkNumberType._InitializeFacetMap(checkNumberType._CF_minLength,
   checkNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'checkNumberType', checkNumberType)

# Atomic simple type: {http://www.litle.com/schema}authenticationValueType
class authenticationValueType (pyxb.binding.datatypes.base64Binary):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'authenticationValueType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1597, 4)
    _Documentation = None
authenticationValueType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32L))
authenticationValueType._InitializeFacetMap(authenticationValueType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'authenticationValueType', authenticationValueType)

# Atomic simple type: {http://www.litle.com/schema}authenticationTransactionIdType
class authenticationTransactionIdType (pyxb.binding.datatypes.base64Binary):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'authenticationTransactionIdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1602, 4)
    _Documentation = None
authenticationTransactionIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(28L))
authenticationTransactionIdType._InitializeFacetMap(authenticationTransactionIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'authenticationTransactionIdType', authenticationTransactionIdType)

# Atomic simple type: {http://www.litle.com/schema}reportGroupType
class reportGroupType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'reportGroupType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1608, 4)
    _Documentation = None
reportGroupType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
reportGroupType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
reportGroupType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
reportGroupType._InitializeFacetMap(reportGroupType._CF_minLength,
   reportGroupType._CF_whiteSpace,
   reportGroupType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'reportGroupType', reportGroupType)

# Atomic simple type: {http://www.litle.com/schema}merchantCategoryCodeType
class merchantCategoryCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'merchantCategoryCodeType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1615, 4)
    _Documentation = None
merchantCategoryCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
merchantCategoryCodeType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
merchantCategoryCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
merchantCategoryCodeType._InitializeFacetMap(merchantCategoryCodeType._CF_minLength,
   merchantCategoryCodeType._CF_whiteSpace,
   merchantCategoryCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'merchantCategoryCodeType', merchantCategoryCodeType)

# Atomic simple type: {http://www.litle.com/schema}sellerIdType
class sellerIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'sellerIdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1622, 4)
    _Documentation = None
sellerIdType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
sellerIdType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
sellerIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(16L))
sellerIdType._InitializeFacetMap(sellerIdType._CF_minLength,
   sellerIdType._CF_whiteSpace,
   sellerIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'sellerIdType', sellerIdType)

# Atomic simple type: {http://www.litle.com/schema}orderSourceType
class orderSourceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'orderSourceType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1629, 4)
    _Documentation = None
orderSourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=orderSourceType, enum_prefix=None)
orderSourceType.ecommerce = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'ecommerce', tag=u'ecommerce')
orderSourceType.installment = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'installment', tag=u'installment')
orderSourceType.mailorder = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'mailorder', tag=u'mailorder')
orderSourceType.recurring = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'recurring', tag=u'recurring')
orderSourceType.retail = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'retail', tag=u'retail')
orderSourceType.telephone = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'telephone', tag=u'telephone')
orderSourceType.n3dsAuthenticated = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'3dsAuthenticated', tag=u'n3dsAuthenticated')
orderSourceType.n3dsAttempted = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'3dsAttempted', tag=u'n3dsAttempted')
orderSourceType.recurringtel = orderSourceType._CF_enumeration.addEnumeration(unicode_value=u'recurringtel', tag=u'recurringtel')
orderSourceType._InitializeFacetMap(orderSourceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'orderSourceType', orderSourceType)

# Atomic simple type: {http://www.litle.com/schema}posCapabilityTypeEnum
class posCapabilityTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'posCapabilityTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1644, 4)
    _Documentation = None
posCapabilityTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=posCapabilityTypeEnum, enum_prefix=None)
posCapabilityTypeEnum.notused = posCapabilityTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'notused', tag=u'notused')
posCapabilityTypeEnum.magstripe = posCapabilityTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'magstripe', tag=u'magstripe')
posCapabilityTypeEnum.keyedonly = posCapabilityTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'keyedonly', tag=u'keyedonly')
posCapabilityTypeEnum._InitializeFacetMap(posCapabilityTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'posCapabilityTypeEnum', posCapabilityTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}posEntryModeTypeEnum
class posEntryModeTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'posEntryModeTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1651, 4)
    _Documentation = None
posEntryModeTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=posEntryModeTypeEnum, enum_prefix=None)
posEntryModeTypeEnum.notused = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'notused', tag=u'notused')
posEntryModeTypeEnum.keyed = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'keyed', tag=u'keyed')
posEntryModeTypeEnum.track1 = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'track1', tag=u'track1')
posEntryModeTypeEnum.track2 = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'track2', tag=u'track2')
posEntryModeTypeEnum.completeread = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'completeread', tag=u'completeread')
posEntryModeTypeEnum._InitializeFacetMap(posEntryModeTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'posEntryModeTypeEnum', posEntryModeTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}posCardholderIdTypeEnum
class posCardholderIdTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'posCardholderIdTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1660, 4)
    _Documentation = None
posCardholderIdTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=posCardholderIdTypeEnum, enum_prefix=None)
posCardholderIdTypeEnum.signature = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'signature', tag=u'signature')
posCardholderIdTypeEnum.pin = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'pin', tag=u'pin')
posCardholderIdTypeEnum.nopin = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'nopin', tag=u'nopin')
posCardholderIdTypeEnum.directmarket = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value=u'directmarket', tag=u'directmarket')
posCardholderIdTypeEnum._InitializeFacetMap(posCardholderIdTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'posCardholderIdTypeEnum', posCardholderIdTypeEnum)

# Atomic simple type: {http://www.litle.com/schema}descriptorType
class descriptorType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'descriptorType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1668, 4)
    _Documentation = None
descriptorType._CF_pattern = pyxb.binding.facets.CF_pattern()
descriptorType._CF_pattern.addPattern(pattern=u"[A-Z,a-z,0-9, ,\\*,,,\\-,',#,&,.]*")
descriptorType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
descriptorType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
descriptorType._InitializeFacetMap(descriptorType._CF_pattern,
   descriptorType._CF_minLength,
   descriptorType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'descriptorType', descriptorType)

# Atomic simple type: {http://www.litle.com/schema}customBillingPhoneType
class customBillingPhoneType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'customBillingPhoneType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1675, 4)
    _Documentation = None
customBillingPhoneType._CF_pattern = pyxb.binding.facets.CF_pattern()
customBillingPhoneType._CF_pattern.addPattern(pattern=u'[0-9]*')
customBillingPhoneType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(13L))
customBillingPhoneType._InitializeFacetMap(customBillingPhoneType._CF_pattern,
   customBillingPhoneType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'customBillingPhoneType', customBillingPhoneType)

# Atomic simple type: {http://www.litle.com/schema}customerReferenceType
class customerReferenceType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'customerReferenceType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1681, 4)
    _Documentation = None
customerReferenceType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
customerReferenceType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
customerReferenceType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(17L))
customerReferenceType._InitializeFacetMap(customerReferenceType._CF_minLength,
   customerReferenceType._CF_whiteSpace,
   customerReferenceType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'customerReferenceType', customerReferenceType)

# Atomic simple type: {http://www.litle.com/schema}invoiceReferenceNumberType
class invoiceReferenceNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'invoiceReferenceNumberType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1688, 4)
    _Documentation = None
invoiceReferenceNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
invoiceReferenceNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(15L))
invoiceReferenceNumberType._InitializeFacetMap(invoiceReferenceNumberType._CF_minLength,
   invoiceReferenceNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'invoiceReferenceNumberType', invoiceReferenceNumberType)

# Atomic simple type: {http://www.litle.com/schema}cardAcceptorTaxIdType
class cardAcceptorTaxIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardAcceptorTaxIdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1695, 4)
    _Documentation = None
cardAcceptorTaxIdType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
cardAcceptorTaxIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20L))
cardAcceptorTaxIdType._InitializeFacetMap(cardAcceptorTaxIdType._CF_minLength,
   cardAcceptorTaxIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'cardAcceptorTaxIdType', cardAcceptorTaxIdType)

# Atomic simple type: {http://www.litle.com/schema}taxRateType
class taxRateType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'taxRateType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1701, 4)
    _Documentation = None
taxRateType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(5L))
taxRateType._InitializeFacetMap(taxRateType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'taxRateType', taxRateType)

# Atomic simple type: {http://www.litle.com/schema}itemSequenceNumberType
class itemSequenceNumberType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'itemSequenceNumberType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1706, 4)
    _Documentation = None
itemSequenceNumberType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=itemSequenceNumberType, value=pyxb.binding.datatypes.integer(1L))
itemSequenceNumberType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=itemSequenceNumberType, value=pyxb.binding.datatypes.integer(99L))
itemSequenceNumberType._InitializeFacetMap(itemSequenceNumberType._CF_minInclusive,
   itemSequenceNumberType._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', u'itemSequenceNumberType', itemSequenceNumberType)

# Atomic simple type: {http://www.litle.com/schema}itemDescriptionType
class itemDescriptionType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'itemDescriptionType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1712, 4)
    _Documentation = None
itemDescriptionType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
itemDescriptionType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(26L))
itemDescriptionType._InitializeFacetMap(itemDescriptionType._CF_minLength,
   itemDescriptionType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'itemDescriptionType', itemDescriptionType)

# Atomic simple type: {http://www.litle.com/schema}productCodeType
class productCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'productCodeType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1718, 4)
    _Documentation = None
productCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
productCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12L))
productCodeType._InitializeFacetMap(productCodeType._CF_minLength,
   productCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'productCodeType', productCodeType)

# Atomic simple type: {http://www.litle.com/schema}commodityCodeType
class commodityCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'commodityCodeType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1725, 4)
    _Documentation = None
commodityCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
commodityCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12L))
commodityCodeType._InitializeFacetMap(commodityCodeType._CF_minLength,
   commodityCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'commodityCodeType', commodityCodeType)

# Atomic simple type: {http://www.litle.com/schema}quantityType
class quantityType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'quantityType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1731, 4)
    _Documentation = None
quantityType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=quantityType, value=pyxb.binding.datatypes.decimal(0.0))
quantityType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(12L))
quantityType._InitializeFacetMap(quantityType._CF_minInclusive,
   quantityType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'quantityType', quantityType)

# Atomic simple type: {http://www.litle.com/schema}unitOfMeasureType
class unitOfMeasureType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'unitOfMeasureType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1737, 4)
    _Documentation = None
unitOfMeasureType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
unitOfMeasureType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12L))
unitOfMeasureType._InitializeFacetMap(unitOfMeasureType._CF_minLength,
   unitOfMeasureType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'unitOfMeasureType', unitOfMeasureType)

# Atomic simple type: {http://www.litle.com/schema}unitCostType
class unitCostType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'unitCostType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1743, 4)
    _Documentation = None
unitCostType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=unitCostType, value=pyxb.binding.datatypes.decimal(0.0))
unitCostType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(12L))
unitCostType._InitializeFacetMap(unitCostType._CF_minInclusive,
   unitCostType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', u'unitCostType', unitCostType)

# Atomic simple type: {http://www.litle.com/schema}ipAddress
class ipAddress (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ipAddress')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1750, 4)
    _Documentation = None
ipAddress._CF_pattern = pyxb.binding.facets.CF_pattern()
ipAddress._CF_pattern.addPattern(pattern=u'(\\d{1,3}.){3}\\d{1,3}')
ipAddress._InitializeFacetMap(ipAddress._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'ipAddress', ipAddress)

# Atomic simple type: {http://www.litle.com/schema}campaignType
class campaignType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'campaignType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1764, 4)
    _Documentation = None
campaignType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
campaignType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
campaignType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
campaignType._InitializeFacetMap(campaignType._CF_minLength,
   campaignType._CF_whiteSpace,
   campaignType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'campaignType', campaignType)

# Atomic simple type: {http://www.litle.com/schema}affiliateType
class affiliateType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'affiliateType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1772, 4)
    _Documentation = None
affiliateType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
affiliateType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
affiliateType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
affiliateType._InitializeFacetMap(affiliateType._CF_minLength,
   affiliateType._CF_whiteSpace,
   affiliateType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'affiliateType', affiliateType)

# Atomic simple type: {http://www.litle.com/schema}merchantGroupingIdType
class merchantGroupingIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'merchantGroupingIdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1780, 4)
    _Documentation = None
merchantGroupingIdType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
merchantGroupingIdType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
merchantGroupingIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25L))
merchantGroupingIdType._InitializeFacetMap(merchantGroupingIdType._CF_minLength,
   merchantGroupingIdType._CF_whiteSpace,
   merchantGroupingIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'merchantGroupingIdType', merchantGroupingIdType)

# Atomic simple type: [anonymous]
class STD_ANON_13 (emailType):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 576, 16)
    _Documentation = None
STD_ANON_13._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100L))
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_maxLength)

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 22, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}litleSessionId uses Python identifier litleSessionId
    __litleSessionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleSessionId'), 'litleSessionId', '__httpwww_litle_comschema_CTD_ANON_httpwww_litle_comschemalitleSessionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 24, 16), )


    litleSessionId = property(__litleSessionId.value, __litleSessionId.set, None, None)


    # Element {http://www.litle.com/schema}accountUpdateFileRequestData uses Python identifier accountUpdateFileRequestData
    __accountUpdateFileRequestData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdateFileRequestData'), 'accountUpdateFileRequestData', '__httpwww_litle_comschema_CTD_ANON_httpwww_litle_comschemaaccountUpdateFileRequestData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 238, 4), )


    accountUpdateFileRequestData = property(__accountUpdateFileRequestData.value, __accountUpdateFileRequestData.set, None, None)

    _ElementMap.update({
        __litleSessionId.name() : __litleSessionId,
        __accountUpdateFileRequestData.name() : __accountUpdateFileRequestData
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 239, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemamerchantId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 241, 16), )


    merchantId = property(__merchantId.value, __merchantId.set, None, None)


    # Element {http://www.litle.com/schema}postDay uses Python identifier postDay
    __postDay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDay'), 'postDay', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemapostDay', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 242, 16), )


    postDay = property(__postDay.value, __postDay.set, None, None)

    _ElementMap.update({
        __merchantId.name() : __merchantId,
        __postDay.name() : __postDay
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 6, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}user uses Python identifier user
    __user = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'user'), 'user', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemauser', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 8, 16), )


    user = property(__user.value, __user.set, None, None)


    # Element {http://www.litle.com/schema}password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'password'), 'password', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemapassword', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 9, 16), )


    password = property(__password.value, __password.set, None, None)

    _ElementMap.update({
        __user.name() : __user,
        __password.name() : __password
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}contact with content type ELEMENT_ONLY
class contact (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}contact with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'contact')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 561, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 563, 12), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://www.litle.com/schema}firstName uses Python identifier firstName
    __firstName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'firstName'), 'firstName', '__httpwww_litle_comschema_contact_httpwww_litle_comschemafirstName', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 564, 12), )


    firstName = property(__firstName.value, __firstName.set, None, None)


    # Element {http://www.litle.com/schema}middleInitial uses Python identifier middleInitial
    __middleInitial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'middleInitial'), 'middleInitial', '__httpwww_litle_comschema_contact_httpwww_litle_comschemamiddleInitial', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 565, 12), )


    middleInitial = property(__middleInitial.value, __middleInitial.set, None, None)


    # Element {http://www.litle.com/schema}lastName uses Python identifier lastName
    __lastName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'lastName'), 'lastName', '__httpwww_litle_comschema_contact_httpwww_litle_comschemalastName', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 566, 12), )


    lastName = property(__lastName.value, __lastName.set, None, None)


    # Element {http://www.litle.com/schema}companyName uses Python identifier companyName
    __companyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'companyName'), 'companyName', '__httpwww_litle_comschema_contact_httpwww_litle_comschemacompanyName', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 567, 12), )


    companyName = property(__companyName.value, __companyName.set, None, None)


    # Element {http://www.litle.com/schema}addressLine1 uses Python identifier addressLine1
    __addressLine1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'addressLine1'), 'addressLine1', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaaddressLine1', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 568, 12), )


    addressLine1 = property(__addressLine1.value, __addressLine1.set, None, None)


    # Element {http://www.litle.com/schema}addressLine2 uses Python identifier addressLine2
    __addressLine2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'addressLine2'), 'addressLine2', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaaddressLine2', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 569, 12), )


    addressLine2 = property(__addressLine2.value, __addressLine2.set, None, None)


    # Element {http://www.litle.com/schema}addressLine3 uses Python identifier addressLine3
    __addressLine3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'addressLine3'), 'addressLine3', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaaddressLine3', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 570, 12), )


    addressLine3 = property(__addressLine3.value, __addressLine3.set, None, None)


    # Element {http://www.litle.com/schema}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'city'), 'city', '__httpwww_litle_comschema_contact_httpwww_litle_comschemacity', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 571, 12), )


    city = property(__city.value, __city.set, None, None)


    # Element {http://www.litle.com/schema}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'state'), 'state', '__httpwww_litle_comschema_contact_httpwww_litle_comschemastate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 572, 12), )


    state = property(__state.value, __state.set, None, None)


    # Element {http://www.litle.com/schema}zip uses Python identifier zip
    __zip = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'zip'), 'zip', '__httpwww_litle_comschema_contact_httpwww_litle_comschemazip', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 573, 12), )


    zip = property(__zip.value, __zip.set, None, None)


    # Element {http://www.litle.com/schema}country uses Python identifier country
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'country'), 'country', '__httpwww_litle_comschema_contact_httpwww_litle_comschemacountry', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 574, 12), )


    country = property(__country.value, __country.set, None, None)


    # Element {http://www.litle.com/schema}email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'email'), 'email', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaemail', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 575, 12), )


    email = property(__email.value, __email.set, None, None)


    # Element {http://www.litle.com/schema}phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'phone'), 'phone', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaphone', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 582, 12), )


    phone = property(__phone.value, __phone.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __firstName.name() : __firstName,
        __middleInitial.name() : __middleInitial,
        __lastName.name() : __lastName,
        __companyName.name() : __companyName,
        __addressLine1.name() : __addressLine1,
        __addressLine2.name() : __addressLine2,
        __addressLine3.name() : __addressLine3,
        __city.name() : __city,
        __state.name() : __state,
        __zip.name() : __zip,
        __country.name() : __country,
        __email.name() : __email,
        __phone.name() : __phone
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'contact', contact)


# Complex type {http://www.litle.com/schema}cardType with content type ELEMENT_ONLY
class cardType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 588, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_cardType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 592, 20), )


    type = property(__type.value, __type.set, None, None)


    # Element {http://www.litle.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'number'), 'number', '__httpwww_litle_comschema_cardType_httpwww_litle_comschemanumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 593, 20), )


    number = property(__number.value, __number.set, None, None)


    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'expDate'), 'expDate', '__httpwww_litle_comschema_cardType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 594, 20), )


    expDate = property(__expDate.value, __expDate.set, None, None)


    # Element {http://www.litle.com/schema}track uses Python identifier track
    __track = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'track'), 'track', '__httpwww_litle_comschema_cardType_httpwww_litle_comschematrack', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 597, 20), )


    track = property(__track.value, __track.set, None, None)


    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_cardType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 600, 12), )


    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __expDate.name() : __expDate,
        __track.name() : __track,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'cardType', cardType)


# Complex type {http://www.litle.com/schema}cardTokenType with content type ELEMENT_ONLY
class cardTokenType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardTokenType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 604, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), 'litleToken', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 606, 12), )


    litleToken = property(__litleToken.value, __litleToken.set, None, None)


    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'expDate'), 'expDate', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 607, 12), )


    expDate = property(__expDate.value, __expDate.set, None, None)


    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 608, 12), )


    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)


    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 609, 12), )


    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __expDate.name() : __expDate,
        __cardValidationNum.name() : __cardValidationNum,
        __type.name() : __type
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'cardTokenType', cardTokenType)


# Complex type {http://www.litle.com/schema}cardPaypageType with content type ELEMENT_ONLY
class cardPaypageType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardPaypageType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardPaypageType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 613, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}paypageRegistrationId uses Python identifier paypageRegistrationId
    __paypageRegistrationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypageRegistrationId'), 'paypageRegistrationId', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschemapaypageRegistrationId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 615, 12), )


    paypageRegistrationId = property(__paypageRegistrationId.value, __paypageRegistrationId.set, None, None)


    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'expDate'), 'expDate', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 616, 12), )


    expDate = property(__expDate.value, __expDate.set, None, None)


    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 617, 12), )


    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)


    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 618, 12), )


    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __paypageRegistrationId.name() : __paypageRegistrationId,
        __expDate.name() : __expDate,
        __cardValidationNum.name() : __cardValidationNum,
        __type.name() : __type
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'cardPaypageType', cardPaypageType)


# Complex type {http://www.litle.com/schema}tokenResponseType with content type ELEMENT_ONLY
class tokenResponseType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}tokenResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tokenResponseType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 622, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), 'litleToken', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 624, 12), )


    litleToken = property(__litleToken.value, __litleToken.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponseCode uses Python identifier tokenResponseCode
    __tokenResponseCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponseCode'), 'tokenResponseCode', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschematokenResponseCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 625, 12), )


    tokenResponseCode = property(__tokenResponseCode.value, __tokenResponseCode.set, None, None)


    # Element {http://www.litle.com/schema}tokenMessage uses Python identifier tokenMessage
    __tokenMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenMessage'), 'tokenMessage', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschematokenMessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 626, 12), )


    tokenMessage = property(__tokenMessage.value, __tokenMessage.set, None, None)


    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 627, 12), )


    type = property(__type.value, __type.set, None, None)


    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bin'), 'bin', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 628, 12), )


    bin = property(__bin.value, __bin.set, None, None)


    # Element {http://www.litle.com/schema}eCheckAccountSuffix uses Python identifier eCheckAccountSuffix
    __eCheckAccountSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'eCheckAccountSuffix'), 'eCheckAccountSuffix', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschemaeCheckAccountSuffix', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 629, 12), )


    eCheckAccountSuffix = property(__eCheckAccountSuffix.value, __eCheckAccountSuffix.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __tokenResponseCode.name() : __tokenResponseCode,
        __tokenMessage.name() : __tokenMessage,
        __type.name() : __type,
        __bin.name() : __bin,
        __eCheckAccountSuffix.name() : __eCheckAccountSuffix
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'tokenResponseType', tokenResponseType)


# Complex type {http://www.litle.com/schema}advancedFraudChecksType with content type ELEMENT_ONLY
class advancedFraudChecksType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}advancedFraudChecksType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'advancedFraudChecksType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 653, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}threatMetrixSessionId uses Python identifier threatMetrixSessionId
    __threatMetrixSessionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'threatMetrixSessionId'), 'threatMetrixSessionId', '__httpwww_litle_comschema_advancedFraudChecksType_httpwww_litle_comschemathreatMetrixSessionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 655, 12), )


    threatMetrixSessionId = property(__threatMetrixSessionId.value, __threatMetrixSessionId.set, None, None)

    _ElementMap.update({
        __threatMetrixSessionId.name() : __threatMetrixSessionId
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'advancedFraudChecksType', advancedFraudChecksType)


# Complex type {http://www.litle.com/schema}advancedFraudResultsType with content type ELEMENT_ONLY
class advancedFraudResultsType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}advancedFraudResultsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'advancedFraudResultsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 665, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}deviceReviewStatus uses Python identifier deviceReviewStatus
    __deviceReviewStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deviceReviewStatus'), 'deviceReviewStatus', '__httpwww_litle_comschema_advancedFraudResultsType_httpwww_litle_comschemadeviceReviewStatus', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 667, 12), )


    deviceReviewStatus = property(__deviceReviewStatus.value, __deviceReviewStatus.set, None, None)


    # Element {http://www.litle.com/schema}deviceReputationScore uses Python identifier deviceReputationScore
    __deviceReputationScore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deviceReputationScore'), 'deviceReputationScore', '__httpwww_litle_comschema_advancedFraudResultsType_httpwww_litle_comschemadeviceReputationScore', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 668, 12), )


    deviceReputationScore = property(__deviceReputationScore.value, __deviceReputationScore.set, None, None)


    # Element {http://www.litle.com/schema}triggeredRule uses Python identifier triggeredRule
    __triggeredRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'triggeredRule'), 'triggeredRule', '__httpwww_litle_comschema_advancedFraudResultsType_httpwww_litle_comschematriggeredRule', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 669, 12), )


    triggeredRule = property(__triggeredRule.value, __triggeredRule.set, None, None)

    _ElementMap.update({
        __deviceReviewStatus.name() : __deviceReviewStatus,
        __deviceReputationScore.name() : __deviceReputationScore,
        __triggeredRule.name() : __triggeredRule
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'advancedFraudResultsType', advancedFraudResultsType)


# Complex type {http://www.litle.com/schema}voidRecyclingResponseType with content type ELEMENT_ONLY
class voidRecyclingResponseType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}voidRecyclingResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'voidRecyclingResponseType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 76, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}creditLitleTxnId uses Python identifier creditLitleTxnId
    __creditLitleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'creditLitleTxnId'), 'creditLitleTxnId', '__httpwww_litle_comschema_voidRecyclingResponseType_httpwww_litle_comschemacreditLitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 78, 12), )


    creditLitleTxnId = property(__creditLitleTxnId.value, __creditLitleTxnId.set, None, None)

    _ElementMap.update({
        __creditLitleTxnId.name() : __creditLitleTxnId
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'voidRecyclingResponseType', voidRecyclingResponseType)


# Complex type {http://www.litle.com/schema}recurringTransactionType with content type EMPTY
class recurringTransactionType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringTransactionType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 9, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recurringTransactionType', recurringTransactionType)


# Complex type {http://www.litle.com/schema}recurringTransactionResponseType with content type ELEMENT_ONLY
class recurringTransactionResponseType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringTransactionResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponseType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 12, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 14, 12), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 15, 12), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 16, 12), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 17, 12), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recurringTransactionResponseType', recurringTransactionResponseType)


# Complex type {http://www.litle.com/schema}recurringSubscriptionType with content type ELEMENT_ONLY
class recurringSubscriptionType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringSubscriptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recurringSubscriptionType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 142, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'planCode'), 'planCode', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 144, 12), )


    planCode = property(__planCode.value, __planCode.set, None, None)


    # Element {http://www.litle.com/schema}numberOfPayments uses Python identifier numberOfPayments
    __numberOfPayments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'numberOfPayments'), 'numberOfPayments', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemanumberOfPayments', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 145, 12), )


    numberOfPayments = property(__numberOfPayments.value, __numberOfPayments.set, None, None)


    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'startDate'), 'startDate', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 146, 12), )


    startDate = property(__startDate.value, __startDate.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 147, 12), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}createDiscount uses Python identifier createDiscount
    __createDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'createDiscount'), 'createDiscount', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemacreateDiscount', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 148, 12), )


    createDiscount = property(__createDiscount.value, __createDiscount.set, None, None)


    # Element {http://www.litle.com/schema}createAddOn uses Python identifier createAddOn
    __createAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'createAddOn'), 'createAddOn', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemacreateAddOn', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 149, 12), )


    createAddOn = property(__createAddOn.value, __createAddOn.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __numberOfPayments.name() : __numberOfPayments,
        __startDate.name() : __startDate,
        __amount.name() : __amount,
        __createDiscount.name() : __createDiscount,
        __createAddOn.name() : __createAddOn
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recurringSubscriptionType', recurringSubscriptionType)


# Complex type {http://www.litle.com/schema}litleInternalRecurringRequestType with content type ELEMENT_ONLY
class litleInternalRecurringRequestType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}litleInternalRecurringRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'litleInternalRecurringRequestType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 177, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_litleInternalRecurringRequestType_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 179, 12), )


    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)


    # Element {http://www.litle.com/schema}recurringTxnId uses Python identifier recurringTxnId
    __recurringTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringTxnId'), 'recurringTxnId', '__httpwww_litle_comschema_litleInternalRecurringRequestType_httpwww_litle_comschemarecurringTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 180, 12), )


    recurringTxnId = property(__recurringTxnId.value, __recurringTxnId.set, None, None)


    # Element {http://www.litle.com/schema}finalPayment uses Python identifier finalPayment
    __finalPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'finalPayment'), 'finalPayment', '__httpwww_litle_comschema_litleInternalRecurringRequestType_httpwww_litle_comschemafinalPayment', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 181, 12), )


    finalPayment = property(__finalPayment.value, __finalPayment.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __recurringTxnId.name() : __recurringTxnId,
        __finalPayment.name() : __finalPayment
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'litleInternalRecurringRequestType', litleInternalRecurringRequestType)


# Complex type {http://www.litle.com/schema}recurringRequestType with content type ELEMENT_ONLY
class recurringRequestType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recurringRequestType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 185, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_litle_comschema_recurringRequestType_httpwww_litle_comschemasubscription', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 187, 12), )


    subscription = property(__subscription.value, __subscription.set, None, None)

    _ElementMap.update({
        __subscription.name() : __subscription
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recurringRequestType', recurringRequestType)


# Complex type {http://www.litle.com/schema}recurringResponseType with content type ELEMENT_ONLY
class recurringResponseType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recurringResponseType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 191, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 193, 12), )


    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)


    # Element {http://www.litle.com/schema}responseCode uses Python identifier responseCode
    __responseCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseCode'), 'responseCode', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemaresponseCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 194, 12), )


    responseCode = property(__responseCode.value, __responseCode.set, None, None)


    # Element {http://www.litle.com/schema}responseMessage uses Python identifier responseMessage
    __responseMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseMessage'), 'responseMessage', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemaresponseMessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 195, 12), )


    responseMessage = property(__responseMessage.value, __responseMessage.set, None, None)


    # Element {http://www.litle.com/schema}recurringTxnId uses Python identifier recurringTxnId
    __recurringTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringTxnId'), 'recurringTxnId', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemarecurringTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 196, 12), )


    recurringTxnId = property(__recurringTxnId.value, __recurringTxnId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __responseCode.name() : __responseCode,
        __responseMessage.name() : __responseMessage,
        __recurringTxnId.name() : __recurringTxnId
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recurringResponseType', recurringResponseType)


# Complex type {http://www.litle.com/schema}createDiscountType with content type ELEMENT_ONLY
class createDiscountType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}createDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'createDiscountType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 200, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'discountCode'), 'discountCode', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemadiscountCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 202, 12), )


    discountCode = property(__discountCode.value, __discountCode.set, None, None)


    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 203, 12), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 204, 12), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'startDate'), 'startDate', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 205, 12), )


    startDate = property(__startDate.value, __startDate.set, None, None)


    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'endDate'), 'endDate', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 206, 12), )


    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'createDiscountType', createDiscountType)


# Complex type {http://www.litle.com/schema}updateDiscountType with content type ELEMENT_ONLY
class updateDiscountType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}updateDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'updateDiscountType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 210, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'discountCode'), 'discountCode', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemadiscountCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 212, 12), )


    discountCode = property(__discountCode.value, __discountCode.set, None, None)


    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 213, 12), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 214, 12), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'startDate'), 'startDate', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 215, 12), )


    startDate = property(__startDate.value, __startDate.set, None, None)


    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'endDate'), 'endDate', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 216, 12), )


    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'updateDiscountType', updateDiscountType)


# Complex type {http://www.litle.com/schema}deleteDiscountType with content type ELEMENT_ONLY
class deleteDiscountType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}deleteDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'deleteDiscountType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 220, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'discountCode'), 'discountCode', '__httpwww_litle_comschema_deleteDiscountType_httpwww_litle_comschemadiscountCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 222, 12), )


    discountCode = property(__discountCode.value, __discountCode.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'deleteDiscountType', deleteDiscountType)


# Complex type {http://www.litle.com/schema}createAddOnType with content type ELEMENT_ONLY
class createAddOnType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}createAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'createAddOnType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 226, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'addOnCode'), 'addOnCode', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaaddOnCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 228, 12), )


    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)


    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 229, 12), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 230, 12), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'startDate'), 'startDate', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 231, 12), )


    startDate = property(__startDate.value, __startDate.set, None, None)


    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'endDate'), 'endDate', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 232, 12), )


    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'createAddOnType', createAddOnType)


# Complex type {http://www.litle.com/schema}updateAddOnType with content type ELEMENT_ONLY
class updateAddOnType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}updateAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'updateAddOnType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 236, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'addOnCode'), 'addOnCode', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaaddOnCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 238, 12), )


    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)


    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 239, 12), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 240, 12), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'startDate'), 'startDate', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 241, 12), )


    startDate = property(__startDate.value, __startDate.set, None, None)


    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'endDate'), 'endDate', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 242, 12), )


    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'updateAddOnType', updateAddOnType)


# Complex type {http://www.litle.com/schema}deleteAddOnType with content type ELEMENT_ONLY
class deleteAddOnType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}deleteAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'deleteAddOnType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 246, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'addOnCode'), 'addOnCode', '__httpwww_litle_comschema_deleteAddOnType_httpwww_litle_comschemaaddOnCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 248, 12), )


    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'deleteAddOnType', deleteAddOnType)


# Complex type {http://www.litle.com/schema}merchantDataType with content type ELEMENT_ONLY
class merchantDataType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}merchantDataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'merchantDataType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 23, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}campaign uses Python identifier campaign
    __campaign = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'campaign'), 'campaign', '__httpwww_litle_comschema_merchantDataType_httpwww_litle_comschemacampaign', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 25, 12), )


    campaign = property(__campaign.value, __campaign.set, None, None)


    # Element {http://www.litle.com/schema}affiliate uses Python identifier affiliate
    __affiliate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'affiliate'), 'affiliate', '__httpwww_litle_comschema_merchantDataType_httpwww_litle_comschemaaffiliate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 26, 12), )


    affiliate = property(__affiliate.value, __affiliate.set, None, None)


    # Element {http://www.litle.com/schema}merchantGroupingId uses Python identifier merchantGroupingId
    __merchantGroupingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantGroupingId'), 'merchantGroupingId', '__httpwww_litle_comschema_merchantDataType_httpwww_litle_comschemamerchantGroupingId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 27, 12), )


    merchantGroupingId = property(__merchantGroupingId.value, __merchantGroupingId.set, None, None)

    _ElementMap.update({
        __campaign.name() : __campaign,
        __affiliate.name() : __affiliate,
        __merchantGroupingId.name() : __merchantGroupingId
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'merchantDataType', merchantDataType)


# Complex type {http://www.litle.com/schema}driversLicenseInfo with content type ELEMENT_ONLY
class driversLicenseInfo (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}driversLicenseInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'driversLicenseInfo')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 48, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}licenseNumber uses Python identifier licenseNumber
    __licenseNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'licenseNumber'), 'licenseNumber', '__httpwww_litle_comschema_driversLicenseInfo_httpwww_litle_comschemalicenseNumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 50, 12), )


    licenseNumber = property(__licenseNumber.value, __licenseNumber.set, None, None)


    # Element {http://www.litle.com/schema}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'state'), 'state', '__httpwww_litle_comschema_driversLicenseInfo_httpwww_litle_comschemastate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 51, 12), )


    state = property(__state.value, __state.set, None, None)


    # Element {http://www.litle.com/schema}dateOfBirth uses Python identifier dateOfBirth
    __dateOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dateOfBirth'), 'dateOfBirth', '__httpwww_litle_comschema_driversLicenseInfo_httpwww_litle_comschemadateOfBirth', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 52, 12), )


    dateOfBirth = property(__dateOfBirth.value, __dateOfBirth.set, None, None)

    _ElementMap.update({
        __licenseNumber.name() : __licenseNumber,
        __state.name() : __state,
        __dateOfBirth.name() : __dateOfBirth
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'driversLicenseInfo', driversLicenseInfo)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 57, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}ssn uses Python identifier ssn
    __ssn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'ssn'), 'ssn', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemassn', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 59, 16), )


    ssn = property(__ssn.value, __ssn.set, None, None)


    # Element {http://www.litle.com/schema}dob uses Python identifier dob
    __dob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dob'), 'dob', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemadob', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 66, 16), )


    dob = property(__dob.value, __dob.set, None, None)


    # Element {http://www.litle.com/schema}customerRegistrationDate uses Python identifier customerRegistrationDate
    __customerRegistrationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerRegistrationDate'), 'customerRegistrationDate', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemacustomerRegistrationDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 67, 16), )


    customerRegistrationDate = property(__customerRegistrationDate.value, __customerRegistrationDate.set, None, None)


    # Element {http://www.litle.com/schema}customerType uses Python identifier customerType
    __customerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerType'), 'customerType', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemacustomerType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 68, 16), )


    customerType = property(__customerType.value, __customerType.set, None, None)


    # Element {http://www.litle.com/schema}incomeAmount uses Python identifier incomeAmount
    __incomeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'incomeAmount'), 'incomeAmount', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemaincomeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 76, 16), )


    incomeAmount = property(__incomeAmount.value, __incomeAmount.set, None, None)


    # Element {http://www.litle.com/schema}incomeCurrency uses Python identifier incomeCurrency
    __incomeCurrency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'incomeCurrency'), 'incomeCurrency', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemaincomeCurrency', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 77, 16), )


    incomeCurrency = property(__incomeCurrency.value, __incomeCurrency.set, None, None)


    # Element {http://www.litle.com/schema}customerCheckingAccount uses Python identifier customerCheckingAccount
    __customerCheckingAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerCheckingAccount'), 'customerCheckingAccount', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemacustomerCheckingAccount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 78, 16), )


    customerCheckingAccount = property(__customerCheckingAccount.value, __customerCheckingAccount.set, None, None)


    # Element {http://www.litle.com/schema}customerSavingAccount uses Python identifier customerSavingAccount
    __customerSavingAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerSavingAccount'), 'customerSavingAccount', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemacustomerSavingAccount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 79, 16), )


    customerSavingAccount = property(__customerSavingAccount.value, __customerSavingAccount.set, None, None)


    # Element {http://www.litle.com/schema}employerName uses Python identifier employerName
    __employerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'employerName'), 'employerName', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemaemployerName', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 80, 16), )


    employerName = property(__employerName.value, __employerName.set, None, None)


    # Element {http://www.litle.com/schema}customerWorkTelephone uses Python identifier customerWorkTelephone
    __customerWorkTelephone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerWorkTelephone'), 'customerWorkTelephone', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemacustomerWorkTelephone', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 81, 16), )


    customerWorkTelephone = property(__customerWorkTelephone.value, __customerWorkTelephone.set, None, None)


    # Element {http://www.litle.com/schema}residenceStatus uses Python identifier residenceStatus
    __residenceStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'residenceStatus'), 'residenceStatus', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemaresidenceStatus', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 82, 16), )


    residenceStatus = property(__residenceStatus.value, __residenceStatus.set, None, None)


    # Element {http://www.litle.com/schema}yearsAtResidence uses Python identifier yearsAtResidence
    __yearsAtResidence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'yearsAtResidence'), 'yearsAtResidence', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemayearsAtResidence', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 91, 16), )


    yearsAtResidence = property(__yearsAtResidence.value, __yearsAtResidence.set, None, None)


    # Element {http://www.litle.com/schema}yearsAtEmployer uses Python identifier yearsAtEmployer
    __yearsAtEmployer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'yearsAtEmployer'), 'yearsAtEmployer', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemayearsAtEmployer', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 98, 16), )


    yearsAtEmployer = property(__yearsAtEmployer.value, __yearsAtEmployer.set, None, None)

    _ElementMap.update({
        __ssn.name() : __ssn,
        __dob.name() : __dob,
        __customerRegistrationDate.name() : __customerRegistrationDate,
        __customerType.name() : __customerType,
        __incomeAmount.name() : __incomeAmount,
        __incomeCurrency.name() : __incomeCurrency,
        __customerCheckingAccount.name() : __customerCheckingAccount,
        __customerSavingAccount.name() : __customerSavingAccount,
        __employerName.name() : __employerName,
        __customerWorkTelephone.name() : __customerWorkTelephone,
        __residenceStatus.name() : __residenceStatus,
        __yearsAtResidence.name() : __yearsAtResidence,
        __yearsAtEmployer.name() : __yearsAtEmployer
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 118, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}bmlProductType uses Python identifier bmlProductType
    __bmlProductType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bmlProductType'), 'bmlProductType', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemabmlProductType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 109, 4), )


    bmlProductType = property(__bmlProductType.value, __bmlProductType.set, None, None)


    # Element {http://www.litle.com/schema}bmlMerchantId uses Python identifier bmlMerchantId
    __bmlMerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bmlMerchantId'), 'bmlMerchantId', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemabmlMerchantId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 120, 16), )


    bmlMerchantId = property(__bmlMerchantId.value, __bmlMerchantId.set, None, None)


    # Element {http://www.litle.com/schema}termsAndConditions uses Python identifier termsAndConditions
    __termsAndConditions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'termsAndConditions'), 'termsAndConditions', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschematermsAndConditions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 123, 16), )


    termsAndConditions = property(__termsAndConditions.value, __termsAndConditions.set, None, None)


    # Element {http://www.litle.com/schema}preapprovalNumber uses Python identifier preapprovalNumber
    __preapprovalNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'preapprovalNumber'), 'preapprovalNumber', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemapreapprovalNumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 130, 16), )


    preapprovalNumber = property(__preapprovalNumber.value, __preapprovalNumber.set, None, None)


    # Element {http://www.litle.com/schema}merchantPromotionalCode uses Python identifier merchantPromotionalCode
    __merchantPromotionalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantPromotionalCode'), 'merchantPromotionalCode', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemamerchantPromotionalCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 131, 16), )


    merchantPromotionalCode = property(__merchantPromotionalCode.value, __merchantPromotionalCode.set, None, None)


    # Element {http://www.litle.com/schema}customerPasswordChanged uses Python identifier customerPasswordChanged
    __customerPasswordChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerPasswordChanged'), 'customerPasswordChanged', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemacustomerPasswordChanged', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 139, 16), )


    customerPasswordChanged = property(__customerPasswordChanged.value, __customerPasswordChanged.set, None, None)


    # Element {http://www.litle.com/schema}customerBillingAddressChanged uses Python identifier customerBillingAddressChanged
    __customerBillingAddressChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerBillingAddressChanged'), 'customerBillingAddressChanged', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemacustomerBillingAddressChanged', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 140, 16), )


    customerBillingAddressChanged = property(__customerBillingAddressChanged.value, __customerBillingAddressChanged.set, None, None)


    # Element {http://www.litle.com/schema}customerEmailChanged uses Python identifier customerEmailChanged
    __customerEmailChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerEmailChanged'), 'customerEmailChanged', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemacustomerEmailChanged', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 141, 16), )


    customerEmailChanged = property(__customerEmailChanged.value, __customerEmailChanged.set, None, None)


    # Element {http://www.litle.com/schema}customerPhoneChanged uses Python identifier customerPhoneChanged
    __customerPhoneChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerPhoneChanged'), 'customerPhoneChanged', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemacustomerPhoneChanged', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 142, 16), )


    customerPhoneChanged = property(__customerPhoneChanged.value, __customerPhoneChanged.set, None, None)


    # Element {http://www.litle.com/schema}secretQuestionCode uses Python identifier secretQuestionCode
    __secretQuestionCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'secretQuestionCode'), 'secretQuestionCode', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemasecretQuestionCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 144, 16), )


    secretQuestionCode = property(__secretQuestionCode.value, __secretQuestionCode.set, None, None)


    # Element {http://www.litle.com/schema}secretQuestionAnswer uses Python identifier secretQuestionAnswer
    __secretQuestionAnswer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'secretQuestionAnswer'), 'secretQuestionAnswer', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemasecretQuestionAnswer', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 145, 16), )


    secretQuestionAnswer = property(__secretQuestionAnswer.value, __secretQuestionAnswer.set, None, None)


    # Element {http://www.litle.com/schema}virtualAuthenticationKeyPresenceIndicator uses Python identifier virtualAuthenticationKeyPresenceIndicator
    __virtualAuthenticationKeyPresenceIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyPresenceIndicator'), 'virtualAuthenticationKeyPresenceIndicator', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemavirtualAuthenticationKeyPresenceIndicator', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 146, 16), )


    virtualAuthenticationKeyPresenceIndicator = property(__virtualAuthenticationKeyPresenceIndicator.value, __virtualAuthenticationKeyPresenceIndicator.set, None, None)


    # Element {http://www.litle.com/schema}virtualAuthenticationKeyData uses Python identifier virtualAuthenticationKeyData
    __virtualAuthenticationKeyData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyData'), 'virtualAuthenticationKeyData', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemavirtualAuthenticationKeyData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 148, 16), )


    virtualAuthenticationKeyData = property(__virtualAuthenticationKeyData.value, __virtualAuthenticationKeyData.set, None, None)


    # Element {http://www.litle.com/schema}itemCategoryCode uses Python identifier itemCategoryCode
    __itemCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'itemCategoryCode'), 'itemCategoryCode', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemaitemCategoryCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 150, 16), )


    itemCategoryCode = property(__itemCategoryCode.value, __itemCategoryCode.set, None, None)


    # Element {http://www.litle.com/schema}authorizationSourcePlatform uses Python identifier authorizationSourcePlatform
    __authorizationSourcePlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorizationSourcePlatform'), 'authorizationSourcePlatform', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemaauthorizationSourcePlatform', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 158, 16), )


    authorizationSourcePlatform = property(__authorizationSourcePlatform.value, __authorizationSourcePlatform.set, None, None)

    _ElementMap.update({
        __bmlProductType.name() : __bmlProductType,
        __bmlMerchantId.name() : __bmlMerchantId,
        __termsAndConditions.name() : __termsAndConditions,
        __preapprovalNumber.name() : __preapprovalNumber,
        __merchantPromotionalCode.name() : __merchantPromotionalCode,
        __customerPasswordChanged.name() : __customerPasswordChanged,
        __customerBillingAddressChanged.name() : __customerBillingAddressChanged,
        __customerEmailChanged.name() : __customerEmailChanged,
        __customerPhoneChanged.name() : __customerPhoneChanged,
        __secretQuestionCode.name() : __secretQuestionCode,
        __secretQuestionAnswer.name() : __secretQuestionAnswer,
        __virtualAuthenticationKeyPresenceIndicator.name() : __virtualAuthenticationKeyPresenceIndicator,
        __virtualAuthenticationKeyData.name() : __virtualAuthenticationKeyData,
        __itemCategoryCode.name() : __itemCategoryCode,
        __authorizationSourcePlatform.name() : __authorizationSourcePlatform
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 164, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}bmlMerchantId uses Python identifier bmlMerchantId
    __bmlMerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bmlMerchantId'), 'bmlMerchantId', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemabmlMerchantId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 166, 16), )


    bmlMerchantId = property(__bmlMerchantId.value, __bmlMerchantId.set, None, None)


    # Element {http://www.litle.com/schema}promotionalOfferCode uses Python identifier promotionalOfferCode
    __promotionalOfferCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'promotionalOfferCode'), 'promotionalOfferCode', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemapromotionalOfferCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 168, 16), )


    promotionalOfferCode = property(__promotionalOfferCode.value, __promotionalOfferCode.set, None, None)


    # Element {http://www.litle.com/schema}approvedTermsCode uses Python identifier approvedTermsCode
    __approvedTermsCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'approvedTermsCode'), 'approvedTermsCode', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemaapprovedTermsCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 170, 16), )


    approvedTermsCode = property(__approvedTermsCode.value, __approvedTermsCode.set, None, None)


    # Element {http://www.litle.com/schema}creditLine uses Python identifier creditLine
    __creditLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'creditLine'), 'creditLine', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemacreditLine', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 177, 16), )


    creditLine = property(__creditLine.value, __creditLine.set, None, None)


    # Element {http://www.litle.com/schema}addressIndicator uses Python identifier addressIndicator
    __addressIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'addressIndicator'), 'addressIndicator', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemaaddressIndicator', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 179, 16), )


    addressIndicator = property(__addressIndicator.value, __addressIndicator.set, None, None)


    # Element {http://www.litle.com/schema}loanToValueEstimator uses Python identifier loanToValueEstimator
    __loanToValueEstimator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'loanToValueEstimator'), 'loanToValueEstimator', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemaloanToValueEstimator', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 180, 16), )


    loanToValueEstimator = property(__loanToValueEstimator.value, __loanToValueEstimator.set, None, None)


    # Element {http://www.litle.com/schema}riskEstimator uses Python identifier riskEstimator
    __riskEstimator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'riskEstimator'), 'riskEstimator', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemariskEstimator', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 181, 16), )


    riskEstimator = property(__riskEstimator.value, __riskEstimator.set, None, None)


    # Element {http://www.litle.com/schema}riskQueueAssignment uses Python identifier riskQueueAssignment
    __riskQueueAssignment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'riskQueueAssignment'), 'riskQueueAssignment', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemariskQueueAssignment', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 182, 16), )


    riskQueueAssignment = property(__riskQueueAssignment.value, __riskQueueAssignment.set, None, None)

    _ElementMap.update({
        __bmlMerchantId.name() : __bmlMerchantId,
        __promotionalOfferCode.name() : __promotionalOfferCode,
        __approvedTermsCode.name() : __approvedTermsCode,
        __creditLine.name() : __creditLine,
        __addressIndicator.name() : __addressIndicator,
        __loanToValueEstimator.name() : __loanToValueEstimator,
        __riskEstimator.name() : __riskEstimator,
        __riskQueueAssignment.name() : __riskQueueAssignment
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}fraudCheckType with content type ELEMENT_ONLY
class fraudCheckType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}fraudCheckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'fraudCheckType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 187, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}authenticationValue uses Python identifier authenticationValue
    __authenticationValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authenticationValue'), 'authenticationValue', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemaauthenticationValue', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 189, 12), )


    authenticationValue = property(__authenticationValue.value, __authenticationValue.set, None, None)


    # Element {http://www.litle.com/schema}authenticationTransactionId uses Python identifier authenticationTransactionId
    __authenticationTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authenticationTransactionId'), 'authenticationTransactionId', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemaauthenticationTransactionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 190, 12), )


    authenticationTransactionId = property(__authenticationTransactionId.value, __authenticationTransactionId.set, None, None)


    # Element {http://www.litle.com/schema}customerIpAddress uses Python identifier customerIpAddress
    __customerIpAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerIpAddress'), 'customerIpAddress', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemacustomerIpAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 191, 12), )


    customerIpAddress = property(__customerIpAddress.value, __customerIpAddress.set, None, None)


    # Element {http://www.litle.com/schema}authenticatedByMerchant uses Python identifier authenticatedByMerchant
    __authenticatedByMerchant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authenticatedByMerchant'), 'authenticatedByMerchant', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemaauthenticatedByMerchant', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 192, 12), )


    authenticatedByMerchant = property(__authenticatedByMerchant.value, __authenticatedByMerchant.set, None, None)

    _ElementMap.update({
        __authenticationValue.name() : __authenticationValue,
        __authenticationTransactionId.name() : __authenticationTransactionId,
        __customerIpAddress.name() : __customerIpAddress,
        __authenticatedByMerchant.name() : __authenticatedByMerchant
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'fraudCheckType', fraudCheckType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 417, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}payerId uses Python identifier payerId
    __payerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payerId'), 'payerId', '__httpwww_litle_comschema_CTD_ANON_6_httpwww_litle_comschemapayerId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 419, 48), )


    payerId = property(__payerId.value, __payerId.set, None, None)


    # Element {http://www.litle.com/schema}payerEmail uses Python identifier payerEmail
    __payerEmail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payerEmail'), 'payerEmail', '__httpwww_litle_comschema_CTD_ANON_6_httpwww_litle_comschemapayerEmail', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 428, 48), )


    payerEmail = property(__payerEmail.value, __payerEmail.set, None, None)

    _ElementMap.update({
        __payerId.name() : __payerId,
        __payerEmail.name() : __payerEmail
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 524, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}authDate uses Python identifier authDate
    __authDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authDate'), 'authDate', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemaauthDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 526, 16), )


    authDate = property(__authDate.value, __authDate.set, None, None)


    # Element {http://www.litle.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authCode'), 'authCode', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemaauthCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 527, 16), )


    authCode = property(__authCode.value, __authCode.set, None, None)


    # Element {http://www.litle.com/schema}authAmount uses Python identifier authAmount
    __authAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authAmount'), 'authAmount', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemaauthAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 529, 16), )


    authAmount = property(__authAmount.value, __authAmount.set, None, None)


    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    _ElementMap.update({
        __authDate.name() : __authDate,
        __authCode.name() : __authCode,
        __authAmount.name() : __authAmount,
        __fraudResult.name() : __fraudResult
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 549, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}IIASFlag uses Python identifier IIASFlag
    __IIASFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'IIASFlag'), 'IIASFlag', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemaIIASFlag', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 552, 16), )


    IIASFlag = property(__IIASFlag.value, __IIASFlag.set, None, None)


    # Element {http://www.litle.com/schema}healthcareAmounts uses Python identifier healthcareAmounts
    __healthcareAmounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'healthcareAmounts'), 'healthcareAmounts', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemahealthcareAmounts', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 557, 4), )


    healthcareAmounts = property(__healthcareAmounts.value, __healthcareAmounts.set, None, None)

    _ElementMap.update({
        __IIASFlag.name() : __IIASFlag,
        __healthcareAmounts.name() : __healthcareAmounts
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 558, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}totalHealthcareAmount uses Python identifier totalHealthcareAmount
    __totalHealthcareAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'totalHealthcareAmount'), 'totalHealthcareAmount', '__httpwww_litle_comschema_CTD_ANON_9_httpwww_litle_comschematotalHealthcareAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 560, 16), )


    totalHealthcareAmount = property(__totalHealthcareAmount.value, __totalHealthcareAmount.set, None, None)


    # Element {http://www.litle.com/schema}RxAmount uses Python identifier RxAmount
    __RxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RxAmount'), 'RxAmount', '__httpwww_litle_comschema_CTD_ANON_9_httpwww_litle_comschemaRxAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 561, 16), )


    RxAmount = property(__RxAmount.value, __RxAmount.set, None, None)


    # Element {http://www.litle.com/schema}visionAmount uses Python identifier visionAmount
    __visionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'visionAmount'), 'visionAmount', '__httpwww_litle_comschema_CTD_ANON_9_httpwww_litle_comschemavisionAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 562, 16), )


    visionAmount = property(__visionAmount.value, __visionAmount.set, None, None)


    # Element {http://www.litle.com/schema}clinicOtherAmount uses Python identifier clinicOtherAmount
    __clinicOtherAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'clinicOtherAmount'), 'clinicOtherAmount', '__httpwww_litle_comschema_CTD_ANON_9_httpwww_litle_comschemaclinicOtherAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 563, 16), )


    clinicOtherAmount = property(__clinicOtherAmount.value, __clinicOtherAmount.set, None, None)


    # Element {http://www.litle.com/schema}dentalAmount uses Python identifier dentalAmount
    __dentalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dentalAmount'), 'dentalAmount', '__httpwww_litle_comschema_CTD_ANON_9_httpwww_litle_comschemadentalAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 564, 16), )


    dentalAmount = property(__dentalAmount.value, __dentalAmount.set, None, None)

    _ElementMap.update({
        __totalHealthcareAmount.name() : __totalHealthcareAmount,
        __RxAmount.name() : __RxAmount,
        __visionAmount.name() : __visionAmount,
        __clinicOtherAmount.name() : __clinicOtherAmount,
        __dentalAmount.name() : __dentalAmount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 570, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}customerReference uses Python identifier customerReference
    __customerReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerReference'), 'customerReference', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemacustomerReference', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 572, 16), )


    customerReference = property(__customerReference.value, __customerReference.set, None, None)


    # Element {http://www.litle.com/schema}salesTax uses Python identifier salesTax
    __salesTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'salesTax'), 'salesTax', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemasalesTax', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 573, 16), )


    salesTax = property(__salesTax.value, __salesTax.set, None, None)


    # Element {http://www.litle.com/schema}deliveryType uses Python identifier deliveryType
    __deliveryType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deliveryType'), 'deliveryType', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemadeliveryType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 574, 16), )


    deliveryType = property(__deliveryType.value, __deliveryType.set, None, None)


    # Element {http://www.litle.com/schema}taxExempt uses Python identifier taxExempt
    __taxExempt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxExempt'), 'taxExempt', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemataxExempt', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 585, 16), )


    taxExempt = property(__taxExempt.value, __taxExempt.set, None, None)


    # Element {http://www.litle.com/schema}discountAmount uses Python identifier discountAmount
    __discountAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'discountAmount'), 'discountAmount', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemadiscountAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 586, 16), )


    discountAmount = property(__discountAmount.value, __discountAmount.set, None, None)


    # Element {http://www.litle.com/schema}shippingAmount uses Python identifier shippingAmount
    __shippingAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shippingAmount'), 'shippingAmount', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemashippingAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 587, 16), )


    shippingAmount = property(__shippingAmount.value, __shippingAmount.set, None, None)


    # Element {http://www.litle.com/schema}dutyAmount uses Python identifier dutyAmount
    __dutyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'dutyAmount'), 'dutyAmount', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemadutyAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 588, 16), )


    dutyAmount = property(__dutyAmount.value, __dutyAmount.set, None, None)


    # Element {http://www.litle.com/schema}shipFromPostalCode uses Python identifier shipFromPostalCode
    __shipFromPostalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shipFromPostalCode'), 'shipFromPostalCode', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemashipFromPostalCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 589, 16), )


    shipFromPostalCode = property(__shipFromPostalCode.value, __shipFromPostalCode.set, None, None)


    # Element {http://www.litle.com/schema}destinationPostalCode uses Python identifier destinationPostalCode
    __destinationPostalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'destinationPostalCode'), 'destinationPostalCode', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemadestinationPostalCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 590, 16), )


    destinationPostalCode = property(__destinationPostalCode.value, __destinationPostalCode.set, None, None)


    # Element {http://www.litle.com/schema}destinationCountryCode uses Python identifier destinationCountryCode
    __destinationCountryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'destinationCountryCode'), 'destinationCountryCode', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemadestinationCountryCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 591, 16), )


    destinationCountryCode = property(__destinationCountryCode.value, __destinationCountryCode.set, None, None)


    # Element {http://www.litle.com/schema}invoiceReferenceNumber uses Python identifier invoiceReferenceNumber
    __invoiceReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'invoiceReferenceNumber'), 'invoiceReferenceNumber', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemainvoiceReferenceNumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 592, 16), )


    invoiceReferenceNumber = property(__invoiceReferenceNumber.value, __invoiceReferenceNumber.set, None, None)


    # Element {http://www.litle.com/schema}orderDate uses Python identifier orderDate
    __orderDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderDate'), 'orderDate', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemaorderDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 593, 16), )


    orderDate = property(__orderDate.value, __orderDate.set, None, None)


    # Element {http://www.litle.com/schema}detailTax uses Python identifier detailTax
    __detailTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'detailTax'), 'detailTax', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemadetailTax', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 609, 4), )


    detailTax = property(__detailTax.value, __detailTax.set, None, None)


    # Element {http://www.litle.com/schema}lineItemData uses Python identifier lineItemData
    __lineItemData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'lineItemData'), 'lineItemData', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemalineItemData', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 621, 4), )


    lineItemData = property(__lineItemData.value, __lineItemData.set, None, None)

    _ElementMap.update({
        __customerReference.name() : __customerReference,
        __salesTax.name() : __salesTax,
        __deliveryType.name() : __deliveryType,
        __taxExempt.name() : __taxExempt,
        __discountAmount.name() : __discountAmount,
        __shippingAmount.name() : __shippingAmount,
        __dutyAmount.name() : __dutyAmount,
        __shipFromPostalCode.name() : __shipFromPostalCode,
        __destinationPostalCode.name() : __destinationPostalCode,
        __destinationCountryCode.name() : __destinationCountryCode,
        __invoiceReferenceNumber.name() : __invoiceReferenceNumber,
        __orderDate.name() : __orderDate,
        __detailTax.name() : __detailTax,
        __lineItemData.name() : __lineItemData
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 601, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}sellerId uses Python identifier sellerId
    __sellerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'sellerId'), 'sellerId', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemasellerId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 603, 16), )


    sellerId = property(__sellerId.value, __sellerId.set, None, None)


    # Element {http://www.litle.com/schema}sellerMerchantCategoryCode uses Python identifier sellerMerchantCategoryCode
    __sellerMerchantCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'sellerMerchantCategoryCode'), 'sellerMerchantCategoryCode', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemasellerMerchantCategoryCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 604, 16), )


    sellerMerchantCategoryCode = property(__sellerMerchantCategoryCode.value, __sellerMerchantCategoryCode.set, None, None)

    _ElementMap.update({
        __sellerId.name() : __sellerId,
        __sellerMerchantCategoryCode.name() : __sellerMerchantCategoryCode
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 610, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}taxIncludedInTotal uses Python identifier taxIncludedInTotal
    __taxIncludedInTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxIncludedInTotal'), 'taxIncludedInTotal', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemataxIncludedInTotal', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 612, 16), )


    taxIncludedInTotal = property(__taxIncludedInTotal.value, __taxIncludedInTotal.set, None, None)


    # Element {http://www.litle.com/schema}taxAmount uses Python identifier taxAmount
    __taxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxAmount'), 'taxAmount', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemataxAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 613, 16), )


    taxAmount = property(__taxAmount.value, __taxAmount.set, None, None)


    # Element {http://www.litle.com/schema}taxRate uses Python identifier taxRate
    __taxRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxRate'), 'taxRate', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemataxRate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 614, 16), )


    taxRate = property(__taxRate.value, __taxRate.set, None, None)


    # Element {http://www.litle.com/schema}taxTypeIdentifier uses Python identifier taxTypeIdentifier
    __taxTypeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxTypeIdentifier'), 'taxTypeIdentifier', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemataxTypeIdentifier', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 615, 16), )


    taxTypeIdentifier = property(__taxTypeIdentifier.value, __taxTypeIdentifier.set, None, None)


    # Element {http://www.litle.com/schema}cardAcceptorTaxId uses Python identifier cardAcceptorTaxId
    __cardAcceptorTaxId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardAcceptorTaxId'), 'cardAcceptorTaxId', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemacardAcceptorTaxId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 616, 16), )


    cardAcceptorTaxId = property(__cardAcceptorTaxId.value, __cardAcceptorTaxId.set, None, None)

    _ElementMap.update({
        __taxIncludedInTotal.name() : __taxIncludedInTotal,
        __taxAmount.name() : __taxAmount,
        __taxRate.name() : __taxRate,
        __taxTypeIdentifier.name() : __taxTypeIdentifier,
        __cardAcceptorTaxId.name() : __cardAcceptorTaxId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 622, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}detailTax uses Python identifier detailTax
    __detailTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'detailTax'), 'detailTax', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemadetailTax', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 609, 4), )


    detailTax = property(__detailTax.value, __detailTax.set, None, None)


    # Element {http://www.litle.com/schema}itemSequenceNumber uses Python identifier itemSequenceNumber
    __itemSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'itemSequenceNumber'), 'itemSequenceNumber', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemaitemSequenceNumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 624, 16), )


    itemSequenceNumber = property(__itemSequenceNumber.value, __itemSequenceNumber.set, None, None)


    # Element {http://www.litle.com/schema}itemDescription uses Python identifier itemDescription
    __itemDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'itemDescription'), 'itemDescription', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemaitemDescription', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 625, 16), )


    itemDescription = property(__itemDescription.value, __itemDescription.set, None, None)


    # Element {http://www.litle.com/schema}productCode uses Python identifier productCode
    __productCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'productCode'), 'productCode', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemaproductCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 626, 16), )


    productCode = property(__productCode.value, __productCode.set, None, None)


    # Element {http://www.litle.com/schema}quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'quantity'), 'quantity', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemaquantity', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 627, 16), )


    quantity = property(__quantity.value, __quantity.set, None, None)


    # Element {http://www.litle.com/schema}unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'unitOfMeasure'), 'unitOfMeasure', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemaunitOfMeasure', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 628, 16), )


    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, None)


    # Element {http://www.litle.com/schema}taxAmount uses Python identifier taxAmount
    __taxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxAmount'), 'taxAmount', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemataxAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 629, 16), )


    taxAmount = property(__taxAmount.value, __taxAmount.set, None, None)


    # Element {http://www.litle.com/schema}lineItemTotal uses Python identifier lineItemTotal
    __lineItemTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'lineItemTotal'), 'lineItemTotal', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemalineItemTotal', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 630, 16), )


    lineItemTotal = property(__lineItemTotal.value, __lineItemTotal.set, None, None)


    # Element {http://www.litle.com/schema}lineItemTotalWithTax uses Python identifier lineItemTotalWithTax
    __lineItemTotalWithTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'lineItemTotalWithTax'), 'lineItemTotalWithTax', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemalineItemTotalWithTax', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 632, 16), )


    lineItemTotalWithTax = property(__lineItemTotalWithTax.value, __lineItemTotalWithTax.set, None, None)


    # Element {http://www.litle.com/schema}itemDiscountAmount uses Python identifier itemDiscountAmount
    __itemDiscountAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'itemDiscountAmount'), 'itemDiscountAmount', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemaitemDiscountAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 634, 16), )


    itemDiscountAmount = property(__itemDiscountAmount.value, __itemDiscountAmount.set, None, None)


    # Element {http://www.litle.com/schema}commodityCode uses Python identifier commodityCode
    __commodityCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'commodityCode'), 'commodityCode', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemacommodityCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 635, 16), )


    commodityCode = property(__commodityCode.value, __commodityCode.set, None, None)


    # Element {http://www.litle.com/schema}unitCost uses Python identifier unitCost
    __unitCost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'unitCost'), 'unitCost', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemaunitCost', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 636, 16), )


    unitCost = property(__unitCost.value, __unitCost.set, None, None)

    _ElementMap.update({
        __detailTax.name() : __detailTax,
        __itemSequenceNumber.name() : __itemSequenceNumber,
        __itemDescription.name() : __itemDescription,
        __productCode.name() : __productCode,
        __quantity.name() : __quantity,
        __unitOfMeasure.name() : __unitOfMeasure,
        __taxAmount.name() : __taxAmount,
        __lineItemTotal.name() : __lineItemTotal,
        __lineItemTotalWithTax.name() : __lineItemTotalWithTax,
        __itemDiscountAmount.name() : __itemDiscountAmount,
        __commodityCode.name() : __commodityCode,
        __unitCost.name() : __unitCost
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}accountInfoType with content type ELEMENT_ONLY
class accountInfoType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}accountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accountInfoType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 642, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_accountInfoType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 644, 12), )


    type = property(__type.value, __type.set, None, None)


    # Element {http://www.litle.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'number'), 'number', '__httpwww_litle_comschema_accountInfoType_httpwww_litle_comschemanumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 645, 12), )


    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'accountInfoType', accountInfoType)


# Complex type {http://www.litle.com/schema}echeckTokenType with content type ELEMENT_ONLY
class echeckTokenType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'echeckTokenType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 649, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), 'litleToken', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 651, 12), )


    litleToken = property(__litleToken.value, __litleToken.set, None, None)


    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 652, 12), )


    routingNum = property(__routingNum.value, __routingNum.set, None, None)


    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accType'), 'accType', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 653, 12), )


    accType = property(__accType.value, __accType.set, None, None)


    # Element {http://www.litle.com/schema}checkNum uses Python identifier checkNum
    __checkNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'checkNum'), 'checkNum', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemacheckNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 654, 12), )


    checkNum = property(__checkNum.value, __checkNum.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __routingNum.name() : __routingNum,
        __accType.name() : __accType,
        __checkNum.name() : __checkNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'echeckTokenType', echeckTokenType)


# Complex type {http://www.litle.com/schema}payPal with content type ELEMENT_ONLY
class payPal (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}payPal with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'payPal')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 658, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}payerId uses Python identifier payerId
    __payerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payerId'), 'payerId', '__httpwww_litle_comschema_payPal_httpwww_litle_comschemapayerId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 660, 12), )


    payerId = property(__payerId.value, __payerId.set, None, None)


    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'token'), 'token', '__httpwww_litle_comschema_payPal_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 661, 12), )


    token = property(__token.value, __token.set, None, None)


    # Element {http://www.litle.com/schema}transactionId uses Python identifier transactionId
    __transactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'transactionId'), 'transactionId', '__httpwww_litle_comschema_payPal_httpwww_litle_comschematransactionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 662, 12), )


    transactionId = property(__transactionId.value, __transactionId.set, None, None)

    _ElementMap.update({
        __payerId.name() : __payerId,
        __token.name() : __token,
        __transactionId.name() : __transactionId
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'payPal', payPal)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 681, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'phone'), 'phone', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemaphone', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 684, 20), )


    phone = property(__phone.value, __phone.set, None, None)


    # Element {http://www.litle.com/schema}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'city'), 'city', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemacity', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 685, 20), )


    city = property(__city.value, __city.set, None, None)


    # Element {http://www.litle.com/schema}url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'url'), 'url', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemaurl', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 686, 20), )


    url = property(__url.value, __url.set, None, None)


    # Element {http://www.litle.com/schema}descriptor uses Python identifier descriptor
    __descriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'descriptor'), 'descriptor', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemadescriptor', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 688, 16), )


    descriptor = property(__descriptor.value, __descriptor.set, None, None)

    _ElementMap.update({
        __phone.name() : __phone,
        __city.name() : __city,
        __url.name() : __url,
        __descriptor.name() : __descriptor
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 714, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}bypassVelocityCheck uses Python identifier bypassVelocityCheck
    __bypassVelocityCheck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bypassVelocityCheck'), 'bypassVelocityCheck', '__httpwww_litle_comschema_CTD_ANON_15_httpwww_litle_comschemabypassVelocityCheck', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 716, 16), )


    bypassVelocityCheck = property(__bypassVelocityCheck.value, __bypassVelocityCheck.set, None, None)

    _ElementMap.update({
        __bypassVelocityCheck.name() : __bypassVelocityCheck
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 722, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}capability uses Python identifier capability
    __capability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'capability'), 'capability', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschemacapability', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 724, 16), )


    capability = property(__capability.value, __capability.set, None, None)


    # Element {http://www.litle.com/schema}entryMode uses Python identifier entryMode
    __entryMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'entryMode'), 'entryMode', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschemaentryMode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 725, 16), )


    entryMode = property(__entryMode.value, __entryMode.set, None, None)


    # Element {http://www.litle.com/schema}cardholderId uses Python identifier cardholderId
    __cardholderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardholderId'), 'cardholderId', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschemacardholderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 726, 16), )


    cardholderId = property(__cardholderId.value, __cardholderId.set, None, None)


    # Element {http://www.litle.com/schema}terminalId uses Python identifier terminalId
    __terminalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'terminalId'), 'terminalId', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschematerminalId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 727, 16), )


    terminalId = property(__terminalId.value, __terminalId.set, None, None)

    _ElementMap.update({
        __capability.name() : __capability,
        __entryMode.name() : __entryMode,
        __cardholderId.name() : __cardholderId,
        __terminalId.name() : __terminalId
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}recycleAdviceType with content type ELEMENT_ONLY
class recycleAdviceType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recycleAdviceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recycleAdviceType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 839, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}nextRecycleTime uses Python identifier nextRecycleTime
    __nextRecycleTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'nextRecycleTime'), 'nextRecycleTime', '__httpwww_litle_comschema_recycleAdviceType_httpwww_litle_comschemanextRecycleTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 841, 12), )


    nextRecycleTime = property(__nextRecycleTime.value, __nextRecycleTime.set, None, None)


    # Element {http://www.litle.com/schema}recycleAdviceEnd uses Python identifier recycleAdviceEnd
    __recycleAdviceEnd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycleAdviceEnd'), 'recycleAdviceEnd', '__httpwww_litle_comschema_recycleAdviceType_httpwww_litle_comschemarecycleAdviceEnd', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 842, 12), )


    recycleAdviceEnd = property(__recycleAdviceEnd.value, __recycleAdviceEnd.set, None, None)

    _ElementMap.update({
        __nextRecycleTime.name() : __nextRecycleTime,
        __recycleAdviceEnd.name() : __recycleAdviceEnd
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recycleAdviceType', recycleAdviceType)


# Complex type {http://www.litle.com/schema}recyclingType with content type ELEMENT_ONLY
class recyclingType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recyclingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recyclingType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 854, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}recycleAdvice uses Python identifier recycleAdvice
    __recycleAdvice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycleAdvice'), 'recycleAdvice', '__httpwww_litle_comschema_recyclingType_httpwww_litle_comschemarecycleAdvice', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 856, 12), )


    recycleAdvice = property(__recycleAdvice.value, __recycleAdvice.set, None, None)


    # Element {http://www.litle.com/schema}recycleEngineActive uses Python identifier recycleEngineActive
    __recycleEngineActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycleEngineActive'), 'recycleEngineActive', '__httpwww_litle_comschema_recyclingType_httpwww_litle_comschemarecycleEngineActive', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 857, 12), )


    recycleEngineActive = property(__recycleEngineActive.value, __recycleEngineActive.set, None, None)

    _ElementMap.update({
        __recycleAdvice.name() : __recycleAdvice,
        __recycleEngineActive.name() : __recycleEngineActive
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recyclingType', recyclingType)


# Complex type {http://www.litle.com/schema}recyclingRequestType with content type ELEMENT_ONLY
class recyclingRequestType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recyclingRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'recyclingRequestType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 861, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}recycleBy uses Python identifier recycleBy
    __recycleBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycleBy'), 'recycleBy', '__httpwww_litle_comschema_recyclingRequestType_httpwww_litle_comschemarecycleBy', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 863, 12), )


    recycleBy = property(__recycleBy.value, __recycleBy.set, None, None)


    # Element {http://www.litle.com/schema}recycleId uses Python identifier recycleId
    __recycleId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycleId'), 'recycleId', '__httpwww_litle_comschema_recyclingRequestType_httpwww_litle_comschemarecycleId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 864, 12), )


    recycleId = property(__recycleId.value, __recycleId.set, None, None)

    _ElementMap.update({
        __recycleBy.name() : __recycleBy,
        __recycleId.name() : __recycleId
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'recyclingRequestType', recyclingRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 869, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}fundingSource uses Python identifier fundingSource
    __fundingSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundingSource'), 'fundingSource', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemafundingSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 871, 16), )


    fundingSource = property(__fundingSource.value, __fundingSource.set, None, None)


    # Element {http://www.litle.com/schema}affluence uses Python identifier affluence
    __affluence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'affluence'), 'affluence', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemaaffluence', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 881, 16), )


    affluence = property(__affluence.value, __affluence.set, None, None)


    # Element {http://www.litle.com/schema}issuerCountry uses Python identifier issuerCountry
    __issuerCountry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'issuerCountry'), 'issuerCountry', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemaissuerCountry', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 882, 16), )


    issuerCountry = property(__issuerCountry.value, __issuerCountry.set, None, None)


    # Element {http://www.litle.com/schema}cardProductType uses Python identifier cardProductType
    __cardProductType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardProductType'), 'cardProductType', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemacardProductType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 883, 16), )


    cardProductType = property(__cardProductType.value, __cardProductType.set, None, None)


    # Element {http://www.litle.com/schema}virtualAccountNumber uses Python identifier virtualAccountNumber
    __virtualAccountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'virtualAccountNumber'), 'virtualAccountNumber', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemavirtualAccountNumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 884, 16), )


    virtualAccountNumber = property(__virtualAccountNumber.value, __virtualAccountNumber.set, None, None)

    _ElementMap.update({
        __fundingSource.name() : __fundingSource,
        __affluence.name() : __affluence,
        __issuerCountry.name() : __issuerCountry,
        __cardProductType.name() : __cardProductType,
        __virtualAccountNumber.name() : __virtualAccountNumber
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 872, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 874, 28), )


    type = property(__type.value, __type.set, None, None)


    # Element {http://www.litle.com/schema}availableBalance uses Python identifier availableBalance
    __availableBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'availableBalance'), 'availableBalance', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschemaavailableBalance', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 875, 28), )


    availableBalance = property(__availableBalance.value, __availableBalance.set, None, None)


    # Element {http://www.litle.com/schema}reloadable uses Python identifier reloadable
    __reloadable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reloadable'), 'reloadable', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschemareloadable', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 876, 28), )


    reloadable = property(__reloadable.value, __reloadable.set, None, None)


    # Element {http://www.litle.com/schema}prepaidCardType uses Python identifier prepaidCardType
    __prepaidCardType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'prepaidCardType'), 'prepaidCardType', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschemaprepaidCardType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 877, 28), )


    prepaidCardType = property(__prepaidCardType.value, __prepaidCardType.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __availableBalance.name() : __availableBalance,
        __reloadable.name() : __reloadable,
        __prepaidCardType.name() : __prepaidCardType
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1165, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}avsResult uses Python identifier avsResult
    __avsResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'avsResult'), 'avsResult', '__httpwww_litle_comschema_CTD_ANON_19_httpwww_litle_comschemaavsResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1167, 16), )


    avsResult = property(__avsResult.value, __avsResult.set, None, None)


    # Element {http://www.litle.com/schema}cardValidationResult uses Python identifier cardValidationResult
    __cardValidationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardValidationResult'), 'cardValidationResult', '__httpwww_litle_comschema_CTD_ANON_19_httpwww_litle_comschemacardValidationResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1168, 16), )


    cardValidationResult = property(__cardValidationResult.value, __cardValidationResult.set, None, None)


    # Element {http://www.litle.com/schema}authenticationResult uses Python identifier authenticationResult
    __authenticationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authenticationResult'), 'authenticationResult', '__httpwww_litle_comschema_CTD_ANON_19_httpwww_litle_comschemaauthenticationResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1170, 16), )


    authenticationResult = property(__authenticationResult.value, __authenticationResult.set, None, None)


    # Element {http://www.litle.com/schema}advancedAVSResult uses Python identifier advancedAVSResult
    __advancedAVSResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'advancedAVSResult'), 'advancedAVSResult', '__httpwww_litle_comschema_CTD_ANON_19_httpwww_litle_comschemaadvancedAVSResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1171, 16), )


    advancedAVSResult = property(__advancedAVSResult.value, __advancedAVSResult.set, None, None)


    # Element {http://www.litle.com/schema}advancedFraudResults uses Python identifier advancedFraudResults
    __advancedFraudResults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudResults'), 'advancedFraudResults', '__httpwww_litle_comschema_CTD_ANON_19_httpwww_litle_comschemaadvancedFraudResults', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1172, 16), )


    advancedFraudResults = property(__advancedFraudResults.value, __advancedFraudResults.set, None, None)

    _ElementMap.update({
        __avsResult.name() : __avsResult,
        __cardValidationResult.name() : __cardValidationResult,
        __authenticationResult.name() : __authenticationResult,
        __advancedAVSResult.name() : __advancedAVSResult,
        __advancedFraudResults.name() : __advancedFraudResults
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1245, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}availableBalance uses Python identifier availableBalance
    __availableBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'availableBalance'), 'availableBalance', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemaavailableBalance', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1247, 13), )


    availableBalance = property(__availableBalance.value, __availableBalance.set, None, None)


    # Element {http://www.litle.com/schema}beginningBalance uses Python identifier beginningBalance
    __beginningBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'beginningBalance'), 'beginningBalance', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemabeginningBalance', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1248, 13), )


    beginningBalance = property(__beginningBalance.value, __beginningBalance.set, None, None)


    # Element {http://www.litle.com/schema}endingBalance uses Python identifier endingBalance
    __endingBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'endingBalance'), 'endingBalance', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemaendingBalance', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1249, 13), )


    endingBalance = property(__endingBalance.value, __endingBalance.set, None, None)


    # Element {http://www.litle.com/schema}cashBackAmount uses Python identifier cashBackAmount
    __cashBackAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cashBackAmount'), 'cashBackAmount', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemacashBackAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1250, 13), )


    cashBackAmount = property(__cashBackAmount.value, __cashBackAmount.set, None, None)

    _ElementMap.update({
        __availableBalance.name() : __availableBalance,
        __beginningBalance.name() : __beginningBalance,
        __endingBalance.name() : __endingBalance,
        __cashBackAmount.name() : __cashBackAmount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1256, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}accountNumber uses Python identifier accountNumber
    __accountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountNumber'), 'accountNumber', '__httpwww_litle_comschema_CTD_ANON_21_httpwww_litle_comschemaaccountNumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1258, 13), )


    accountNumber = property(__accountNumber.value, __accountNumber.set, None, None)


    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_CTD_ANON_21_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1259, 13), )


    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    _ElementMap.update({
        __accountNumber.name() : __accountNumber,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}echeckAccountInfoType with content type ELEMENT_ONLY
class echeckAccountInfoType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckAccountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'echeckAccountInfoType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1427, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accType'), 'accType', '__httpwww_litle_comschema_echeckAccountInfoType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1429, 16), )


    accType = property(__accType.value, __accType.set, None, None)


    # Element {http://www.litle.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accNum'), 'accNum', '__httpwww_litle_comschema_echeckAccountInfoType_httpwww_litle_comschemaaccNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1430, 16), )


    accNum = property(__accNum.value, __accNum.set, None, None)


    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckAccountInfoType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1431, 16), )


    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'echeckAccountInfoType', echeckAccountInfoType)


# Complex type {http://www.litle.com/schema}echeckTokenInfoType with content type ELEMENT_ONLY
class echeckTokenInfoType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckTokenInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'echeckTokenInfoType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1435, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accType'), 'accType', '__httpwww_litle_comschema_echeckTokenInfoType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1437, 16), )


    accType = property(__accType.value, __accType.set, None, None)


    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), 'litleToken', '__httpwww_litle_comschema_echeckTokenInfoType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1438, 16), )


    litleToken = property(__litleToken.value, __litleToken.set, None, None)


    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckTokenInfoType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1439, 16), )


    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __litleToken.name() : __litleToken,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'echeckTokenInfoType', echeckTokenInfoType)


# Complex type {http://www.litle.com/schema}cardAccountInfoType with content type ELEMENT_ONLY
class cardAccountInfoType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardAccountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardAccountInfoType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1444, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_cardAccountInfoType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1446, 16), )


    type = property(__type.value, __type.set, None, None)


    # Element {http://www.litle.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'number'), 'number', '__httpwww_litle_comschema_cardAccountInfoType_httpwww_litle_comschemanumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1447, 16), )


    number = property(__number.value, __number.set, None, None)


    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'expDate'), 'expDate', '__httpwww_litle_comschema_cardAccountInfoType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1448, 16), )


    expDate = property(__expDate.value, __expDate.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __expDate.name() : __expDate
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'cardAccountInfoType', cardAccountInfoType)


# Complex type {http://www.litle.com/schema}cardTokenInfoType with content type ELEMENT_ONLY
class cardTokenInfoType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardTokenInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardTokenInfoType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1452, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), 'litleToken', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1454, 16), )


    litleToken = property(__litleToken.value, __litleToken.set, None, None)


    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1455, 16), )


    type = property(__type.value, __type.set, None, None)


    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'expDate'), 'expDate', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1456, 16), )


    expDate = property(__expDate.value, __expDate.set, None, None)


    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bin'), 'bin', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1457, 16), )


    bin = property(__bin.value, __bin.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __type.name() : __type,
        __expDate.name() : __expDate,
        __bin.name() : __bin
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'cardTokenInfoType', cardTokenInfoType)


# Complex type {http://www.litle.com/schema}extendedCardResponseType with content type ELEMENT_ONLY
class extendedCardResponseType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}extendedCardResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'extendedCardResponseType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1462, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_extendedCardResponseType_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1464, 16), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_litle_comschema_extendedCardResponseType_httpwww_litle_comschemacode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1465, 16), )


    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __code.name() : __code
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'extendedCardResponseType', extendedCardResponseType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1471, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}originalAccountInfo uses Python identifier originalAccountInfo
    __originalAccountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'originalAccountInfo'), 'originalAccountInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaoriginalAccountInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1474, 20), )


    originalAccountInfo = property(__originalAccountInfo.value, __originalAccountInfo.set, None, None)


    # Element {http://www.litle.com/schema}newAccountInfo uses Python identifier newAccountInfo
    __newAccountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'newAccountInfo'), 'newAccountInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemanewAccountInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1475, 20), )


    newAccountInfo = property(__newAccountInfo.value, __newAccountInfo.set, None, None)


    # Element {http://www.litle.com/schema}originalTokenInfo uses Python identifier originalTokenInfo
    __originalTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'originalTokenInfo'), 'originalTokenInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaoriginalTokenInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1479, 20), )


    originalTokenInfo = property(__originalTokenInfo.value, __originalTokenInfo.set, None, None)


    # Element {http://www.litle.com/schema}newTokenInfo uses Python identifier newTokenInfo
    __newTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'newTokenInfo'), 'newTokenInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemanewTokenInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1480, 20), )


    newTokenInfo = property(__newTokenInfo.value, __newTokenInfo.set, None, None)


    # Element {http://www.litle.com/schema}originalCardInfo uses Python identifier originalCardInfo
    __originalCardInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'originalCardInfo'), 'originalCardInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaoriginalCardInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1484, 20), )


    originalCardInfo = property(__originalCardInfo.value, __originalCardInfo.set, None, None)


    # Element {http://www.litle.com/schema}newCardInfo uses Python identifier newCardInfo
    __newCardInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'newCardInfo'), 'newCardInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemanewCardInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1485, 20), )


    newCardInfo = property(__newCardInfo.value, __newCardInfo.set, None, None)


    # Element {http://www.litle.com/schema}extendedCardResponse uses Python identifier extendedCardResponse
    __extendedCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'extendedCardResponse'), 'extendedCardResponse', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaextendedCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1486, 20), )


    extendedCardResponse = property(__extendedCardResponse.value, __extendedCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}originalCardTokenInfo uses Python identifier originalCardTokenInfo
    __originalCardTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'originalCardTokenInfo'), 'originalCardTokenInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaoriginalCardTokenInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1490, 20), )


    originalCardTokenInfo = property(__originalCardTokenInfo.value, __originalCardTokenInfo.set, None, None)


    # Element {http://www.litle.com/schema}newCardTokenInfo uses Python identifier newCardTokenInfo
    __newCardTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'newCardTokenInfo'), 'newCardTokenInfo', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemanewCardTokenInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1491, 20), )


    newCardTokenInfo = property(__newCardTokenInfo.value, __newCardTokenInfo.set, None, None)

    _ElementMap.update({
        __originalAccountInfo.name() : __originalAccountInfo,
        __newAccountInfo.name() : __newAccountInfo,
        __originalTokenInfo.name() : __originalTokenInfo,
        __newTokenInfo.name() : __newTokenInfo,
        __originalCardInfo.name() : __originalCardInfo,
        __newCardInfo.name() : __newCardInfo,
        __extendedCardResponse.name() : __extendedCardResponse,
        __originalCardTokenInfo.name() : __originalCardTokenInfo,
        __newCardTokenInfo.name() : __newCardTokenInfo
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}echeckType with content type ELEMENT_ONLY
class echeckType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'echeckType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1554, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accType'), 'accType', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1556, 12), )


    accType = property(__accType.value, __accType.set, None, None)


    # Element {http://www.litle.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accNum'), 'accNum', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemaaccNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1557, 12), )


    accNum = property(__accNum.value, __accNum.set, None, None)


    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1558, 12), )


    routingNum = property(__routingNum.value, __routingNum.set, None, None)


    # Element {http://www.litle.com/schema}checkNum uses Python identifier checkNum
    __checkNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'checkNum'), 'checkNum', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemacheckNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1559, 12), )


    checkNum = property(__checkNum.value, __checkNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum,
        __checkNum.name() : __checkNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'echeckType', echeckType)


# Complex type {http://www.litle.com/schema}echeckForTokenType with content type ELEMENT_ONLY
class echeckForTokenType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckForTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'echeckForTokenType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1563, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accNum'), 'accNum', '__httpwww_litle_comschema_echeckForTokenType_httpwww_litle_comschemaaccNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1565, 12), )


    accNum = property(__accNum.value, __accNum.set, None, None)


    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckForTokenType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1566, 12), )


    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'echeckForTokenType', echeckForTokenType)


# Complex type {http://www.litle.com/schema}filteringType with content type ELEMENT_ONLY
class filteringType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}filteringType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'filteringType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1756, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}prepaid uses Python identifier prepaid
    __prepaid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'prepaid'), 'prepaid', '__httpwww_litle_comschema_filteringType_httpwww_litle_comschemaprepaid', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1758, 12), )


    prepaid = property(__prepaid.value, __prepaid.set, None, None)


    # Element {http://www.litle.com/schema}international uses Python identifier international
    __international = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'international'), 'international', '__httpwww_litle_comschema_filteringType_httpwww_litle_comschemainternational', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1759, 12), )


    international = property(__international.value, __international.set, None, None)


    # Element {http://www.litle.com/schema}chargeback uses Python identifier chargeback
    __chargeback = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'chargeback'), 'chargeback', '__httpwww_litle_comschema_filteringType_httpwww_litle_comschemachargeback', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1760, 12), )


    chargeback = property(__chargeback.value, __chargeback.set, None, None)

    _ElementMap.update({
        __prepaid.name() : __prepaid,
        __international.name() : __international,
        __chargeback.name() : __chargeback
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'filteringType', filteringType)


# Complex type {http://www.litle.com/schema}virtualGiftCardType with content type ELEMENT_ONLY
class virtualGiftCardType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}virtualGiftCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCardType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1818, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}accountNumberLength uses Python identifier accountNumberLength
    __accountNumberLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountNumberLength'), 'accountNumberLength', '__httpwww_litle_comschema_virtualGiftCardType_httpwww_litle_comschemaaccountNumberLength', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1820, 20), )


    accountNumberLength = property(__accountNumberLength.value, __accountNumberLength.set, None, None)


    # Element {http://www.litle.com/schema}giftCardBin uses Python identifier giftCardBin
    __giftCardBin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardBin'), 'giftCardBin', '__httpwww_litle_comschema_virtualGiftCardType_httpwww_litle_comschemagiftCardBin', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1821, 20), )


    giftCardBin = property(__giftCardBin.value, __giftCardBin.set, None, None)

    _ElementMap.update({
        __accountNumberLength.name() : __accountNumberLength,
        __giftCardBin.name() : __giftCardBin
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'virtualGiftCardType', virtualGiftCardType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 8, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}RFRRequest uses Python identifier RFRRequest
    __RFRRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RFRRequest'), 'RFRRequest', '__httpwww_litle_comschema_CTD_ANON_23_httpwww_litle_comschemaRFRRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 21, 4), )


    RFRRequest = property(__RFRRequest.value, __RFRRequest.set, None, None)


    # Element {http://www.litle.com/schema}batchRequest uses Python identifier batchRequest
    __batchRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'batchRequest'), 'batchRequest', '__httpwww_litle_comschema_CTD_ANON_23_httpwww_litle_comschemabatchRequest', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 29, 4), )


    batchRequest = property(__batchRequest.value, __batchRequest.set, None, None)


    # Element {http://www.litle.com/schema}authentication uses Python identifier authentication
    __authentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authentication'), 'authentication', '__httpwww_litle_comschema_CTD_ANON_23_httpwww_litle_comschemaauthentication', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 5, 4), )


    authentication = property(__authentication.value, __authentication.set, None, None)


    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_litle_comschema_CTD_ANON_23_version', versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 16, 12)
    __version._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 16, 12)

    version = property(__version.value, __version.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_23_id', string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 17, 12)
    __id._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 17, 12)

    id = property(__id.value, __id.set, None, None)


    # Attribute numBatchRequests uses Python identifier numBatchRequests
    __numBatchRequests = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numBatchRequests'), 'numBatchRequests', '__httpwww_litle_comschema_CTD_ANON_23_numBatchRequests', pyxb.binding.datatypes.integer, required=True)
    __numBatchRequests._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 18, 12)
    __numBatchRequests._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 18, 12)

    numBatchRequests = property(__numBatchRequests.value, __numBatchRequests.set, None, None)

    _ElementMap.update({
        __RFRRequest.name() : __RFRRequest,
        __batchRequest.name() : __batchRequest,
        __authentication.name() : __authentication
    })
    _AttributeMap.update({
        __version.name() : __version,
        __id.name() : __id,
        __numBatchRequests.name() : __numBatchRequests
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 30, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}recurringTransaction uses Python identifier recurringTransaction
    __recurringTransaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction'), 'recurringTransaction', '__httpwww_litle_comschema_CTD_ANON_24_httpwww_litle_comschemarecurringTransaction', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 6, 4), )


    recurringTransaction = property(__recurringTransaction.value, __recurringTransaction.set, None, None)


    # Element {http://www.litle.com/schema}transaction uses Python identifier transaction
    __transaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'transaction'), 'transaction', '__httpwww_litle_comschema_CTD_ANON_24_httpwww_litle_comschematransaction', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 8, 4), )


    transaction = property(__transaction.value, __transaction.set, None, None)


    # Attribute merchantSdk uses Python identifier merchantSdk
    __merchantSdk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'merchantSdk'), 'merchantSdk', '__httpwww_litle_comschema_CTD_ANON_24_merchantSdk', pyxb.binding.datatypes.string)
    __merchantSdk._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 35, 12)
    __merchantSdk._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 35, 12)

    merchantSdk = property(__merchantSdk.value, __merchantSdk.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_24_id', string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 36, 12)
    __id._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 36, 12)

    id = property(__id.value, __id.set, None, None)


    # Attribute numAuths uses Python identifier numAuths
    __numAuths = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numAuths'), 'numAuths', '__httpwww_litle_comschema_CTD_ANON_24_numAuths', pyxb.binding.datatypes.integer)
    __numAuths._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 37, 12)
    __numAuths._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 37, 12)

    numAuths = property(__numAuths.value, __numAuths.set, None, None)


    # Attribute authAmount uses Python identifier authAmount
    __authAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'authAmount'), 'authAmount', '__httpwww_litle_comschema_CTD_ANON_24_authAmount', batchTotalAmountType)
    __authAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 38, 12)
    __authAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 38, 12)

    authAmount = property(__authAmount.value, __authAmount.set, None, None)


    # Attribute numAuthReversals uses Python identifier numAuthReversals
    __numAuthReversals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numAuthReversals'), 'numAuthReversals', '__httpwww_litle_comschema_CTD_ANON_24_numAuthReversals', pyxb.binding.datatypes.integer)
    __numAuthReversals._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 39, 12)
    __numAuthReversals._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 39, 12)

    numAuthReversals = property(__numAuthReversals.value, __numAuthReversals.set, None, None)


    # Attribute authReversalAmount uses Python identifier authReversalAmount
    __authReversalAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'authReversalAmount'), 'authReversalAmount', '__httpwww_litle_comschema_CTD_ANON_24_authReversalAmount', batchTotalAmountType)
    __authReversalAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 40, 12)
    __authReversalAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 40, 12)

    authReversalAmount = property(__authReversalAmount.value, __authReversalAmount.set, None, None)


    # Attribute numCaptures uses Python identifier numCaptures
    __numCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numCaptures'), 'numCaptures', '__httpwww_litle_comschema_CTD_ANON_24_numCaptures', pyxb.binding.datatypes.integer)
    __numCaptures._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 41, 12)
    __numCaptures._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 41, 12)

    numCaptures = property(__numCaptures.value, __numCaptures.set, None, None)


    # Attribute captureAmount uses Python identifier captureAmount
    __captureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'captureAmount'), 'captureAmount', '__httpwww_litle_comschema_CTD_ANON_24_captureAmount', batchTotalAmountType)
    __captureAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 42, 12)
    __captureAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 42, 12)

    captureAmount = property(__captureAmount.value, __captureAmount.set, None, None)


    # Attribute numExtCaptures uses Python identifier numExtCaptures
    __numExtCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numExtCaptures'), 'numExtCaptures', '__httpwww_litle_comschema_CTD_ANON_24_numExtCaptures', pyxb.binding.datatypes.integer)
    __numExtCaptures._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 43, 12)
    __numExtCaptures._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 43, 12)

    numExtCaptures = property(__numExtCaptures.value, __numExtCaptures.set, None, None)


    # Attribute extCaptureAmount uses Python identifier extCaptureAmount
    __extCaptureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'extCaptureAmount'), 'extCaptureAmount', '__httpwww_litle_comschema_CTD_ANON_24_extCaptureAmount', batchTotalAmountType)
    __extCaptureAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 44, 12)
    __extCaptureAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 44, 12)

    extCaptureAmount = property(__extCaptureAmount.value, __extCaptureAmount.set, None, None)


    # Attribute numCredits uses Python identifier numCredits
    __numCredits = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numCredits'), 'numCredits', '__httpwww_litle_comschema_CTD_ANON_24_numCredits', pyxb.binding.datatypes.integer)
    __numCredits._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 45, 12)
    __numCredits._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 45, 12)

    numCredits = property(__numCredits.value, __numCredits.set, None, None)


    # Attribute creditAmount uses Python identifier creditAmount
    __creditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'creditAmount'), 'creditAmount', '__httpwww_litle_comschema_CTD_ANON_24_creditAmount', batchTotalAmountType)
    __creditAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 46, 12)
    __creditAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 46, 12)

    creditAmount = property(__creditAmount.value, __creditAmount.set, None, None)


    # Attribute numForceCaptures uses Python identifier numForceCaptures
    __numForceCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numForceCaptures'), 'numForceCaptures', '__httpwww_litle_comschema_CTD_ANON_24_numForceCaptures', pyxb.binding.datatypes.integer)
    __numForceCaptures._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 47, 12)
    __numForceCaptures._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 47, 12)

    numForceCaptures = property(__numForceCaptures.value, __numForceCaptures.set, None, None)


    # Attribute forceCaptureAmount uses Python identifier forceCaptureAmount
    __forceCaptureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forceCaptureAmount'), 'forceCaptureAmount', '__httpwww_litle_comschema_CTD_ANON_24_forceCaptureAmount', batchTotalAmountType)
    __forceCaptureAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 48, 12)
    __forceCaptureAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 48, 12)

    forceCaptureAmount = property(__forceCaptureAmount.value, __forceCaptureAmount.set, None, None)


    # Attribute numSales uses Python identifier numSales
    __numSales = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numSales'), 'numSales', '__httpwww_litle_comschema_CTD_ANON_24_numSales', pyxb.binding.datatypes.integer)
    __numSales._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 49, 12)
    __numSales._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 49, 12)

    numSales = property(__numSales.value, __numSales.set, None, None)


    # Attribute saleAmount uses Python identifier saleAmount
    __saleAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saleAmount'), 'saleAmount', '__httpwww_litle_comschema_CTD_ANON_24_saleAmount', batchTotalAmountType)
    __saleAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 50, 12)
    __saleAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 50, 12)

    saleAmount = property(__saleAmount.value, __saleAmount.set, None, None)


    # Attribute numCaptureGivenAuths uses Python identifier numCaptureGivenAuths
    __numCaptureGivenAuths = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numCaptureGivenAuths'), 'numCaptureGivenAuths', '__httpwww_litle_comschema_CTD_ANON_24_numCaptureGivenAuths', pyxb.binding.datatypes.integer)
    __numCaptureGivenAuths._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 51, 12)
    __numCaptureGivenAuths._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 51, 12)

    numCaptureGivenAuths = property(__numCaptureGivenAuths.value, __numCaptureGivenAuths.set, None, None)


    # Attribute captureGivenAuthAmount uses Python identifier captureGivenAuthAmount
    __captureGivenAuthAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'captureGivenAuthAmount'), 'captureGivenAuthAmount', '__httpwww_litle_comschema_CTD_ANON_24_captureGivenAuthAmount', batchTotalAmountType)
    __captureGivenAuthAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 52, 12)
    __captureGivenAuthAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 52, 12)

    captureGivenAuthAmount = property(__captureGivenAuthAmount.value, __captureGivenAuthAmount.set, None, None)


    # Attribute numEcheckSales uses Python identifier numEcheckSales
    __numEcheckSales = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numEcheckSales'), 'numEcheckSales', '__httpwww_litle_comschema_CTD_ANON_24_numEcheckSales', pyxb.binding.datatypes.integer)
    __numEcheckSales._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 53, 12)
    __numEcheckSales._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 53, 12)

    numEcheckSales = property(__numEcheckSales.value, __numEcheckSales.set, None, None)


    # Attribute echeckSalesAmount uses Python identifier echeckSalesAmount
    __echeckSalesAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'echeckSalesAmount'), 'echeckSalesAmount', '__httpwww_litle_comschema_CTD_ANON_24_echeckSalesAmount', batchTotalAmountType)
    __echeckSalesAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 54, 12)
    __echeckSalesAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 54, 12)

    echeckSalesAmount = property(__echeckSalesAmount.value, __echeckSalesAmount.set, None, None)


    # Attribute numEcheckCredit uses Python identifier numEcheckCredit
    __numEcheckCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numEcheckCredit'), 'numEcheckCredit', '__httpwww_litle_comschema_CTD_ANON_24_numEcheckCredit', pyxb.binding.datatypes.integer)
    __numEcheckCredit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 55, 12)
    __numEcheckCredit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 55, 12)

    numEcheckCredit = property(__numEcheckCredit.value, __numEcheckCredit.set, None, None)


    # Attribute echeckCreditAmount uses Python identifier echeckCreditAmount
    __echeckCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'echeckCreditAmount'), 'echeckCreditAmount', '__httpwww_litle_comschema_CTD_ANON_24_echeckCreditAmount', batchTotalAmountType)
    __echeckCreditAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 56, 12)
    __echeckCreditAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 56, 12)

    echeckCreditAmount = property(__echeckCreditAmount.value, __echeckCreditAmount.set, None, None)


    # Attribute numEcheckVerification uses Python identifier numEcheckVerification
    __numEcheckVerification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numEcheckVerification'), 'numEcheckVerification', '__httpwww_litle_comschema_CTD_ANON_24_numEcheckVerification', pyxb.binding.datatypes.integer)
    __numEcheckVerification._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 57, 12)
    __numEcheckVerification._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 57, 12)

    numEcheckVerification = property(__numEcheckVerification.value, __numEcheckVerification.set, None, None)


    # Attribute echeckVerificationAmount uses Python identifier echeckVerificationAmount
    __echeckVerificationAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'echeckVerificationAmount'), 'echeckVerificationAmount', '__httpwww_litle_comschema_CTD_ANON_24_echeckVerificationAmount', batchTotalAmountType)
    __echeckVerificationAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 58, 12)
    __echeckVerificationAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 58, 12)

    echeckVerificationAmount = property(__echeckVerificationAmount.value, __echeckVerificationAmount.set, None, None)


    # Attribute numEcheckRedeposit uses Python identifier numEcheckRedeposit
    __numEcheckRedeposit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numEcheckRedeposit'), 'numEcheckRedeposit', '__httpwww_litle_comschema_CTD_ANON_24_numEcheckRedeposit', pyxb.binding.datatypes.integer)
    __numEcheckRedeposit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 59, 12)
    __numEcheckRedeposit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 59, 12)

    numEcheckRedeposit = property(__numEcheckRedeposit.value, __numEcheckRedeposit.set, None, None)


    # Attribute numAccountUpdates uses Python identifier numAccountUpdates
    __numAccountUpdates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numAccountUpdates'), 'numAccountUpdates', '__httpwww_litle_comschema_CTD_ANON_24_numAccountUpdates', pyxb.binding.datatypes.integer)
    __numAccountUpdates._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 60, 12)
    __numAccountUpdates._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 60, 12)

    numAccountUpdates = property(__numAccountUpdates.value, __numAccountUpdates.set, None, None)


    # Attribute numTokenRegistrations uses Python identifier numTokenRegistrations
    __numTokenRegistrations = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numTokenRegistrations'), 'numTokenRegistrations', '__httpwww_litle_comschema_CTD_ANON_24_numTokenRegistrations', pyxb.binding.datatypes.integer)
    __numTokenRegistrations._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 61, 12)
    __numTokenRegistrations._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 61, 12)

    numTokenRegistrations = property(__numTokenRegistrations.value, __numTokenRegistrations.set, None, None)


    # Attribute numUpdateCardValidationNumOnTokens uses Python identifier numUpdateCardValidationNumOnTokens
    __numUpdateCardValidationNumOnTokens = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numUpdateCardValidationNumOnTokens'), 'numUpdateCardValidationNumOnTokens', '__httpwww_litle_comschema_CTD_ANON_24_numUpdateCardValidationNumOnTokens', pyxb.binding.datatypes.integer)
    __numUpdateCardValidationNumOnTokens._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 62, 12)
    __numUpdateCardValidationNumOnTokens._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 62, 12)

    numUpdateCardValidationNumOnTokens = property(__numUpdateCardValidationNumOnTokens.value, __numUpdateCardValidationNumOnTokens.set, None, None)


    # Attribute numCancelSubscriptions uses Python identifier numCancelSubscriptions
    __numCancelSubscriptions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numCancelSubscriptions'), 'numCancelSubscriptions', '__httpwww_litle_comschema_CTD_ANON_24_numCancelSubscriptions', pyxb.binding.datatypes.integer)
    __numCancelSubscriptions._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 63, 12)
    __numCancelSubscriptions._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 63, 12)

    numCancelSubscriptions = property(__numCancelSubscriptions.value, __numCancelSubscriptions.set, None, None)


    # Attribute numUpdateSubscriptions uses Python identifier numUpdateSubscriptions
    __numUpdateSubscriptions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numUpdateSubscriptions'), 'numUpdateSubscriptions', '__httpwww_litle_comschema_CTD_ANON_24_numUpdateSubscriptions', pyxb.binding.datatypes.integer)
    __numUpdateSubscriptions._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 64, 12)
    __numUpdateSubscriptions._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 64, 12)

    numUpdateSubscriptions = property(__numUpdateSubscriptions.value, __numUpdateSubscriptions.set, None, None)


    # Attribute numCreatePlans uses Python identifier numCreatePlans
    __numCreatePlans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numCreatePlans'), 'numCreatePlans', '__httpwww_litle_comschema_CTD_ANON_24_numCreatePlans', pyxb.binding.datatypes.integer)
    __numCreatePlans._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 65, 12)
    __numCreatePlans._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 65, 12)

    numCreatePlans = property(__numCreatePlans.value, __numCreatePlans.set, None, None)


    # Attribute numUpdatePlans uses Python identifier numUpdatePlans
    __numUpdatePlans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numUpdatePlans'), 'numUpdatePlans', '__httpwww_litle_comschema_CTD_ANON_24_numUpdatePlans', pyxb.binding.datatypes.integer)
    __numUpdatePlans._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 66, 12)
    __numUpdatePlans._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 66, 12)

    numUpdatePlans = property(__numUpdatePlans.value, __numUpdatePlans.set, None, None)


    # Attribute numActivates uses Python identifier numActivates
    __numActivates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numActivates'), 'numActivates', '__httpwww_litle_comschema_CTD_ANON_24_numActivates', pyxb.binding.datatypes.integer)
    __numActivates._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 67, 12)
    __numActivates._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 67, 12)

    numActivates = property(__numActivates.value, __numActivates.set, None, None)


    # Attribute numDeactivates uses Python identifier numDeactivates
    __numDeactivates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numDeactivates'), 'numDeactivates', '__httpwww_litle_comschema_CTD_ANON_24_numDeactivates', pyxb.binding.datatypes.integer)
    __numDeactivates._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 68, 12)
    __numDeactivates._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 68, 12)

    numDeactivates = property(__numDeactivates.value, __numDeactivates.set, None, None)


    # Attribute activateAmount uses Python identifier activateAmount
    __activateAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activateAmount'), 'activateAmount', '__httpwww_litle_comschema_CTD_ANON_24_activateAmount', batchTotalAmountType)
    __activateAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 69, 12)
    __activateAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 69, 12)

    activateAmount = property(__activateAmount.value, __activateAmount.set, None, None)


    # Attribute numLoads uses Python identifier numLoads
    __numLoads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numLoads'), 'numLoads', '__httpwww_litle_comschema_CTD_ANON_24_numLoads', pyxb.binding.datatypes.integer)
    __numLoads._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 70, 12)
    __numLoads._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 70, 12)

    numLoads = property(__numLoads.value, __numLoads.set, None, None)


    # Attribute loadAmount uses Python identifier loadAmount
    __loadAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loadAmount'), 'loadAmount', '__httpwww_litle_comschema_CTD_ANON_24_loadAmount', batchTotalAmountType)
    __loadAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 71, 12)
    __loadAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 71, 12)

    loadAmount = property(__loadAmount.value, __loadAmount.set, None, None)


    # Attribute numUnloads uses Python identifier numUnloads
    __numUnloads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numUnloads'), 'numUnloads', '__httpwww_litle_comschema_CTD_ANON_24_numUnloads', pyxb.binding.datatypes.integer)
    __numUnloads._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 72, 12)
    __numUnloads._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 72, 12)

    numUnloads = property(__numUnloads.value, __numUnloads.set, None, None)


    # Attribute unloadAmount uses Python identifier unloadAmount
    __unloadAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unloadAmount'), 'unloadAmount', '__httpwww_litle_comschema_CTD_ANON_24_unloadAmount', batchTotalAmountType)
    __unloadAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 73, 12)
    __unloadAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 73, 12)

    unloadAmount = property(__unloadAmount.value, __unloadAmount.set, None, None)


    # Attribute numBalanceInquirys uses Python identifier numBalanceInquirys
    __numBalanceInquirys = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numBalanceInquirys'), 'numBalanceInquirys', '__httpwww_litle_comschema_CTD_ANON_24_numBalanceInquirys', pyxb.binding.datatypes.integer)
    __numBalanceInquirys._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 74, 12)
    __numBalanceInquirys._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 74, 12)

    numBalanceInquirys = property(__numBalanceInquirys.value, __numBalanceInquirys.set, None, None)


    # Attribute numPayFacCredit uses Python identifier numPayFacCredit
    __numPayFacCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numPayFacCredit'), 'numPayFacCredit', '__httpwww_litle_comschema_CTD_ANON_24_numPayFacCredit', pyxb.binding.datatypes.integer)
    __numPayFacCredit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 75, 12)
    __numPayFacCredit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 75, 12)

    numPayFacCredit = property(__numPayFacCredit.value, __numPayFacCredit.set, None, None)


    # Attribute numPayFacDebit uses Python identifier numPayFacDebit
    __numPayFacDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numPayFacDebit'), 'numPayFacDebit', '__httpwww_litle_comschema_CTD_ANON_24_numPayFacDebit', pyxb.binding.datatypes.integer)
    __numPayFacDebit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 76, 12)
    __numPayFacDebit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 76, 12)

    numPayFacDebit = property(__numPayFacDebit.value, __numPayFacDebit.set, None, None)


    # Attribute numSubmerchantCredit uses Python identifier numSubmerchantCredit
    __numSubmerchantCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numSubmerchantCredit'), 'numSubmerchantCredit', '__httpwww_litle_comschema_CTD_ANON_24_numSubmerchantCredit', pyxb.binding.datatypes.integer)
    __numSubmerchantCredit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 77, 12)
    __numSubmerchantCredit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 77, 12)

    numSubmerchantCredit = property(__numSubmerchantCredit.value, __numSubmerchantCredit.set, None, None)


    # Attribute numSubmerchantDebit uses Python identifier numSubmerchantDebit
    __numSubmerchantDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numSubmerchantDebit'), 'numSubmerchantDebit', '__httpwww_litle_comschema_CTD_ANON_24_numSubmerchantDebit', pyxb.binding.datatypes.integer)
    __numSubmerchantDebit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 78, 12)
    __numSubmerchantDebit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 78, 12)

    numSubmerchantDebit = property(__numSubmerchantDebit.value, __numSubmerchantDebit.set, None, None)


    # Attribute numReserveCredit uses Python identifier numReserveCredit
    __numReserveCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numReserveCredit'), 'numReserveCredit', '__httpwww_litle_comschema_CTD_ANON_24_numReserveCredit', pyxb.binding.datatypes.integer)
    __numReserveCredit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 79, 12)
    __numReserveCredit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 79, 12)

    numReserveCredit = property(__numReserveCredit.value, __numReserveCredit.set, None, None)


    # Attribute numReserveDebit uses Python identifier numReserveDebit
    __numReserveDebit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numReserveDebit'), 'numReserveDebit', '__httpwww_litle_comschema_CTD_ANON_24_numReserveDebit', pyxb.binding.datatypes.integer)
    __numReserveDebit._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 80, 12)
    __numReserveDebit._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 80, 12)

    numReserveDebit = property(__numReserveDebit.value, __numReserveDebit.set, None, None)


    # Attribute payFacCreditAmount uses Python identifier payFacCreditAmount
    __payFacCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'payFacCreditAmount'), 'payFacCreditAmount', '__httpwww_litle_comschema_CTD_ANON_24_payFacCreditAmount', batchTotalAmountType)
    __payFacCreditAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 81, 12)
    __payFacCreditAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 81, 12)

    payFacCreditAmount = property(__payFacCreditAmount.value, __payFacCreditAmount.set, None, None)


    # Attribute payFacDebitAmount uses Python identifier payFacDebitAmount
    __payFacDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'payFacDebitAmount'), 'payFacDebitAmount', '__httpwww_litle_comschema_CTD_ANON_24_payFacDebitAmount', batchTotalAmountType)
    __payFacDebitAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 82, 12)
    __payFacDebitAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 82, 12)

    payFacDebitAmount = property(__payFacDebitAmount.value, __payFacDebitAmount.set, None, None)


    # Attribute submerchantCreditAmount uses Python identifier submerchantCreditAmount
    __submerchantCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'submerchantCreditAmount'), 'submerchantCreditAmount', '__httpwww_litle_comschema_CTD_ANON_24_submerchantCreditAmount', batchTotalAmountType)
    __submerchantCreditAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 83, 12)
    __submerchantCreditAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 83, 12)

    submerchantCreditAmount = property(__submerchantCreditAmount.value, __submerchantCreditAmount.set, None, None)


    # Attribute submerchantDebitAmount uses Python identifier submerchantDebitAmount
    __submerchantDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'submerchantDebitAmount'), 'submerchantDebitAmount', '__httpwww_litle_comschema_CTD_ANON_24_submerchantDebitAmount', batchTotalAmountType)
    __submerchantDebitAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 84, 12)
    __submerchantDebitAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 84, 12)

    submerchantDebitAmount = property(__submerchantDebitAmount.value, __submerchantDebitAmount.set, None, None)


    # Attribute reserveCreditAmount uses Python identifier reserveCreditAmount
    __reserveCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reserveCreditAmount'), 'reserveCreditAmount', '__httpwww_litle_comschema_CTD_ANON_24_reserveCreditAmount', batchTotalAmountType)
    __reserveCreditAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 85, 12)
    __reserveCreditAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 85, 12)

    reserveCreditAmount = property(__reserveCreditAmount.value, __reserveCreditAmount.set, None, None)


    # Attribute reserveDebitAmount uses Python identifier reserveDebitAmount
    __reserveDebitAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reserveDebitAmount'), 'reserveDebitAmount', '__httpwww_litle_comschema_CTD_ANON_24_reserveDebitAmount', batchTotalAmountType)
    __reserveDebitAmount._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 86, 12)
    __reserveDebitAmount._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 86, 12)

    reserveDebitAmount = property(__reserveDebitAmount.value, __reserveDebitAmount.set, None, None)


    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON_24_merchantId', merchantIdentificationType, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 88, 12)
    __merchantId._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 88, 12)

    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    _ElementMap.update({
        __recurringTransaction.name() : __recurringTransaction,
        __transaction.name() : __transaction
    })
    _AttributeMap.update({
        __merchantSdk.name() : __merchantSdk,
        __id.name() : __id,
        __numAuths.name() : __numAuths,
        __authAmount.name() : __authAmount,
        __numAuthReversals.name() : __numAuthReversals,
        __authReversalAmount.name() : __authReversalAmount,
        __numCaptures.name() : __numCaptures,
        __captureAmount.name() : __captureAmount,
        __numExtCaptures.name() : __numExtCaptures,
        __extCaptureAmount.name() : __extCaptureAmount,
        __numCredits.name() : __numCredits,
        __creditAmount.name() : __creditAmount,
        __numForceCaptures.name() : __numForceCaptures,
        __forceCaptureAmount.name() : __forceCaptureAmount,
        __numSales.name() : __numSales,
        __saleAmount.name() : __saleAmount,
        __numCaptureGivenAuths.name() : __numCaptureGivenAuths,
        __captureGivenAuthAmount.name() : __captureGivenAuthAmount,
        __numEcheckSales.name() : __numEcheckSales,
        __echeckSalesAmount.name() : __echeckSalesAmount,
        __numEcheckCredit.name() : __numEcheckCredit,
        __echeckCreditAmount.name() : __echeckCreditAmount,
        __numEcheckVerification.name() : __numEcheckVerification,
        __echeckVerificationAmount.name() : __echeckVerificationAmount,
        __numEcheckRedeposit.name() : __numEcheckRedeposit,
        __numAccountUpdates.name() : __numAccountUpdates,
        __numTokenRegistrations.name() : __numTokenRegistrations,
        __numUpdateCardValidationNumOnTokens.name() : __numUpdateCardValidationNumOnTokens,
        __numCancelSubscriptions.name() : __numCancelSubscriptions,
        __numUpdateSubscriptions.name() : __numUpdateSubscriptions,
        __numCreatePlans.name() : __numCreatePlans,
        __numUpdatePlans.name() : __numUpdatePlans,
        __numActivates.name() : __numActivates,
        __numDeactivates.name() : __numDeactivates,
        __activateAmount.name() : __activateAmount,
        __numLoads.name() : __numLoads,
        __loadAmount.name() : __loadAmount,
        __numUnloads.name() : __numUnloads,
        __unloadAmount.name() : __unloadAmount,
        __numBalanceInquirys.name() : __numBalanceInquirys,
        __numPayFacCredit.name() : __numPayFacCredit,
        __numPayFacDebit.name() : __numPayFacDebit,
        __numSubmerchantCredit.name() : __numSubmerchantCredit,
        __numSubmerchantDebit.name() : __numSubmerchantDebit,
        __numReserveCredit.name() : __numReserveCredit,
        __numReserveDebit.name() : __numReserveDebit,
        __payFacCreditAmount.name() : __payFacCreditAmount,
        __payFacDebitAmount.name() : __payFacDebitAmount,
        __submerchantCreditAmount.name() : __submerchantCreditAmount,
        __submerchantDebitAmount.name() : __submerchantDebitAmount,
        __reserveCreditAmount.name() : __reserveCreditAmount,
        __reserveDebitAmount.name() : __reserveDebitAmount,
        __merchantId.name() : __merchantId
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 165, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}RFRResponse uses Python identifier RFRResponse
    __RFRResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'RFRResponse'), 'RFRResponse', '__httpwww_litle_comschema_CTD_ANON_25_httpwww_litle_comschemaRFRResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 179, 4), )


    RFRResponse = property(__RFRResponse.value, __RFRResponse.set, None, None)


    # Element {http://www.litle.com/schema}batchResponse uses Python identifier batchResponse
    __batchResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'batchResponse'), 'batchResponse', '__httpwww_litle_comschema_CTD_ANON_25_httpwww_litle_comschemabatchResponse', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 185, 4), )


    batchResponse = property(__batchResponse.value, __batchResponse.set, None, None)


    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_litle_comschema_CTD_ANON_25_version', versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 172, 12)
    __version._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 172, 12)

    version = property(__version.value, __version.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_25_id', string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 173, 12)
    __id._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 173, 12)

    id = property(__id.value, __id.set, None, None)


    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_25_response', responseType, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 174, 12)
    __response._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 174, 12)

    response = property(__response.value, __response.set, None, None)


    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_25_message', messageType, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 175, 12)
    __message._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 175, 12)

    message = property(__message.value, __message.set, None, None)


    # Attribute litleSessionId uses Python identifier litleSessionId
    __litleSessionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'litleSessionId'), 'litleSessionId', '__httpwww_litle_comschema_CTD_ANON_25_litleSessionId', litleIdType, required=True)
    __litleSessionId._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 176, 12)
    __litleSessionId._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 176, 12)

    litleSessionId = property(__litleSessionId.value, __litleSessionId.set, None, None)

    _ElementMap.update({
        __RFRResponse.name() : __RFRResponse,
        __batchResponse.name() : __batchResponse
    })
    _AttributeMap.update({
        __version.name() : __version,
        __id.name() : __id,
        __response.name() : __response,
        __message.name() : __message,
        __litleSessionId.name() : __litleSessionId
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_26 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 180, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_26_response', responseType, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 181, 12)
    __response._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 181, 12)

    response = property(__response.value, __response.set, None, None)


    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_26_message', messageType, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 182, 12)
    __message._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 182, 12)

    message = property(__message.value, __message.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __response.name() : __response,
        __message.name() : __message
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 186, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}recurringTransactionResponse uses Python identifier recurringTransactionResponse
    __recurringTransactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponse'), 'recurringTransactionResponse', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemarecurringTransactionResponse', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 7, 4), )


    recurringTransactionResponse = property(__recurringTransactionResponse.value, __recurringTransactionResponse.set, None, None)


    # Element {http://www.litle.com/schema}transactionResponse uses Python identifier transactionResponse
    __transactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'transactionResponse'), 'transactionResponse', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschematransactionResponse', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 771, 4), )


    transactionResponse = property(__transactionResponse.value, __transactionResponse.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_27_id', string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 191, 12)
    __id._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 191, 12)

    id = property(__id.value, __id.set, None, None)


    # Attribute litleBatchId uses Python identifier litleBatchId
    __litleBatchId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'litleBatchId'), 'litleBatchId', '__httpwww_litle_comschema_CTD_ANON_27_litleBatchId', litleIdType, required=True)
    __litleBatchId._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 192, 12)
    __litleBatchId._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 192, 12)

    litleBatchId = property(__litleBatchId.value, __litleBatchId.set, None, None)


    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON_27_merchantId', merchantIdentificationType, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 193, 12)
    __merchantId._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 193, 12)

    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    _ElementMap.update({
        __recurringTransactionResponse.name() : __recurringTransactionResponse,
        __transactionResponse.name() : __transactionResponse
    })
    _AttributeMap.update({
        __id.name() : __id,
        __litleBatchId.name() : __litleBatchId,
        __merchantId.name() : __merchantId
    })



# Complex type {http://www.litle.com/schema}cardTokenTypeAU with content type ELEMENT_ONLY
class cardTokenTypeAU (cardTokenType):
    """Complex type {http://www.litle.com/schema}cardTokenTypeAU with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cardTokenTypeAU')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 217, 4)
    _ElementMap = cardTokenType._ElementMap.copy()
    _AttributeMap = cardTokenType._AttributeMap.copy()
    # Base type is cardTokenType

    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bin'), 'bin', '__httpwww_litle_comschema_cardTokenTypeAU_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 221, 20), )


    bin = property(__bin.value, __bin.set, None, None)


    # Element litleToken ({http://www.litle.com/schema}litleToken) inherited from {http://www.litle.com/schema}cardTokenType

    # Element expDate ({http://www.litle.com/schema}expDate) inherited from {http://www.litle.com/schema}cardTokenType

    # Element cardValidationNum ({http://www.litle.com/schema}cardValidationNum) inherited from {http://www.litle.com/schema}cardTokenType

    # Element type ({http://www.litle.com/schema}type) inherited from {http://www.litle.com/schema}cardTokenType
    _ElementMap.update({
        __bin.name() : __bin
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'cardTokenTypeAU', cardTokenTypeAU)


# Complex type {http://www.litle.com/schema}baseRequest with content type ELEMENT_ONLY
class baseRequest (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}baseRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'baseRequest')
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 9, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}authentication uses Python identifier authentication
    __authentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authentication'), 'authentication', '__httpwww_litle_comschema_baseRequest_httpwww_litle_comschemaauthentication', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 5, 4), )


    authentication = property(__authentication.value, __authentication.set, None, None)


    # Element {http://www.litle.com/schema}recurringTransaction uses Python identifier recurringTransaction
    __recurringTransaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction'), 'recurringTransaction', '__httpwww_litle_comschema_baseRequest_httpwww_litle_comschemarecurringTransaction', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 6, 4), )


    recurringTransaction = property(__recurringTransaction.value, __recurringTransaction.set, None, None)


    # Element {http://www.litle.com/schema}transaction uses Python identifier transaction
    __transaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'transaction'), 'transaction', '__httpwww_litle_comschema_baseRequest_httpwww_litle_comschematransaction', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 8, 4), )


    transaction = property(__transaction.value, __transaction.set, None, None)


    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_litle_comschema_baseRequest_version', versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 17, 8)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 17, 8)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __authentication.name() : __authentication,
        __recurringTransaction.name() : __recurringTransaction,
        __transaction.name() : __transaction
    })
    _AttributeMap.update({
        __version.name() : __version
    })
Namespace.addCategoryObject('typeBinding', u'baseRequest', baseRequest)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (myComplexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 33, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.litle.com/schema}recurringTransactionResponse uses Python identifier recurringTransactionResponse
    __recurringTransactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponse'), 'recurringTransactionResponse', '__httpwww_litle_comschema_CTD_ANON_28_httpwww_litle_comschemarecurringTransactionResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 7, 4), )


    recurringTransactionResponse = property(__recurringTransactionResponse.value, __recurringTransactionResponse.set, None, None)


    # Element {http://www.litle.com/schema}transactionResponse uses Python identifier transactionResponse
    __transactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'transactionResponse'), 'transactionResponse', '__httpwww_litle_comschema_CTD_ANON_28_httpwww_litle_comschematransactionResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 771, 4), )


    transactionResponse = property(__transactionResponse.value, __transactionResponse.set, None, None)


    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_28_response', responseType, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 38, 12)
    __response._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 38, 12)

    response = property(__response.value, __response.set, None, None)


    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_28_message', messageType, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 39, 12)
    __message._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 39, 12)

    message = property(__message.value, __message.set, None, None)


    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_litle_comschema_CTD_ANON_28_version', versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 40, 12)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 40, 12)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __recurringTransactionResponse.name() : __recurringTransactionResponse,
        __transactionResponse.name() : __transactionResponse
    })
    _AttributeMap.update({
        __response.name() : __response,
        __message.name() : __message,
        __version.name() : __version
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 22, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType

    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_29_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 26, 25), )


    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 34, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 38, 25), )


    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)


    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 39, 25), )


    planCode = property(__planCode.value, __planCode.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 42, 29), )


    card = property(__card.value, __card.set, None, None)


    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 43, 29), )


    token = property(__token.value, __token.set, None, None)


    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 44, 29), )


    paypage = property(__paypage.value, __paypage.set, None, None)


    # Element {http://www.litle.com/schema}billingDate uses Python identifier billingDate
    __billingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billingDate'), 'billingDate', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemabillingDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 46, 25), )


    billingDate = property(__billingDate.value, __billingDate.set, None, None)


    # Element {http://www.litle.com/schema}createDiscount uses Python identifier createDiscount
    __createDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'createDiscount'), 'createDiscount', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemacreateDiscount', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 47, 25), )


    createDiscount = property(__createDiscount.value, __createDiscount.set, None, None)


    # Element {http://www.litle.com/schema}updateDiscount uses Python identifier updateDiscount
    __updateDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'updateDiscount'), 'updateDiscount', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemaupdateDiscount', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 48, 25), )


    updateDiscount = property(__updateDiscount.value, __updateDiscount.set, None, None)


    # Element {http://www.litle.com/schema}deleteDiscount uses Python identifier deleteDiscount
    __deleteDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deleteDiscount'), 'deleteDiscount', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemadeleteDiscount', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 49, 25), )


    deleteDiscount = property(__deleteDiscount.value, __deleteDiscount.set, None, None)


    # Element {http://www.litle.com/schema}createAddOn uses Python identifier createAddOn
    __createAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'createAddOn'), 'createAddOn', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemacreateAddOn', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 50, 25), )


    createAddOn = property(__createAddOn.value, __createAddOn.set, None, None)


    # Element {http://www.litle.com/schema}updateAddOn uses Python identifier updateAddOn
    __updateAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'updateAddOn'), 'updateAddOn', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemaupdateAddOn', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 51, 25), )


    updateAddOn = property(__updateAddOn.value, __updateAddOn.set, None, None)


    # Element {http://www.litle.com/schema}deleteAddOn uses Python identifier deleteAddOn
    __deleteAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deleteAddOn'), 'deleteAddOn', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemadeleteAddOn', True, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 52, 25), )


    deleteAddOn = property(__deleteAddOn.value, __deleteAddOn.set, None, None)

    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __subscriptionId.name() : __subscriptionId,
        __planCode.name() : __planCode,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __billingDate.name() : __billingDate,
        __createDiscount.name() : __createDiscount,
        __updateDiscount.name() : __updateDiscount,
        __deleteDiscount.name() : __deleteDiscount,
        __createAddOn.name() : __createAddOn,
        __updateAddOn.name() : __updateAddOn,
        __deleteAddOn.name() : __deleteAddOn
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 60, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType

    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 64, 25), )


    planCode = property(__planCode.value, __planCode.set, None, None)


    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 65, 25), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://www.litle.com/schema}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'description'), 'description', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemadescription', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 66, 25), )


    description = property(__description.value, __description.set, None, None)


    # Element {http://www.litle.com/schema}intervalType uses Python identifier intervalType
    __intervalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'intervalType'), 'intervalType', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemaintervalType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 67, 25), )


    intervalType = property(__intervalType.value, __intervalType.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 68, 25), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}numberOfPayments uses Python identifier numberOfPayments
    __numberOfPayments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'numberOfPayments'), 'numberOfPayments', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemanumberOfPayments', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 69, 25), )


    numberOfPayments = property(__numberOfPayments.value, __numberOfPayments.set, None, None)


    # Element {http://www.litle.com/schema}trialNumberOfIntervals uses Python identifier trialNumberOfIntervals
    __trialNumberOfIntervals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'trialNumberOfIntervals'), 'trialNumberOfIntervals', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschematrialNumberOfIntervals', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 70, 25), )


    trialNumberOfIntervals = property(__trialNumberOfIntervals.value, __trialNumberOfIntervals.set, None, None)


    # Element {http://www.litle.com/schema}trialIntervalType uses Python identifier trialIntervalType
    __trialIntervalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'trialIntervalType'), 'trialIntervalType', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschematrialIntervalType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 71, 25), )


    trialIntervalType = property(__trialIntervalType.value, __trialIntervalType.set, None, None)


    # Element {http://www.litle.com/schema}active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'active'), 'active', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemaactive', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 72, 25), )


    active = property(__active.value, __active.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __name.name() : __name,
        __description.name() : __description,
        __intervalType.name() : __intervalType,
        __amount.name() : __amount,
        __numberOfPayments.name() : __numberOfPayments,
        __trialNumberOfIntervals.name() : __trialNumberOfIntervals,
        __trialIntervalType.name() : __trialIntervalType,
        __active.name() : __active
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 80, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType

    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_32_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 84, 25), )


    planCode = property(__planCode.value, __planCode.set, None, None)


    # Element {http://www.litle.com/schema}active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'active'), 'active', '__httpwww_litle_comschema_CTD_ANON_32_httpwww_litle_comschemaactive', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 85, 25), )


    active = property(__active.value, __active.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __active.name() : __active
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 93, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType

    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_33_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 97, 25), )


    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 105, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType

    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_34_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 109, 25), )


    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_34_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 110, 25), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 118, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType

    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_35_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 122, 25), )


    planCode = property(__planCode.value, __planCode.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 130, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType

    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType

    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_36_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 134, 25), )


    planCode = property(__planCode.value, __planCode.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}transactionType with content type EMPTY
class transactionType (myComplexTypeDefinition):
    """Complex type {http://www.litle.com/schema}transactionType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'transactionType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 10, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_litle_comschema_transactionType_id', string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 11, 8)
    __id._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 11, 8)

    id = property(__id.value, __id.set, None, None)


    # Attribute customerId uses Python identifier customerId
    __customerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customerId'), 'customerId', '__httpwww_litle_comschema_transactionType_customerId', customerIdType)
    __customerId._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 12, 8)
    __customerId._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 12, 8)

    customerId = property(__customerId.value, __customerId.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __id.name() : __id,
        __customerId.name() : __customerId
    })
Namespace.addCategoryObject('typeBinding', u'transactionType', transactionType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (baseRequest):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 21, 8)
    _ElementMap = baseRequest._ElementMap.copy()
    _AttributeMap = baseRequest._AttributeMap.copy()
    # Base type is baseRequest

    # Element authentication ({http://www.litle.com/schema}authentication) inherited from {http://www.litle.com/schema}baseRequest

    # Element recurringTransaction ({http://www.litle.com/schema}recurringTransaction) inherited from {http://www.litle.com/schema}baseRequest

    # Element transaction ({http://www.litle.com/schema}transaction) inherited from {http://www.litle.com/schema}baseRequest

    # Attribute version inherited from {http://www.litle.com/schema}baseRequest

    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON_37_merchantId', merchantIdentificationType, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 24, 20)
    __merchantId._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 24, 20)

    merchantId = property(__merchantId.value, __merchantId.set, None, None)


    # Attribute merchantSdk uses Python identifier merchantSdk
    __merchantSdk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'merchantSdk'), 'merchantSdk', '__httpwww_litle_comschema_CTD_ANON_37_merchantSdk', pyxb.binding.datatypes.string)
    __merchantSdk._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 25, 20)
    __merchantSdk._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 25, 20)

    merchantSdk = property(__merchantSdk.value, __merchantSdk.set, None, None)


    # Attribute loggedInUser uses Python identifier loggedInUser
    __loggedInUser = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loggedInUser'), 'loggedInUser', '__httpwww_litle_comschema_CTD_ANON_37_loggedInUser', pyxb.binding.datatypes.string)
    __loggedInUser._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 26, 20)
    __loggedInUser._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 26, 20)

    loggedInUser = property(__loggedInUser.value, __loggedInUser.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __merchantId.name() : __merchantId,
        __merchantSdk.name() : __merchantSdk,
        __loggedInUser.name() : __loggedInUser
    })



# Complex type {http://www.litle.com/schema}transactionTypeWithReportGroup with content type EMPTY
class transactionTypeWithReportGroup (transactionType):
    """Complex type {http://www.litle.com/schema}transactionTypeWithReportGroup with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'transactionTypeWithReportGroup')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 15, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType

    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reportGroup'), 'reportGroup', '__httpwww_litle_comschema_transactionTypeWithReportGroup_reportGroup', reportGroupType, required=True)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 18, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 18, 16)

    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup
    })
Namespace.addCategoryObject('typeBinding', u'transactionTypeWithReportGroup', transactionTypeWithReportGroup)


# Complex type {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial with content type EMPTY
class transactionTypeWithReportGroupAndPartial (transactionType):
    """Complex type {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'transactionTypeWithReportGroupAndPartial')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 31, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType

    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reportGroup'), 'reportGroup', '__httpwww_litle_comschema_transactionTypeWithReportGroupAndPartial_reportGroup', reportGroupType, required=True)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 34, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 34, 16)

    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)


    # Attribute partial uses Python identifier partial
    __partial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'partial'), 'partial', '__httpwww_litle_comschema_transactionTypeWithReportGroupAndPartial_partial', pyxb.binding.datatypes.boolean)
    __partial._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 35, 16)
    __partial._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 35, 16)

    partial = property(__partial.value, __partial.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup,
        __partial.name() : __partial
    })
Namespace.addCategoryObject('typeBinding', u'transactionTypeWithReportGroupAndPartial', transactionTypeWithReportGroupAndPartial)


# Complex type {http://www.litle.com/schema}transactionTypeOptionReportGroup with content type EMPTY
class transactionTypeOptionReportGroup (transactionType):
    """Complex type {http://www.litle.com/schema}transactionTypeOptionReportGroup with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'transactionTypeOptionReportGroup')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 40, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType

    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reportGroup'), 'reportGroup', '__httpwww_litle_comschema_transactionTypeOptionReportGroup_reportGroup', reportGroupType)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 43, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 43, 16)

    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup
    })
Namespace.addCategoryObject('typeBinding', u'transactionTypeOptionReportGroup', transactionTypeOptionReportGroup)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 152, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}cardOrToken uses Python identifier cardOrToken
    __cardOrToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardOrToken'), 'cardOrToken', '__httpwww_litle_comschema_CTD_ANON_38_httpwww_litle_comschemacardOrToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 146, 4), )


    cardOrToken = property(__cardOrToken.value, __cardOrToken.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_38_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 156, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cardOrToken.name() : __cardOrToken,
        __orderId.name() : __orderId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 198, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 202, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 203, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 204, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 205, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 206, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}updatedCard uses Python identifier updatedCard
    __updatedCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'updatedCard'), 'updatedCard', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemaupdatedCard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 207, 24), )


    updatedCard = property(__updatedCard.value, __updatedCard.set, None, None)


    # Element {http://www.litle.com/schema}originalCard uses Python identifier originalCard
    __originalCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'originalCard'), 'originalCard', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemaoriginalCard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 208, 24), )


    originalCard = property(__originalCard.value, __originalCard.set, None, None)


    # Element {http://www.litle.com/schema}updatedToken uses Python identifier updatedToken
    __updatedToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'updatedToken'), 'updatedToken', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemaupdatedToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 209, 24), )


    updatedToken = property(__updatedToken.value, __updatedToken.set, None, None)


    # Element {http://www.litle.com/schema}originalToken uses Python identifier originalToken
    __originalToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'originalToken'), 'originalToken', '__httpwww_litle_comschema_CTD_ANON_39_httpwww_litle_comschemaoriginalToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 210, 24), )


    originalToken = property(__originalToken.value, __originalToken.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __updatedCard.name() : __updatedCard,
        __originalCard.name() : __originalCard,
        __updatedToken.name() : __updatedToken,
        __originalToken.name() : __originalToken
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 248, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), 'fundsTransferId', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemafundsTransferId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 253, 28), )


    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 254, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 263, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 267, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 268, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 269, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 270, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 278, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), 'fundsTransferId', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemafundsTransferId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 283, 28), )


    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 284, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 293, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 297, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 298, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 299, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 300, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 308, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 313, 28), )


    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)


    # Element {http://www.litle.com/schema}submerchantName uses Python identifier submerchantName
    __submerchantName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'submerchantName'), 'submerchantName', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemasubmerchantName', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 314, 28), )


    submerchantName = property(__submerchantName.value, __submerchantName.set, None, None)


    # Element {http://www.litle.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), 'fundsTransferId', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemafundsTransferId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 315, 28), )


    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 316, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountInfo'), 'accountInfo', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaaccountInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 317, 28), )


    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __submerchantName.name() : __submerchantName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 326, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 331, 28), )


    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)


    # Element {http://www.litle.com/schema}submerchantName uses Python identifier submerchantName
    __submerchantName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'submerchantName'), 'submerchantName', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemasubmerchantName', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 332, 28), )


    submerchantName = property(__submerchantName.value, __submerchantName.set, None, None)


    # Element {http://www.litle.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), 'fundsTransferId', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemafundsTransferId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 333, 28), )


    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 334, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}accountInfo uses Python identifier accountInfo
    __accountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountInfo'), 'accountInfo', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaaccountInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 335, 28), )


    accountInfo = property(__accountInfo.value, __accountInfo.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __submerchantName.name() : __submerchantName,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount,
        __accountInfo.name() : __accountInfo
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 344, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 348, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 349, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 350, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 351, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 359, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 363, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 364, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 365, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 366, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 374, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_litle_comschema_CTD_ANON_48_httpwww_litle_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 379, 28), )


    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)


    # Element {http://www.litle.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), 'fundsTransferId', '__httpwww_litle_comschema_CTD_ANON_48_httpwww_litle_comschemafundsTransferId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 380, 28), )


    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_48_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 381, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 390, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 394, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 395, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 396, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 397, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 405, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fundingSubmerchantId uses Python identifier fundingSubmerchantId
    __fundingSubmerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), 'fundingSubmerchantId', '__httpwww_litle_comschema_CTD_ANON_50_httpwww_litle_comschemafundingSubmerchantId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 410, 28), )


    fundingSubmerchantId = property(__fundingSubmerchantId.value, __fundingSubmerchantId.set, None, None)


    # Element {http://www.litle.com/schema}fundsTransferId uses Python identifier fundsTransferId
    __fundsTransferId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), 'fundsTransferId', '__httpwww_litle_comschema_CTD_ANON_50_httpwww_litle_comschemafundsTransferId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 411, 28), )


    fundsTransferId = property(__fundsTransferId.value, __fundsTransferId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_50_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 412, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fundingSubmerchantId.name() : __fundingSubmerchantId,
        __fundsTransferId.name() : __fundsTransferId,
        __amount.name() : __amount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 421, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_51_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 425, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_51_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 426, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_51_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 427, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_51_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 428, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 45, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 49, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4), )


    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __processingInstructions.name() : __processingInstructions
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 58, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 62, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 63, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 64, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 65, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 66, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}recycling uses Python identifier recycling
    __recycling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycling'), 'recycling', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemarecycling', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 67, 24), )


    recycling = property(__recycling.value, __recycling.set, None, None)


    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_53_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 69, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 69, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __recycling.name() : __recycling
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 83, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 87, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 95, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 99, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 100, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 101, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 102, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 103, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_55_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 105, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 105, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 112, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 116, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 124, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 128, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 136, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 140, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 148, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 152, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 160, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 164, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 172, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 176, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 197, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}customerInfo uses Python identifier customerInfo
    __customerInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerInfo'), 'customerInfo', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemacustomerInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 56, 4), )


    customerInfo = property(__customerInfo.value, __customerInfo.set, None, None)


    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4), )


    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 202, 28), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 205, 28), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 206, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 207, 28), )


    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 208, 28), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 213, 32), )


    card = property(__card.value, __card.set, None, None)


    # Element {http://www.litle.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypal'), 'paypal', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemapaypal', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 214, 32), )


    paypal = property(__paypal.value, __paypal.set, None, None)


    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 215, 32), )


    token = property(__token.value, __token.set, None, None)


    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 216, 32), )


    paypage = property(__paypage.value, __paypage.set, None, None)


    # Element {http://www.litle.com/schema}cardholderAuthentication uses Python identifier cardholderAuthentication
    __cardholderAuthentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardholderAuthentication'), 'cardholderAuthentication', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemacardholderAuthentication', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 219, 28), )


    cardholderAuthentication = property(__cardholderAuthentication.value, __cardholderAuthentication.set, None, None)


    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 223, 28), )


    taxType = property(__taxType.value, __taxType.set, None, None)


    # Element {http://www.litle.com/schema}allowPartialAuth uses Python identifier allowPartialAuth
    __allowPartialAuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'allowPartialAuth'), 'allowPartialAuth', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaallowPartialAuth', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 226, 28), )


    allowPartialAuth = property(__allowPartialAuth.value, __allowPartialAuth.set, None, None)


    # Element {http://www.litle.com/schema}filtering uses Python identifier filtering
    __filtering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'filtering'), 'filtering', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemafiltering', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 228, 28), )


    filtering = property(__filtering.value, __filtering.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 229, 28), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Element {http://www.litle.com/schema}recyclingRequest uses Python identifier recyclingRequest
    __recyclingRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recyclingRequest'), 'recyclingRequest', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemarecyclingRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 230, 28), )


    recyclingRequest = property(__recyclingRequest.value, __recyclingRequest.set, None, None)


    # Element {http://www.litle.com/schema}fraudFilterOverride uses Python identifier fraudFilterOverride
    __fraudFilterOverride = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudFilterOverride'), 'fraudFilterOverride', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemafraudFilterOverride', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 231, 28), )


    fraudFilterOverride = property(__fraudFilterOverride.value, __fraudFilterOverride.set, None, None)


    # Element {http://www.litle.com/schema}recurringRequest uses Python identifier recurringRequest
    __recurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringRequest'), 'recurringRequest', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemarecurringRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 232, 28), )


    recurringRequest = property(__recurringRequest.value, __recurringRequest.set, None, None)


    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 233, 28), )


    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)


    # Element {http://www.litle.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 234, 28), )


    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)


    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4), )


    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)


    # Element {http://www.litle.com/schema}healthcareIIAS uses Python identifier healthcareIIAS
    __healthcareIIAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'healthcareIIAS'), 'healthcareIIAS', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemahealthcareIIAS', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 548, 4), )


    healthcareIIAS = property(__healthcareIIAS.value, __healthcareIIAS.set, None, None)


    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4), )


    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)


    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4), )


    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4), )


    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)


    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4), )


    pos = property(__pos.value, __pos.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customerInfo.name() : __customerInfo,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __paypal.name() : __paypal,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __cardholderAuthentication.name() : __cardholderAuthentication,
        __taxType.name() : __taxType,
        __allowPartialAuth.name() : __allowPartialAuth,
        __filtering.name() : __filtering,
        __merchantData.name() : __merchantData,
        __recyclingRequest.name() : __recyclingRequest,
        __fraudFilterOverride.name() : __fraudFilterOverride,
        __recurringRequest.name() : __recurringRequest,
        __debtRepayment.name() : __debtRepayment,
        __advancedFraudChecks.name() : __advancedFraudChecks,
        __shipToAddress.name() : __shipToAddress,
        __healthcareIIAS.name() : __healthcareIIAS,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 244, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 248, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 249, 24), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 250, 24), )


    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)


    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 251, 24), )


    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)


    # Element {http://www.litle.com/schema}actionReason uses Python identifier actionReason
    __actionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'actionReason'), 'actionReason', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemaactionReason', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 252, 24), )


    actionReason = property(__actionReason.value, __actionReason.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __payPalNotes.name() : __payPalNotes,
        __actionReason.name() : __actionReason
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (transactionTypeWithReportGroupAndPartial):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 260, 8)
    _ElementMap = transactionTypeWithReportGroupAndPartial._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroupAndPartial._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroupAndPartial

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 264, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 265, 24), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 266, 24), )


    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)


    # Element {http://www.litle.com/schema}payPalOrderComplete uses Python identifier payPalOrderComplete
    __payPalOrderComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payPalOrderComplete'), 'payPalOrderComplete', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemapayPalOrderComplete', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 269, 24), )


    payPalOrderComplete = property(__payPalOrderComplete.value, __payPalOrderComplete.set, None, None)


    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 270, 24), )


    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)


    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4), )


    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4), )


    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial

    # Attribute partial inherited from {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __payPalOrderComplete.name() : __payPalOrderComplete,
        __payPalNotes.name() : __payPalNotes,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 279, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 283, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 284, 24), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 285, 24), )


    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 286, 24), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 289, 32), )


    card = property(__card.value, __card.set, None, None)


    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 290, 32), )


    token = property(__token.value, __token.set, None, None)


    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 291, 32), )


    paypage = property(__paypage.value, __paypage.set, None, None)


    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 294, 24), )


    taxType = property(__taxType.value, __taxType.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 299, 24), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 300, 24), )


    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)


    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4), )


    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)


    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4), )


    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4), )


    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)


    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4), )


    pos = property(__pos.value, __pos.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __debtRepayment.name() : __debtRepayment,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 308, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4), )


    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 312, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 314, 24), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 315, 24), )


    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 316, 24), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 320, 32), )


    card = property(__card.value, __card.set, None, None)


    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 321, 32), )


    token = property(__token.value, __token.set, None, None)


    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 322, 32), )


    paypage = property(__paypage.value, __paypage.set, None, None)


    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 325, 24), )


    taxType = property(__taxType.value, __taxType.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 331, 24), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 332, 24), )


    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)


    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4), )


    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)


    # Element {http://www.litle.com/schema}authInformation uses Python identifier authInformation
    __authInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authInformation'), 'authInformation', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaauthInformation', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 523, 4), )


    authInformation = property(__authInformation.value, __authInformation.set, None, None)


    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4), )


    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)


    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4), )


    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4), )


    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)


    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4), )


    pos = property(__pos.value, __pos.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __debtRepayment.name() : __debtRepayment,
        __shipToAddress.name() : __shipToAddress,
        __authInformation.name() : __authInformation,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 340, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}customerInfo uses Python identifier customerInfo
    __customerInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customerInfo'), 'customerInfo', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemacustomerInfo', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 56, 4), )


    customerInfo = property(__customerInfo.value, __customerInfo.set, None, None)


    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4), )


    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 345, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 346, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 347, 24), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 348, 24), )


    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 349, 24), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 354, 28), )


    card = property(__card.value, __card.set, None, None)


    # Element {http://www.litle.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypal'), 'paypal', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemapaypal', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 355, 28), )


    paypal = property(__paypal.value, __paypal.set, None, None)


    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 356, 28), )


    token = property(__token.value, __token.set, None, None)


    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 357, 28), )


    paypage = property(__paypage.value, __paypage.set, None, None)


    # Element {http://www.litle.com/schema}fraudCheck uses Python identifier fraudCheck
    __fraudCheck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudCheck'), 'fraudCheck', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemafraudCheck', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 363, 28), )


    fraudCheck = property(__fraudCheck.value, __fraudCheck.set, None, None)


    # Element {http://www.litle.com/schema}cardholderAuthentication uses Python identifier cardholderAuthentication
    __cardholderAuthentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardholderAuthentication'), 'cardholderAuthentication', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemacardholderAuthentication', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 364, 28), )


    cardholderAuthentication = property(__cardholderAuthentication.value, __cardholderAuthentication.set, None, None)


    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 367, 24), )


    taxType = property(__taxType.value, __taxType.set, None, None)


    # Element {http://www.litle.com/schema}payPalOrderComplete uses Python identifier payPalOrderComplete
    __payPalOrderComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payPalOrderComplete'), 'payPalOrderComplete', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemapayPalOrderComplete', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 371, 24), )


    payPalOrderComplete = property(__payPalOrderComplete.value, __payPalOrderComplete.set, None, None)


    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 372, 24), )


    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)


    # Element {http://www.litle.com/schema}allowPartialAuth uses Python identifier allowPartialAuth
    __allowPartialAuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'allowPartialAuth'), 'allowPartialAuth', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaallowPartialAuth', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 374, 24), )


    allowPartialAuth = property(__allowPartialAuth.value, __allowPartialAuth.set, None, None)


    # Element {http://www.litle.com/schema}filtering uses Python identifier filtering
    __filtering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'filtering'), 'filtering', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemafiltering', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 376, 24), )


    filtering = property(__filtering.value, __filtering.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 377, 24), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Element {http://www.litle.com/schema}recyclingRequest uses Python identifier recyclingRequest
    __recyclingRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recyclingRequest'), 'recyclingRequest', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemarecyclingRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 378, 24), )


    recyclingRequest = property(__recyclingRequest.value, __recyclingRequest.set, None, None)


    # Element {http://www.litle.com/schema}fraudFilterOverride uses Python identifier fraudFilterOverride
    __fraudFilterOverride = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudFilterOverride'), 'fraudFilterOverride', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemafraudFilterOverride', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 379, 24), )


    fraudFilterOverride = property(__fraudFilterOverride.value, __fraudFilterOverride.set, None, None)


    # Element {http://www.litle.com/schema}recurringRequest uses Python identifier recurringRequest
    __recurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringRequest'), 'recurringRequest', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemarecurringRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 380, 24), )


    recurringRequest = property(__recurringRequest.value, __recurringRequest.set, None, None)


    # Element {http://www.litle.com/schema}litleInternalRecurringRequest uses Python identifier litleInternalRecurringRequest
    __litleInternalRecurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleInternalRecurringRequest'), 'litleInternalRecurringRequest', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemalitleInternalRecurringRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 381, 24), )


    litleInternalRecurringRequest = property(__litleInternalRecurringRequest.value, __litleInternalRecurringRequest.set, None, None)


    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 382, 24), )


    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)


    # Element {http://www.litle.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 383, 24), )


    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)


    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4), )


    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)


    # Element {http://www.litle.com/schema}healthcareIIAS uses Python identifier healthcareIIAS
    __healthcareIIAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'healthcareIIAS'), 'healthcareIIAS', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemahealthcareIIAS', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 548, 4), )


    healthcareIIAS = property(__healthcareIIAS.value, __healthcareIIAS.set, None, None)


    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4), )


    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)


    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4), )


    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4), )


    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)


    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4), )


    pos = property(__pos.value, __pos.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customerInfo.name() : __customerInfo,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __paypal.name() : __paypal,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __fraudCheck.name() : __fraudCheck,
        __cardholderAuthentication.name() : __cardholderAuthentication,
        __taxType.name() : __taxType,
        __payPalOrderComplete.name() : __payPalOrderComplete,
        __payPalNotes.name() : __payPalNotes,
        __allowPartialAuth.name() : __allowPartialAuth,
        __filtering.name() : __filtering,
        __merchantData.name() : __merchantData,
        __recyclingRequest.name() : __recyclingRequest,
        __fraudFilterOverride.name() : __fraudFilterOverride,
        __recurringRequest.name() : __recurringRequest,
        __litleInternalRecurringRequest.name() : __litleInternalRecurringRequest,
        __debtRepayment.name() : __debtRepayment,
        __advancedFraudChecks.name() : __advancedFraudChecks,
        __shipToAddress.name() : __shipToAddress,
        __healthcareIIAS.name() : __healthcareIIAS,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 392, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4), )


    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 398, 32), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 399, 32), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 400, 32), )


    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 407, 32), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 410, 32), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 413, 36), )


    card = property(__card.value, __card.set, None, None)


    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 414, 36), )


    token = property(__token.value, __token.set, None, None)


    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 415, 36), )


    paypage = property(__paypage.value, __paypage.set, None, None)


    # Element {http://www.litle.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypal'), 'paypal', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemapaypal', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 416, 36), )


    paypal = property(__paypal.value, __paypal.set, None, None)


    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 442, 32), )


    taxType = property(__taxType.value, __taxType.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 448, 32), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 451, 24), )


    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)


    # Element {http://www.litle.com/schema}actionReason uses Python identifier actionReason
    __actionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'actionReason'), 'actionReason', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaactionReason', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 452, 24), )


    actionReason = property(__actionReason.value, __actionReason.set, None, None)


    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4), )


    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)


    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4), )


    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4), )


    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)


    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4), )


    pos = property(__pos.value, __pos.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __paypal.name() : __paypal,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __payPalNotes.name() : __payPalNotes,
        __actionReason.name() : __actionReason,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 460, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 464, 28), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 465, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 466, 28), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 468, 37), )


    card = property(__card.value, __card.set, None, None)


    # Element {http://www.litle.com/schema}virtualGiftCard uses Python identifier virtualGiftCard
    __virtualGiftCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCard'), 'virtualGiftCard', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemavirtualGiftCard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 469, 37), )


    virtualGiftCard = property(__virtualGiftCard.value, __virtualGiftCard.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __virtualGiftCard.name() : __virtualGiftCard
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 478, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 482, 28), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 483, 28), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 484, 28), )


    card = property(__card.value, __card.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 492, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 496, 28), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 497, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 498, 28), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 499, 28), )


    card = property(__card.value, __card.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 507, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 511, 28), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 512, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 513, 28), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 514, 28), )


    card = property(__card.value, __card.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 535, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 539, 28), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 540, 28), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 541, 28), )


    card = property(__card.value, __card.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}registerTokenRequestType with content type ELEMENT_ONLY
class registerTokenRequestType (transactionTypeWithReportGroup):
    """Complex type {http://www.litle.com/schema}registerTokenRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'registerTokenRequestType')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 734, 4)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 738, 20), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}accountNumber uses Python identifier accountNumber
    __accountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountNumber'), 'accountNumber', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemaaccountNumber', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 740, 24), )


    accountNumber = property(__accountNumber.value, __accountNumber.set, None, None)


    # Element {http://www.litle.com/schema}echeckForToken uses Python identifier echeckForToken
    __echeckForToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'echeckForToken'), 'echeckForToken', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemaecheckForToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 741, 24), )


    echeckForToken = property(__echeckForToken.value, __echeckForToken.set, None, None)


    # Element {http://www.litle.com/schema}paypageRegistrationId uses Python identifier paypageRegistrationId
    __paypageRegistrationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'paypageRegistrationId'), 'paypageRegistrationId', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemapaypageRegistrationId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 742, 24), )


    paypageRegistrationId = property(__paypageRegistrationId.value, __paypageRegistrationId.set, None, None)


    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 744, 20), )


    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __accountNumber.name() : __accountNumber,
        __echeckForToken.name() : __echeckForToken,
        __paypageRegistrationId.name() : __paypageRegistrationId,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'registerTokenRequestType', registerTokenRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 751, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 755, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 756, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), 'litleToken', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 757, 24), )


    litleToken = property(__litleToken.value, __litleToken.set, None, None)


    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'bin'), 'bin', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 758, 24), )


    bin = property(__bin.value, __bin.set, None, None)


    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'type'), 'type', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschematype', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 759, 24), )


    type = property(__type.value, __type.set, None, None)


    # Element {http://www.litle.com/schema}eCheckAccountSuffix uses Python identifier eCheckAccountSuffix
    __eCheckAccountSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'eCheckAccountSuffix'), 'eCheckAccountSuffix', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaeCheckAccountSuffix', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 760, 24), )


    eCheckAccountSuffix = property(__eCheckAccountSuffix.value, __eCheckAccountSuffix.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 761, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 762, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 763, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __litleToken.name() : __litleToken,
        __bin.name() : __bin,
        __type.name() : __type,
        __eCheckAccountSuffix.name() : __eCheckAccountSuffix,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 774, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billMeLaterResponseData uses Python identifier billMeLaterResponseData
    __billMeLaterResponseData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterResponseData'), 'billMeLaterResponseData', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemabillMeLaterResponseData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 163, 4), )


    billMeLaterResponseData = property(__billMeLaterResponseData.value, __billMeLaterResponseData.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 778, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 779, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 780, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 781, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}cardProductId uses Python identifier cardProductId
    __cardProductId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardProductId'), 'cardProductId', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemacardProductId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 782, 24), )


    cardProductId = property(__cardProductId.value, __cardProductId.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 784, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 785, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authCode'), 'authCode', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaauthCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 786, 24), )


    authCode = property(__authCode.value, __authCode.set, None, None)


    # Element {http://www.litle.com/schema}authorizationResponseSubCode uses Python identifier authorizationResponseSubCode
    __authorizationResponseSubCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorizationResponseSubCode'), 'authorizationResponseSubCode', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaauthorizationResponseSubCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 787, 24), )


    authorizationResponseSubCode = property(__authorizationResponseSubCode.value, __authorizationResponseSubCode.set, None, None)


    # Element {http://www.litle.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount'), 'approvedAmount', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaapprovedAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 788, 24), )


    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)


    # Element {http://www.litle.com/schema}accountInformation uses Python identifier accountInformation
    __accountInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountInformation'), 'accountInformation', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaaccountInformation', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 789, 24), )


    accountInformation = property(__accountInformation.value, __accountInformation.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 794, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Element {http://www.litle.com/schema}recycling uses Python identifier recycling
    __recycling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycling'), 'recycling', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemarecycling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 796, 24), )


    recycling = property(__recycling.value, __recycling.set, None, None)


    # Element {http://www.litle.com/schema}recurringResponse uses Python identifier recurringResponse
    __recurringResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringResponse'), 'recurringResponse', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemarecurringResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 797, 24), )


    recurringResponse = property(__recurringResponse.value, __recurringResponse.set, None, None)


    # Element {http://www.litle.com/schema}enhancedAuthResponse uses Python identifier enhancedAuthResponse
    __enhancedAuthResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedAuthResponse'), 'enhancedAuthResponse', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaenhancedAuthResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 868, 4), )


    enhancedAuthResponse = property(__enhancedAuthResponse.value, __enhancedAuthResponse.set, None, None)


    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4), )


    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billMeLaterResponseData.name() : __billMeLaterResponseData,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __cardProductId.name() : __cardProductId,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __authCode.name() : __authCode,
        __authorizationResponseSubCode.name() : __authorizationResponseSubCode,
        __approvedAmount.name() : __approvedAmount,
        __accountInformation.name() : __accountInformation,
        __tokenResponse.name() : __tokenResponse,
        __recycling.name() : __recycling,
        __recurringResponse.name() : __recurringResponse,
        __enhancedAuthResponse.name() : __enhancedAuthResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 890, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 894, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 895, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 896, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 897, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 899, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 900, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 910, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 914, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 915, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 916, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 917, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 919, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 920, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 930, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 934, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 935, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 936, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 937, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 939, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 940, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 950, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 954, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 955, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 956, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 957, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 959, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 960, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 970, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 974, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 975, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 976, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 977, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 979, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 980, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 990, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 994, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 995, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 996, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 997, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 999, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1000, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1010, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1014, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1015, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1016, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1017, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1019, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1020, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1030, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1034, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1036, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1037, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1038, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1040, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1041, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4), )


    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_83_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1048, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1048, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1055, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1059, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1060, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1061, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1062, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1064, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1065, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1067, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4), )


    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1081, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1085, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1086, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1087, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1088, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1090, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1091, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1093, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1106, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billMeLaterResponseData uses Python identifier billMeLaterResponseData
    __billMeLaterResponseData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterResponseData'), 'billMeLaterResponseData', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemabillMeLaterResponseData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 163, 4), )


    billMeLaterResponseData = property(__billMeLaterResponseData.value, __billMeLaterResponseData.set, None, None)


    # Element {http://www.litle.com/schema}enhancedAuthResponse uses Python identifier enhancedAuthResponse
    __enhancedAuthResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'enhancedAuthResponse'), 'enhancedAuthResponse', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaenhancedAuthResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 868, 4), )


    enhancedAuthResponse = property(__enhancedAuthResponse.value, __enhancedAuthResponse.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1110, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1111, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1112, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1113, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}cardProductId uses Python identifier cardProductId
    __cardProductId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardProductId'), 'cardProductId', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemacardProductId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1114, 24), )


    cardProductId = property(__cardProductId.value, __cardProductId.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1115, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1116, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authCode'), 'authCode', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaauthCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1117, 24), )


    authCode = property(__authCode.value, __authCode.set, None, None)


    # Element {http://www.litle.com/schema}authorizationResponseSubCode uses Python identifier authorizationResponseSubCode
    __authorizationResponseSubCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'authorizationResponseSubCode'), 'authorizationResponseSubCode', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaauthorizationResponseSubCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1118, 24), )


    authorizationResponseSubCode = property(__authorizationResponseSubCode.value, __authorizationResponseSubCode.set, None, None)


    # Element {http://www.litle.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount'), 'approvedAmount', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaapprovedAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1119, 24), )


    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)


    # Element {http://www.litle.com/schema}accountInformation uses Python identifier accountInformation
    __accountInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountInformation'), 'accountInformation', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaaccountInformation', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1120, 24), )


    accountInformation = property(__accountInformation.value, __accountInformation.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1124, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Element {http://www.litle.com/schema}recycling uses Python identifier recycling
    __recycling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recycling'), 'recycling', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemarecycling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1127, 24), )


    recycling = property(__recycling.value, __recycling.set, None, None)


    # Element {http://www.litle.com/schema}recurringResponse uses Python identifier recurringResponse
    __recurringResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'recurringResponse'), 'recurringResponse', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemarecurringResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1128, 24), )


    recurringResponse = property(__recurringResponse.value, __recurringResponse.set, None, None)


    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4), )


    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_86_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1133, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1133, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __billMeLaterResponseData.name() : __billMeLaterResponseData,
        __enhancedAuthResponse.name() : __enhancedAuthResponse,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __cardProductId.name() : __cardProductId,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __authCode.name() : __authCode,
        __authorizationResponseSubCode.name() : __authorizationResponseSubCode,
        __approvedAmount.name() : __approvedAmount,
        __accountInformation.name() : __accountInformation,
        __tokenResponse.name() : __tokenResponse,
        __recycling.name() : __recycling,
        __recurringResponse.name() : __recurringResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1140, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1144, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1145, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1146, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1147, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1149, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1150, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1152, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_87_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1158, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1158, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1178, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1182, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1183, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1184, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1185, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1187, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1188, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}virtualGiftCardResponse uses Python identifier virtualGiftCardResponse
    __virtualGiftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCardResponse'), 'virtualGiftCardResponse', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemavirtualGiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1255, 4), )


    virtualGiftCardResponse = property(__virtualGiftCardResponse.value, __virtualGiftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_88_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1194, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1194, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse,
        __virtualGiftCardResponse.name() : __virtualGiftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1201, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1205, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1206, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1207, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1208, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1210, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1211, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_89_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1216, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1216, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1223, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1227, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1228, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1229, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1230, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1232, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1233, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_90_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1238, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1238, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1266, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1270, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1271, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1272, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1273, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1275, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1276, 24), )


    message = property(__message.value, __message.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1286, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4), )


    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)


    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4), )


    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1290, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1291, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1292, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1293, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1295, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1296, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount'), 'approvedAmount', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemaapprovedAmount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1298, 24), )


    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __approvedAmount.name() : __approvedAmount
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1313, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4), )


    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4), )


    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1318, 28), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1319, 28), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1323, 28), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}verify uses Python identifier verify
    __verify = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verify'), 'verify', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemaverify', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1324, 28), )


    verify = property(__verify.value, __verify.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1326, 28), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1331, 28), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __shipToAddress.name() : __shipToAddress,
        __customBilling.name() : __customBilling,
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __orderId.name() : __orderId,
        __verify.name() : __verify,
        __orderSource.name() : __orderSource,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1340, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4), )


    customBilling = property(__customBilling.value, __customBilling.set, None, None)


    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4), )


    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1346, 29), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1347, 29), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1351, 29), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1353, 29), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_94_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1357, 29), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customBilling.name() : __customBilling,
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1367, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_95_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4), )


    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)


    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_95_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4), )


    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_95_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1371, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_95_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1372, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_95_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1373, 24), )


    amount = property(__amount.value, __amount.set, None, None)


    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_95_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1374, 24), )


    orderSource = property(__orderSource.value, __orderSource.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_95_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1377, 24), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1385, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1389, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1390, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1391, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1392, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1393, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}verificationCode uses Python identifier verificationCode
    __verificationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'verificationCode'), 'verificationCode', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemaverificationCode', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1394, 24), )


    verificationCode = property(__verificationCode.value, __verificationCode.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1396, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1398, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_96_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4), )


    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_96_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1400, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1400, 20)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __verificationCode.name() : __verificationCode,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1407, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1411, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1412, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1413, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1414, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1415, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1417, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1419, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_97_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4), )


    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup

    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_97_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1421, 21)
    __duplicate._UseLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1421, 21)

    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1501, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_98_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1505, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_98_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1506, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_98_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1507, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_98_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1508, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_98_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1509, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_98_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1511, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_98_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1512, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1520, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_99_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4), )


    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_99_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1524, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_99_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1526, 24), )


    merchantData = property(__merchantData.value, __merchantData.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({

    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1534, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_100_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4), )


    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)


    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_100_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1538, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_100_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1539, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_100_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1540, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_100_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1541, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_100_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1543, 24), )


    postDate = property(__postDate.value, __postDate.set, None, None)


    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_100_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1545, 24), )


    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __accountUpdater.name() : __accountUpdater,
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({

    })



# Complex type {http://www.litle.com/schema}updateCardValidationNumOnToken with content type ELEMENT_ONLY
class updateCardValidationNumOnToken_ (transactionTypeWithReportGroup):
    """Complex type {http://www.litle.com/schema}updateCardValidationNumOnToken with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'updateCardValidationNumOnToken')
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1790, 4)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_updateCardValidationNumOnToken__httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1794, 20), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), 'litleToken', '__httpwww_litle_comschema_updateCardValidationNumOnToken__httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1795, 20), )


    litleToken = property(__litleToken.value, __litleToken.set, None, None)


    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_updateCardValidationNumOnToken__httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1796, 20), )


    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __litleToken.name() : __litleToken,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({

    })
Namespace.addCategoryObject('typeBinding', u'updateCardValidationNumOnToken', updateCardValidationNumOnToken_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = myComplexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1803, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup

    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_101_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1807, 24), )


    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)


    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_101_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1808, 24), )


    orderId = property(__orderId.value, __orderId.set, None, None)


    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_101_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1809, 24), )


    response = property(__response.value, __response.set, None, None)


    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_101_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1810, 24), )


    message = property(__message.value, __message.set, None, None)


    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_101_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1811, 24), )


    responseTime = property(__responseTime.value, __responseTime.set, None, None)


    # Attribute id inherited from {http://www.litle.com/schema}transactionType

    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType

    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime
    })
    _AttributeMap.update({

    })



cardOrToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardOrToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 146, 4))
Namespace.addCategoryObject('elementBinding', cardOrToken.name().localName(), cardOrToken)

echeckOrEcheckToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4))
Namespace.addCategoryObject('elementBinding', echeckOrEcheckToken.name().localName(), echeckOrEcheckToken)

RFRRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RFRRequest'), CTD_ANON, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 21, 4))
Namespace.addCategoryObject('elementBinding', RFRRequest.name().localName(), RFRRequest)

card = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 147, 4))
Namespace.addCategoryObject('elementBinding', card.name().localName(), card)

token = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), cardTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 148, 4))
Namespace.addCategoryObject('elementBinding', token.name().localName(), token)

accountUpdateFileRequestData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdateFileRequestData'), CTD_ANON_, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 238, 4))
Namespace.addCategoryObject('elementBinding', accountUpdateFileRequestData.name().localName(), accountUpdateFileRequestData)

authentication = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authentication'), CTD_ANON_2, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 5, 4))
Namespace.addCategoryObject('elementBinding', authentication.name().localName(), authentication)

billToAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4))
Namespace.addCategoryObject('elementBinding', billToAddress.name().localName(), billToAddress)

recurringTransaction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 6, 4))
Namespace.addCategoryObject('elementBinding', recurringTransaction.name().localName(), recurringTransaction)

recurringTransactionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 7, 4))
Namespace.addCategoryObject('elementBinding', recurringTransactionResponse.name().localName(), recurringTransactionResponse)

customerInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerInfo'), CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 56, 4))
Namespace.addCategoryObject('elementBinding', customerInfo.name().localName(), customerInfo)

bmlProductType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bmlProductType'), STD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 109, 4), unicode_default=u'BL')
Namespace.addCategoryObject('elementBinding', bmlProductType.name().localName(), bmlProductType)

billMeLaterRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4))
Namespace.addCategoryObject('elementBinding', billMeLaterRequest.name().localName(), billMeLaterRequest)

billMeLaterResponseData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterResponseData'), CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 163, 4))
Namespace.addCategoryObject('elementBinding', billMeLaterResponseData.name().localName(), billMeLaterResponseData)

shipToAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4))
Namespace.addCategoryObject('elementBinding', shipToAddress.name().localName(), shipToAddress)

authInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authInformation'), CTD_ANON_7, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 523, 4))
Namespace.addCategoryObject('elementBinding', authInformation.name().localName(), authInformation)

healthcareIIAS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'healthcareIIAS'), CTD_ANON_8, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 548, 4))
Namespace.addCategoryObject('elementBinding', healthcareIIAS.name().localName(), healthcareIIAS)

healthcareAmounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'healthcareAmounts'), CTD_ANON_9, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 557, 4))
Namespace.addCategoryObject('elementBinding', healthcareAmounts.name().localName(), healthcareAmounts)

enhancedData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4))
Namespace.addCategoryObject('elementBinding', enhancedData.name().localName(), enhancedData)

amexAggregatorData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), CTD_ANON_11, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4))
Namespace.addCategoryObject('elementBinding', amexAggregatorData.name().localName(), amexAggregatorData)

detailTax = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'detailTax'), CTD_ANON_12, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 609, 4))
Namespace.addCategoryObject('elementBinding', detailTax.name().localName(), detailTax)

lineItemData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'lineItemData'), CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 621, 4))
Namespace.addCategoryObject('elementBinding', lineItemData.name().localName(), lineItemData)

customBilling = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4))
Namespace.addCategoryObject('elementBinding', customBilling.name().localName(), customBilling)

processingInstructions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4))
Namespace.addCategoryObject('elementBinding', processingInstructions.name().localName(), processingInstructions)

pos = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pos'), CTD_ANON_16, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4))
Namespace.addCategoryObject('elementBinding', pos.name().localName(), pos)

enhancedAuthResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedAuthResponse'), CTD_ANON_17, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 868, 4))
Namespace.addCategoryObject('elementBinding', enhancedAuthResponse.name().localName(), enhancedAuthResponse)

fraudResult = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4))
Namespace.addCategoryObject('elementBinding', fraudResult.name().localName(), fraudResult)

giftCardResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4))
Namespace.addCategoryObject('elementBinding', giftCardResponse.name().localName(), giftCardResponse)

virtualGiftCardResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCardResponse'), CTD_ANON_21, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1255, 4))
Namespace.addCategoryObject('elementBinding', virtualGiftCardResponse.name().localName(), virtualGiftCardResponse)

echeck = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeck'), echeckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1309, 4))
Namespace.addCategoryObject('elementBinding', echeck.name().localName(), echeck)

echeckToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckToken'), echeckTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1310, 4))
Namespace.addCategoryObject('elementBinding', echeckToken.name().localName(), echeckToken)

accountUpdater = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4))
Namespace.addCategoryObject('elementBinding', accountUpdater.name().localName(), accountUpdater)

litleRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleRequest'), CTD_ANON_23, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 7, 4))
Namespace.addCategoryObject('elementBinding', litleRequest.name().localName(), litleRequest)

batchRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'batchRequest'), CTD_ANON_24, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 29, 4))
Namespace.addCategoryObject('elementBinding', batchRequest.name().localName(), batchRequest)

litleResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleResponse'), CTD_ANON_25, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 164, 4))
Namespace.addCategoryObject('elementBinding', litleResponse.name().localName(), litleResponse)

RFRResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RFRResponse'), CTD_ANON_26, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 179, 4))
Namespace.addCategoryObject('elementBinding', RFRResponse.name().localName(), RFRResponse)

batchResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'batchResponse'), CTD_ANON_27, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 185, 4))
Namespace.addCategoryObject('elementBinding', batchResponse.name().localName(), batchResponse)

litleOnlineResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleOnlineResponse'), CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 32, 4))
Namespace.addCategoryObject('elementBinding', litleOnlineResponse.name().localName(), litleOnlineResponse)

cancelSubscription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cancelSubscription'), CTD_ANON_29, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 21, 4))
Namespace.addCategoryObject('elementBinding', cancelSubscription.name().localName(), cancelSubscription)

updateSubscription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updateSubscription'), CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 33, 4))
Namespace.addCategoryObject('elementBinding', updateSubscription.name().localName(), updateSubscription)

createPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'createPlan'), CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 59, 4))
Namespace.addCategoryObject('elementBinding', createPlan.name().localName(), createPlan)

updatePlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updatePlan'), CTD_ANON_32, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 79, 4))
Namespace.addCategoryObject('elementBinding', updatePlan.name().localName(), updatePlan)

cancelSubscriptionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cancelSubscriptionResponse'), CTD_ANON_33, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 92, 4))
Namespace.addCategoryObject('elementBinding', cancelSubscriptionResponse.name().localName(), cancelSubscriptionResponse)

updateSubscriptionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updateSubscriptionResponse'), CTD_ANON_34, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 104, 4))
Namespace.addCategoryObject('elementBinding', updateSubscriptionResponse.name().localName(), updateSubscriptionResponse)

createPlanResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'createPlanResponse'), CTD_ANON_35, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 117, 4))
Namespace.addCategoryObject('elementBinding', createPlanResponse.name().localName(), createPlanResponse)

updatePlanResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updatePlanResponse'), CTD_ANON_36, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 129, 4))
Namespace.addCategoryObject('elementBinding', updatePlanResponse.name().localName(), updatePlanResponse)

transaction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 8, 4))
Namespace.addCategoryObject('elementBinding', transaction.name().localName(), transaction)

litleOnlineRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleOnlineRequest'), CTD_ANON_37, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 20, 4))
Namespace.addCategoryObject('elementBinding', litleOnlineRequest.name().localName(), litleOnlineRequest)

transactionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 771, 4))
Namespace.addCategoryObject('elementBinding', transactionResponse.name().localName(), transactionResponse)

accountUpdate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdate'), CTD_ANON_38, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 151, 4))
Namespace.addCategoryObject('elementBinding', accountUpdate.name().localName(), accountUpdate)

accountUpdateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdateResponse'), CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 197, 4))
Namespace.addCategoryObject('elementBinding', accountUpdateResponse.name().localName(), accountUpdateResponse)

payFacCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payFacCredit'), CTD_ANON_40, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 247, 4))
Namespace.addCategoryObject('elementBinding', payFacCredit.name().localName(), payFacCredit)

payFacCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payFacCreditResponse'), CTD_ANON_41, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 262, 4))
Namespace.addCategoryObject('elementBinding', payFacCreditResponse.name().localName(), payFacCreditResponse)

payFacDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payFacDebit'), CTD_ANON_42, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 277, 4))
Namespace.addCategoryObject('elementBinding', payFacDebit.name().localName(), payFacDebit)

payFacDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payFacDebitResponse'), CTD_ANON_43, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 292, 4))
Namespace.addCategoryObject('elementBinding', payFacDebitResponse.name().localName(), payFacDebitResponse)

submerchantCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'submerchantCredit'), CTD_ANON_44, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 307, 4))
Namespace.addCategoryObject('elementBinding', submerchantCredit.name().localName(), submerchantCredit)

submerchantDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'submerchantDebit'), CTD_ANON_45, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 325, 4))
Namespace.addCategoryObject('elementBinding', submerchantDebit.name().localName(), submerchantDebit)

submerchantCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'submerchantCreditResponse'), CTD_ANON_46, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 343, 4))
Namespace.addCategoryObject('elementBinding', submerchantCreditResponse.name().localName(), submerchantCreditResponse)

submerchantDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'submerchantDebitResponse'), CTD_ANON_47, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 358, 4))
Namespace.addCategoryObject('elementBinding', submerchantDebitResponse.name().localName(), submerchantDebitResponse)

reserveCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reserveCredit'), CTD_ANON_48, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 373, 4))
Namespace.addCategoryObject('elementBinding', reserveCredit.name().localName(), reserveCredit)

reserveCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reserveCreditResponse'), CTD_ANON_49, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 389, 4))
Namespace.addCategoryObject('elementBinding', reserveCreditResponse.name().localName(), reserveCreditResponse)

reserveDebit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reserveDebit'), CTD_ANON_50, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 404, 4))
Namespace.addCategoryObject('elementBinding', reserveDebit.name().localName(), reserveDebit)

reserveDebitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reserveDebitResponse'), CTD_ANON_51, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 420, 4))
Namespace.addCategoryObject('elementBinding', reserveDebitResponse.name().localName(), reserveDebitResponse)

void = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'void'), CTD_ANON_52, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 44, 4))
Namespace.addCategoryObject('elementBinding', void.name().localName(), void)

voidResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'voidResponse'), CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 57, 4))
Namespace.addCategoryObject('elementBinding', voidResponse.name().localName(), voidResponse)

echeckVoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckVoid'), CTD_ANON_54, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 82, 4))
Namespace.addCategoryObject('elementBinding', echeckVoid.name().localName(), echeckVoid)

echeckVoidResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckVoidResponse'), CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 94, 4))
Namespace.addCategoryObject('elementBinding', echeckVoidResponse.name().localName(), echeckVoidResponse)

depositReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'depositReversal'), CTD_ANON_56, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 111, 4))
Namespace.addCategoryObject('elementBinding', depositReversal.name().localName(), depositReversal)

refundReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refundReversal'), CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 123, 4))
Namespace.addCategoryObject('elementBinding', refundReversal.name().localName(), refundReversal)

activateReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'activateReversal'), CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 135, 5))
Namespace.addCategoryObject('elementBinding', activateReversal.name().localName(), activateReversal)

deactivateReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deactivateReversal'), CTD_ANON_59, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 147, 5))
Namespace.addCategoryObject('elementBinding', deactivateReversal.name().localName(), deactivateReversal)

loadReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'loadReversal'), CTD_ANON_60, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 159, 5))
Namespace.addCategoryObject('elementBinding', loadReversal.name().localName(), loadReversal)

unloadReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unloadReversal'), CTD_ANON_61, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 171, 5))
Namespace.addCategoryObject('elementBinding', unloadReversal.name().localName(), unloadReversal)

authorization = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorization'), CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 196, 4))
Namespace.addCategoryObject('elementBinding', authorization.name().localName(), authorization)

authReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authReversal'), CTD_ANON_63, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 243, 4))
Namespace.addCategoryObject('elementBinding', authReversal.name().localName(), authReversal)

capture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'capture'), CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 259, 4))
Namespace.addCategoryObject('elementBinding', capture.name().localName(), capture)

forceCapture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'forceCapture'), CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 278, 4))
Namespace.addCategoryObject('elementBinding', forceCapture.name().localName(), forceCapture)

captureGivenAuth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'captureGivenAuth'), CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 307, 4))
Namespace.addCategoryObject('elementBinding', captureGivenAuth.name().localName(), captureGivenAuth)

sale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sale'), CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 339, 4))
Namespace.addCategoryObject('elementBinding', sale.name().localName(), sale)

credit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'credit'), CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 391, 4))
Namespace.addCategoryObject('elementBinding', credit.name().localName(), credit)

activate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'activate'), CTD_ANON_69, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 459, 4))
Namespace.addCategoryObject('elementBinding', activate.name().localName(), activate)

deactivate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deactivate'), CTD_ANON_70, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 477, 4))
Namespace.addCategoryObject('elementBinding', deactivate.name().localName(), deactivate)

load = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'load'), CTD_ANON_71, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 491, 5))
Namespace.addCategoryObject('elementBinding', load.name().localName(), load)

unload = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unload'), CTD_ANON_72, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 506, 5))
Namespace.addCategoryObject('elementBinding', unload.name().localName(), unload)

balanceInquiry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'balanceInquiry'), CTD_ANON_73, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 534, 4))
Namespace.addCategoryObject('elementBinding', balanceInquiry.name().localName(), balanceInquiry)

registerTokenRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'registerTokenRequest'), registerTokenRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 732, 4))
Namespace.addCategoryObject('elementBinding', registerTokenRequest.name().localName(), registerTokenRequest)

registerTokenResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'registerTokenResponse'), CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 750, 4))
Namespace.addCategoryObject('elementBinding', registerTokenResponse.name().localName(), registerTokenResponse)

authorizationResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorizationResponse'), CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 773, 4))
Namespace.addCategoryObject('elementBinding', authorizationResponse.name().localName(), authorizationResponse)

authReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authReversalResponse'), CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 889, 4))
Namespace.addCategoryObject('elementBinding', authReversalResponse.name().localName(), authReversalResponse)

depositReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'depositReversalResponse'), CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 909, 2))
Namespace.addCategoryObject('elementBinding', depositReversalResponse.name().localName(), depositReversalResponse)

refundReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'refundReversalResponse'), CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 929, 4))
Namespace.addCategoryObject('elementBinding', refundReversalResponse.name().localName(), refundReversalResponse)

activateReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'activateReversalResponse'), CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 949, 4))
Namespace.addCategoryObject('elementBinding', activateReversalResponse.name().localName(), activateReversalResponse)

deactivateReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deactivateReversalResponse'), CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 969, 4))
Namespace.addCategoryObject('elementBinding', deactivateReversalResponse.name().localName(), deactivateReversalResponse)

loadReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'loadReversalResponse'), CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 989, 4))
Namespace.addCategoryObject('elementBinding', loadReversalResponse.name().localName(), loadReversalResponse)

unloadReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unloadReversalResponse'), CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1009, 4))
Namespace.addCategoryObject('elementBinding', unloadReversalResponse.name().localName(), unloadReversalResponse)

captureResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'captureResponse'), CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1029, 4))
Namespace.addCategoryObject('elementBinding', captureResponse.name().localName(), captureResponse)

forceCaptureResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'forceCaptureResponse'), CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1054, 4))
Namespace.addCategoryObject('elementBinding', forceCaptureResponse.name().localName(), forceCaptureResponse)

captureGivenAuthResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'captureGivenAuthResponse'), CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1080, 4))
Namespace.addCategoryObject('elementBinding', captureGivenAuthResponse.name().localName(), captureGivenAuthResponse)

saleResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'saleResponse'), CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1105, 4))
Namespace.addCategoryObject('elementBinding', saleResponse.name().localName(), saleResponse)

creditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'creditResponse'), CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1139, 4))
Namespace.addCategoryObject('elementBinding', creditResponse.name().localName(), creditResponse)

activateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'activateResponse'), CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1177, 4))
Namespace.addCategoryObject('elementBinding', activateResponse.name().localName(), activateResponse)

loadResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'loadResponse'), CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1200, 4))
Namespace.addCategoryObject('elementBinding', loadResponse.name().localName(), loadResponse)

unloadResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unloadResponse'), CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1222, 4))
Namespace.addCategoryObject('elementBinding', unloadResponse.name().localName(), unloadResponse)

balanceInquiryResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'balanceInquiryResponse'), CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1265, 4))
Namespace.addCategoryObject('elementBinding', balanceInquiryResponse.name().localName(), balanceInquiryResponse)

deactivateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deactivateResponse'), CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1285, 4))
Namespace.addCategoryObject('elementBinding', deactivateResponse.name().localName(), deactivateResponse)

echeckSale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckSale'), CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1312, 4))
Namespace.addCategoryObject('elementBinding', echeckSale.name().localName(), echeckSale)

echeckCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckCredit'), CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1339, 4))
Namespace.addCategoryObject('elementBinding', echeckCredit.name().localName(), echeckCredit)

echeckVerification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckVerification'), CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1366, 4))
Namespace.addCategoryObject('elementBinding', echeckVerification.name().localName(), echeckVerification)

echeckSalesResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckSalesResponse'), CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1384, 4))
Namespace.addCategoryObject('elementBinding', echeckSalesResponse.name().localName(), echeckSalesResponse)

echeckCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckCreditResponse'), CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1406, 4))
Namespace.addCategoryObject('elementBinding', echeckCreditResponse.name().localName(), echeckCreditResponse)

echeckVerificationResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckVerificationResponse'), CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1500, 4))
Namespace.addCategoryObject('elementBinding', echeckVerificationResponse.name().localName(), echeckVerificationResponse)

echeckRedeposit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckRedeposit'), CTD_ANON_99, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1519, 4))
Namespace.addCategoryObject('elementBinding', echeckRedeposit.name().localName(), echeckRedeposit)

echeckRedepositResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckRedepositResponse'), CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1533, 4))
Namespace.addCategoryObject('elementBinding', echeckRedepositResponse.name().localName(), echeckRedepositResponse)

updateCardValidationNumOnToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updateCardValidationNumOnToken'), updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1788, 4))
Namespace.addCategoryObject('elementBinding', updateCardValidationNumOnToken.name().localName(), updateCardValidationNumOnToken)

updateCardValidationNumOnTokenResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updateCardValidationNumOnTokenResponse'), CTD_ANON_101, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1802, 4))
Namespace.addCategoryObject('elementBinding', updateCardValidationNumOnTokenResponse.name().localName(), updateCardValidationNumOnTokenResponse)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleSessionId'), litleIdType, scope=CTD_ANON, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 24, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdateFileRequestData'), CTD_ANON_, scope=CTD_ANON, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 238, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleSessionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 24, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdateFileRequestData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 25, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantId'), merchantIdentificationType, scope=CTD_ANON_, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 241, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDay'), pyxb.binding.datatypes.date, scope=CTD_ANON_, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 242, 16)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 241, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 242, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDay')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 242, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 242, 16))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_2())
    sub_automata.append(_BuildAutomaton_3())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 240, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'user'), string20Type, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 8, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'password'), string20Type, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 9, 16)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'user')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 8, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'password')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 9, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_4()




contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 563, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firstName'), firstNameType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 564, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'middleInitial'), middleInitialType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 565, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'lastName'), lastNameType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 566, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'companyName'), companyName, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 567, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'addressLine1'), addressLineType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 568, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'addressLine2'), addressLineType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 569, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'addressLine3'), addressLineType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 570, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'city'), cityType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 571, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'state'), stateType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 572, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'zip'), zipType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 573, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'country'), countryTypeEnum, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 574, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'email'), STD_ANON_13, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 575, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'phone'), phoneType, scope=contact, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 582, 12)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 563, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 563, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 564, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'firstName')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 564, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 565, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'middleInitial')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 565, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 566, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'lastName')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 566, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 567, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'companyName')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 567, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 568, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'addressLine1')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 568, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 569, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'addressLine2')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 569, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 570, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'addressLine3')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 570, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 571, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'city')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 571, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 572, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'state')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 572, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 573, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'zip')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 573, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 574, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'country')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 574, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 575, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'email')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 575, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 582, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'phone')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 582, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 563, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 564, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 565, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 566, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 567, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 568, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 569, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 570, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 571, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 572, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 573, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 574, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 575, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 582, 12))
    counters.add(cc_13)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_6())
    sub_automata.append(_BuildAutomaton_7())
    sub_automata.append(_BuildAutomaton_8())
    sub_automata.append(_BuildAutomaton_9())
    sub_automata.append(_BuildAutomaton_10())
    sub_automata.append(_BuildAutomaton_11())
    sub_automata.append(_BuildAutomaton_12())
    sub_automata.append(_BuildAutomaton_13())
    sub_automata.append(_BuildAutomaton_14())
    sub_automata.append(_BuildAutomaton_15())
    sub_automata.append(_BuildAutomaton_16())
    sub_automata.append(_BuildAutomaton_17())
    sub_automata.append(_BuildAutomaton_18())
    sub_automata.append(_BuildAutomaton_19())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 562, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
contact._Automaton = _BuildAutomaton_5()




cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=cardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 592, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'number'), ccAccountNumberType, scope=cardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 593, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'expDate'), expDateType, scope=cardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 594, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'track'), trackDataType, scope=cardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 597, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), cvNumType, scope=cardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 600, 12)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 593, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 594, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 600, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 592, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'number')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 593, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'expDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 594, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'track')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 597, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 600, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardType._Automaton = _BuildAutomaton_20()




cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), ccAccountNumberType, scope=cardTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 606, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'expDate'), expDateType, scope=cardTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 607, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), cvNumType, scope=cardTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 608, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=cardTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 609, 12)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 607, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 608, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 609, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 606, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'expDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 607, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 608, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 609, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenType._Automaton = _BuildAutomaton_21()




cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypageRegistrationId'), string512Type, scope=cardPaypageType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 615, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'expDate'), expDateType, scope=cardPaypageType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 616, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), cvNumType, scope=cardPaypageType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 617, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=cardPaypageType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 618, 12)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 616, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 617, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 618, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypageRegistrationId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 615, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'expDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 616, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 617, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 618, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardPaypageType._Automaton = _BuildAutomaton_22()




tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), ccAccountNumberType, scope=tokenResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 624, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponseCode'), responseType, scope=tokenResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 625, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenMessage'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 626, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=tokenResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 627, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bin'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 628, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eCheckAccountSuffix'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 629, 12)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 624, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 627, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 628, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 629, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 624, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponseCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 625, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenMessage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 626, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 627, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bin')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 628, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'eCheckAccountSuffix')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 629, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
tokenResponseType._Automaton = _BuildAutomaton_23()




advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'threatMetrixSessionId'), threatMetrixSessionIdType, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 655, 12)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'threatMetrixSessionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 655, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
advancedFraudChecksType._Automaton = _BuildAutomaton_24()




advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceReviewStatus'), pyxb.binding.datatypes.string, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 667, 12)))

advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceReputationScore'), pyxb.binding.datatypes.int, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 668, 12)))

advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'triggeredRule'), pyxb.binding.datatypes.string, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 669, 12)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 667, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 668, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 669, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deviceReviewStatus')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 667, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deviceReputationScore')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 668, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'triggeredRule')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 669, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
advancedFraudResultsType._Automaton = _BuildAutomaton_25()




voidRecyclingResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'creditLitleTxnId'), litleIdType, scope=voidRecyclingResponseType, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 78, 12)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 78, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(voidRecyclingResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'creditLitleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 78, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
voidRecyclingResponseType._Automaton = _BuildAutomaton_26()




recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 14, 12)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 15, 12)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), pyxb.binding.datatypes.string, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 16, 12)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 17, 12)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 14, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 16, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 17, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringTransactionResponseType._Automaton = _BuildAutomaton_27()




recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'planCode'), string25Type, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 144, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'numberOfPayments'), numberOfPaymentsType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 145, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'startDate'), pyxb.binding.datatypes.date, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 146, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 147, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'createDiscount'), createDiscountType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 148, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'createAddOn'), createAddOnType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 149, 12)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 145, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 146, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 147, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 148, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 149, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'planCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 144, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'numberOfPayments')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 145, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'startDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 146, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 147, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'createDiscount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 148, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'createAddOn')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 149, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringSubscriptionType._Automaton = _BuildAutomaton_28()




litleInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), litleIdType, scope=litleInternalRecurringRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 179, 12)))

litleInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTxnId'), litleIdType, scope=litleInternalRecurringRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 180, 12)))

litleInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'finalPayment'), pyxb.binding.datatypes.boolean, scope=litleInternalRecurringRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 181, 12)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(litleInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 179, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(litleInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 180, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(litleInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'finalPayment')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 181, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
litleInternalRecurringRequestType._Automaton = _BuildAutomaton_29()




recurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), recurringSubscriptionType, scope=recurringRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 187, 12)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 187, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringRequestType._Automaton = _BuildAutomaton_30()




recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), litleIdType, scope=recurringResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 193, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseCode'), responseType, scope=recurringResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 194, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseMessage'), messageType, scope=recurringResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 195, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTxnId'), litleIdType, scope=recurringResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 196, 12)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 196, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 193, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 194, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseMessage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 195, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 196, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringResponseType._Automaton = _BuildAutomaton_31()




createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'discountCode'), string25Type, scope=createDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 202, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameType, scope=createDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 203, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=createDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 204, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'startDate'), pyxb.binding.datatypes.date, scope=createDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 205, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'endDate'), pyxb.binding.datatypes.date, scope=createDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 206, 12)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'discountCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 202, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 203, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 204, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'startDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 205, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'endDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 206, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
createDiscountType._Automaton = _BuildAutomaton_32()




updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'discountCode'), string25Type, scope=updateDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 212, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameType, scope=updateDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 213, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=updateDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 214, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'startDate'), pyxb.binding.datatypes.date, scope=updateDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 215, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'endDate'), pyxb.binding.datatypes.date, scope=updateDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 216, 12)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 213, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 214, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 215, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 216, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'discountCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 212, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 213, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 214, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'startDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 215, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'endDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 216, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
updateDiscountType._Automaton = _BuildAutomaton_33()




deleteDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'discountCode'), string25Type, scope=deleteDiscountType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 222, 12)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(deleteDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'discountCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 222, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
deleteDiscountType._Automaton = _BuildAutomaton_34()




createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'addOnCode'), string25Type, scope=createAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 228, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameType, scope=createAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 229, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=createAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 230, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'startDate'), pyxb.binding.datatypes.date, scope=createAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 231, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'endDate'), pyxb.binding.datatypes.date, scope=createAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 232, 12)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'addOnCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 228, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 229, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 230, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'startDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 231, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'endDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 232, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
createAddOnType._Automaton = _BuildAutomaton_35()




updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'addOnCode'), string25Type, scope=updateAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 238, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameType, scope=updateAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 239, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=updateAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 240, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'startDate'), pyxb.binding.datatypes.date, scope=updateAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 241, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'endDate'), pyxb.binding.datatypes.date, scope=updateAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 242, 12)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 239, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 240, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 241, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 242, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'addOnCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 238, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 239, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 240, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'startDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 241, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'endDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 242, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
updateAddOnType._Automaton = _BuildAutomaton_36()




deleteAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'addOnCode'), string25Type, scope=deleteAddOnType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 248, 12)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(deleteAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'addOnCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 248, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
deleteAddOnType._Automaton = _BuildAutomaton_37()




merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'campaign'), campaignType, scope=merchantDataType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 25, 12)))

merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'affiliate'), affiliateType, scope=merchantDataType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 26, 12)))

merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantGroupingId'), merchantGroupingIdType, scope=merchantDataType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 27, 12)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 25, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'campaign')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 25, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 26, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'affiliate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 26, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 27, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantGroupingId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 27, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 25, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 26, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 27, 12))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_39())
    sub_automata.append(_BuildAutomaton_40())
    sub_automata.append(_BuildAutomaton_41())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 24, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
merchantDataType._Automaton = _BuildAutomaton_38()




driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'licenseNumber'), driversLicenseType, scope=driversLicenseInfo, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 50, 12)))

driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'state'), stateCodeType, scope=driversLicenseInfo, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 51, 12)))

driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dateOfBirth'), dateOfBirthType, scope=driversLicenseInfo, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 52, 12)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'licenseNumber')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 50, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 51, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'state')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 51, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 52, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dateOfBirth')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 52, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 51, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 52, 12))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_43())
    sub_automata.append(_BuildAutomaton_44())
    sub_automata.append(_BuildAutomaton_45())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 49, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
driversLicenseInfo._Automaton = _BuildAutomaton_42()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ssn'), STD_ANON, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 59, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dob'), pyxb.binding.datatypes.date, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 66, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerRegistrationDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 67, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerType'), STD_ANON_, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 68, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'incomeAmount'), pyxb.binding.datatypes.long, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 76, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'incomeCurrency'), currencyCodeEnum, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 77, 16), unicode_default=u'USD'))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerCheckingAccount'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 78, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerSavingAccount'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 79, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'employerName'), string20Type, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 80, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerWorkTelephone'), phoneType, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 81, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'residenceStatus'), STD_ANON_2, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 82, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'yearsAtResidence'), STD_ANON_3, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 91, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'yearsAtEmployer'), STD_ANON_4, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 98, 16)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 59, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ssn')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 59, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 66, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dob')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 66, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 67, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerRegistrationDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 67, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 68, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 68, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 76, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'incomeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 76, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 77, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'incomeCurrency')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 77, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 78, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerCheckingAccount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 78, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 79, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerSavingAccount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 79, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 80, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'employerName')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 80, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 81, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerWorkTelephone')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 81, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 82, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'residenceStatus')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 82, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 91, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'yearsAtResidence')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 91, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 98, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'yearsAtEmployer')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 98, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 59, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 66, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 67, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 68, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 76, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 77, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 78, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 79, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 80, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 81, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 82, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 91, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 98, 16))
    counters.add(cc_12)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_47())
    sub_automata.append(_BuildAutomaton_48())
    sub_automata.append(_BuildAutomaton_49())
    sub_automata.append(_BuildAutomaton_50())
    sub_automata.append(_BuildAutomaton_51())
    sub_automata.append(_BuildAutomaton_52())
    sub_automata.append(_BuildAutomaton_53())
    sub_automata.append(_BuildAutomaton_54())
    sub_automata.append(_BuildAutomaton_55())
    sub_automata.append(_BuildAutomaton_56())
    sub_automata.append(_BuildAutomaton_57())
    sub_automata.append(_BuildAutomaton_58())
    sub_automata.append(_BuildAutomaton_59())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 58, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_46()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bmlProductType'), STD_ANON_5, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 109, 4), unicode_default=u'BL'))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bmlMerchantId'), litleIdType, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 120, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'termsAndConditions'), STD_ANON_6, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 123, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'preapprovalNumber'), ccAccountNumberType, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 130, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantPromotionalCode'), STD_ANON_7, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 131, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerPasswordChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 139, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerBillingAddressChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 140, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerEmailChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 141, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerPhoneChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 142, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'secretQuestionCode'), string2Type, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 144, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'secretQuestionAnswer'), string25Type, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 145, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyPresenceIndicator'), virtualAuthenticationKeyPresenceIndicator, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 146, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyData'), virtualAuthenticationKeyData, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 148, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'itemCategoryCode'), STD_ANON_8, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 150, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorizationSourcePlatform'), pyxb.binding.datatypes.string, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 158, 16)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 120, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bmlMerchantId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 120, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 121, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bmlProductType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 121, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 123, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'termsAndConditions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 123, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 130, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'preapprovalNumber')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 130, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 131, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantPromotionalCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 131, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 139, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerPasswordChanged')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 139, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 140, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerBillingAddressChanged')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 140, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 141, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerEmailChanged')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 141, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 142, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerPhoneChanged')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 142, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 144, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'secretQuestionCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 144, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 145, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'secretQuestionAnswer')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 145, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 146, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyPresenceIndicator')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 146, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 148, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'virtualAuthenticationKeyData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 148, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 150, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'itemCategoryCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 150, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 158, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorizationSourcePlatform')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 158, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 120, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 121, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 123, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 130, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 131, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 139, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 140, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 141, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 142, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 144, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 145, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 146, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 148, 16))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 150, 16))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 158, 16))
    counters.add(cc_14)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_61())
    sub_automata.append(_BuildAutomaton_62())
    sub_automata.append(_BuildAutomaton_63())
    sub_automata.append(_BuildAutomaton_64())
    sub_automata.append(_BuildAutomaton_65())
    sub_automata.append(_BuildAutomaton_66())
    sub_automata.append(_BuildAutomaton_67())
    sub_automata.append(_BuildAutomaton_68())
    sub_automata.append(_BuildAutomaton_69())
    sub_automata.append(_BuildAutomaton_70())
    sub_automata.append(_BuildAutomaton_71())
    sub_automata.append(_BuildAutomaton_72())
    sub_automata.append(_BuildAutomaton_73())
    sub_automata.append(_BuildAutomaton_74())
    sub_automata.append(_BuildAutomaton_75())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 119, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_60()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bmlMerchantId'), litleIdType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 166, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'promotionalOfferCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 168, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'approvedTermsCode'), STD_ANON_9, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 170, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'creditLine'), transactionAmountType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 177, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'addressIndicator'), addressIndicator, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 179, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'loanToValueEstimator'), loanToValueEstimator, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 180, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'riskEstimator'), riskEstimator, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 181, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'riskQueueAssignment'), riskQueueAssignment, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 182, 16)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bmlMerchantId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 166, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 168, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'promotionalOfferCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 168, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 170, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'approvedTermsCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 170, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 177, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'creditLine')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 177, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 179, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'addressIndicator')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 179, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 180, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'loanToValueEstimator')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 180, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 181, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'riskEstimator')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 181, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 182, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'riskQueueAssignment')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 182, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 168, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 170, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 177, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 179, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 180, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 181, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 182, 16))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_77())
    sub_automata.append(_BuildAutomaton_78())
    sub_automata.append(_BuildAutomaton_79())
    sub_automata.append(_BuildAutomaton_80())
    sub_automata.append(_BuildAutomaton_81())
    sub_automata.append(_BuildAutomaton_82())
    sub_automata.append(_BuildAutomaton_83())
    sub_automata.append(_BuildAutomaton_84())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 165, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_76()




fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authenticationValue'), authenticationValueType, scope=fraudCheckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 189, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authenticationTransactionId'), authenticationTransactionIdType, scope=fraudCheckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 190, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerIpAddress'), ipAddress, scope=fraudCheckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 191, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authenticatedByMerchant'), pyxb.binding.datatypes.boolean, scope=fraudCheckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 192, 12)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 189, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authenticationValue')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 189, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 190, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authenticationTransactionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 190, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 191, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerIpAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 191, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 192, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authenticatedByMerchant')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 192, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 189, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 190, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 191, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 192, 12))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_86())
    sub_automata.append(_BuildAutomaton_87())
    sub_automata.append(_BuildAutomaton_88())
    sub_automata.append(_BuildAutomaton_89())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 188, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
fraudCheckType._Automaton = _BuildAutomaton_85()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payerId'), STD_ANON_10, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 419, 48)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payerEmail'), STD_ANON_11, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 428, 48)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payerId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 419, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payerEmail')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 428, 48))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_90()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 526, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authCode'), authCodeType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 527, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authAmount'), transactionAmountType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 529, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 526, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 527, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 528, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 528, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 529, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 529, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 528, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 529, 16))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_92())
    sub_automata.append(_BuildAutomaton_93())
    sub_automata.append(_BuildAutomaton_94())
    sub_automata.append(_BuildAutomaton_95())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 525, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_91()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'IIASFlag'), IIASFlagType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 552, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'healthcareAmounts'), CTD_ANON_9, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 557, 4)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'healthcareAmounts')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 551, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'IIASFlag')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 552, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_96()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'totalHealthcareAmount'), transactionAmountType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 560, 16)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RxAmount'), transactionAmountType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 561, 16)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'visionAmount'), transactionAmountType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 562, 16)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'clinicOtherAmount'), transactionAmountType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 563, 16)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dentalAmount'), transactionAmountType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 564, 16)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 561, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 562, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 563, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 564, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'totalHealthcareAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 560, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RxAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 561, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'visionAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 562, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'clinicOtherAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 563, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dentalAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 564, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_97()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerReference'), customerReferenceType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 572, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'salesTax'), transactionAmountType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 573, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deliveryType'), STD_ANON_12, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 574, 16), unicode_default=u'TBD'))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxExempt'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 585, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'discountAmount'), transactionAmountType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 586, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shippingAmount'), transactionAmountType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 587, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dutyAmount'), transactionAmountType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 588, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shipFromPostalCode'), zipType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 589, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'destinationPostalCode'), zipType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 590, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'destinationCountryCode'), countryTypeEnum, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 591, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'invoiceReferenceNumber'), invoiceReferenceNumberType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 592, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 593, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'detailTax'), CTD_ANON_12, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 609, 4)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'lineItemData'), CTD_ANON_13, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 621, 4)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 572, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 573, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 574, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 585, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 586, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 587, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 588, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 589, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 590, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 591, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 592, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 593, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=6L, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 594, 16))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=99L, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 595, 16))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerReference')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 572, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'salesTax')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 573, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deliveryType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 574, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxExempt')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 585, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'discountAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 586, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shippingAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 587, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dutyAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 588, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shipFromPostalCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 589, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'destinationPostalCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 590, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'destinationCountryCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 591, 16))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'invoiceReferenceNumber')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 592, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 593, 16))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'detailTax')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 594, 16))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'lineItemData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 595, 16))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_98()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sellerId'), sellerIdType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 603, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sellerMerchantCategoryCode'), merchantCategoryCodeType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 604, 16)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sellerId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 603, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sellerMerchantCategoryCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 604, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_99()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxIncludedInTotal'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 612, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxAmount'), transactionAmountType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 613, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxRate'), taxRateType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 614, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxTypeIdentifier'), taxTypeIdentifierEnum, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 615, 16)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardAcceptorTaxId'), cardAcceptorTaxIdType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 616, 16)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 612, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 614, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 615, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 616, 16))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxIncludedInTotal')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 612, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 613, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxRate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 614, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxTypeIdentifier')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 615, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardAcceptorTaxId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 616, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_100()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'detailTax'), CTD_ANON_12, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 609, 4)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'itemSequenceNumber'), itemSequenceNumberType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 624, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'itemDescription'), itemDescriptionType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 625, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'productCode'), productCodeType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 626, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'quantity'), quantityType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 627, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unitOfMeasure'), unitOfMeasureType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 628, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxAmount'), transactionAmountType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 629, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'lineItemTotal'), transactionAmountType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 630, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'lineItemTotalWithTax'), transactionAmountType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 632, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'itemDiscountAmount'), transactionAmountType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 634, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commodityCode'), commodityCodeType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 635, 16)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'unitCost'), unitCostType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 636, 16)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 624, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 626, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 627, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 628, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 629, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 630, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 632, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 634, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 635, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 636, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=6L, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 637, 16))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'itemSequenceNumber')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 624, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'itemDescription')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 625, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'productCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 626, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'quantity')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 627, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'unitOfMeasure')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 628, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 629, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'lineItemTotal')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 630, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'lineItemTotalWithTax')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 632, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'itemDiscountAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 634, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commodityCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 635, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'unitCost')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 636, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'detailTax')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 637, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_101()




accountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=accountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 644, 12)))

accountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'number'), ccAccountNumberType, scope=accountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 645, 12)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 645, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(accountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 644, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(accountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'number')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 645, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
accountInfoType._Automaton = _BuildAutomaton_102()




echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), ccAccountNumberType, scope=echeckTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 651, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), routingNumberType, scope=echeckTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 652, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accType'), echeckAccountTypeEnum, scope=echeckTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 653, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'checkNum'), checkNumberType, scope=echeckTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 654, 12)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 654, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 651, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'routingNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 652, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 653, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'checkNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 654, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckTokenType._Automaton = _BuildAutomaton_103()




payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payerId'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 660, 12)))

payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 661, 12)))

payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'transactionId'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 662, 12)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 661, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payerId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 660, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'token')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 661, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'transactionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 662, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
payPal._Automaton = _BuildAutomaton_104()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'phone'), customBillingPhoneType, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 684, 20)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'city'), customBillingCityType, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 685, 20)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'url'), customBillingUrlType, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 686, 20)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'descriptor'), descriptorType, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 688, 16)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 684, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 685, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 686, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 688, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'phone')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 684, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'city')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 685, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'url')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 686, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'descriptor')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 688, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_105()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bypassVelocityCheck'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 716, 16)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 716, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bypassVelocityCheck')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 716, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_106()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'capability'), posCapabilityTypeEnum, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 724, 16)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'entryMode'), posEntryModeTypeEnum, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 725, 16)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardholderId'), posCardholderIdTypeEnum, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 726, 16)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'terminalId'), pyxb.binding.datatypes.string, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 727, 16)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'capability')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 724, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'entryMode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 725, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardholderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 726, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 727, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'terminalId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 727, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 727, 16))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_108())
    sub_automata.append(_BuildAutomaton_109())
    sub_automata.append(_BuildAutomaton_110())
    sub_automata.append(_BuildAutomaton_111())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 723, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_107()




recycleAdviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'nextRecycleTime'), pyxb.binding.datatypes.dateTime, scope=recycleAdviceType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 841, 12)))

recycleAdviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycleAdviceEnd'), string20Type, scope=recycleAdviceType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 842, 12)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recycleAdviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'nextRecycleTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 841, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recycleAdviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycleAdviceEnd')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 842, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recycleAdviceType._Automaton = _BuildAutomaton_112()




recyclingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycleAdvice'), recycleAdviceType, scope=recyclingType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 856, 12)))

recyclingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycleEngineActive'), pyxb.binding.datatypes.boolean, scope=recyclingType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 857, 12)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 856, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 857, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recyclingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycleAdvice')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 856, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recyclingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycleEngineActive')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 857, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recyclingType._Automaton = _BuildAutomaton_113()




recyclingRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycleBy'), recycleByTypeEnum, scope=recyclingRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 863, 12)))

recyclingRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycleId'), string25Type, scope=recyclingRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 864, 12)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 863, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 864, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recyclingRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycleBy')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 863, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recyclingRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycleId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 864, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recyclingRequestType._Automaton = _BuildAutomaton_114()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundingSource'), CTD_ANON_18, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 871, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'affluence'), affluenceTypeEnum, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 881, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'issuerCountry'), string3Type, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 882, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardProductType'), cardProductTypeEnum, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 883, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'virtualAccountNumber'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 884, 16)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 871, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 881, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 882, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 883, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 884, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundingSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 871, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'affluence')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 881, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'issuerCountry')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 882, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardProductType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 883, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'virtualAccountNumber')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 884, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_115()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), fundingSourceTypeEnum, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 874, 28)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'availableBalance'), string20Type, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 875, 28)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reloadable'), string50Type, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 876, 28)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'prepaidCardType'), string50Type, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 877, 28)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 876, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 877, 28))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 874, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'availableBalance')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 875, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reloadable')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 876, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'prepaidCardType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 877, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_116()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'avsResult'), string2Type, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1167, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardValidationResult'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1168, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authenticationResult'), authenticationResultType, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1170, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'advancedAVSResult'), string3Type, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1171, 16)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudResults'), advancedFraudResultsType, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1172, 16)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1167, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'avsResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1167, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1168, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1168, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1170, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authenticationResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1170, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1171, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'advancedAVSResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1171, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1172, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudResults')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1172, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1167, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1168, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1170, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1171, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1172, 16))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_118())
    sub_automata.append(_BuildAutomaton_119())
    sub_automata.append(_BuildAutomaton_120())
    sub_automata.append(_BuildAutomaton_121())
    sub_automata.append(_BuildAutomaton_122())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1166, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_117()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'availableBalance'), string20Type, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1247, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'beginningBalance'), string20Type, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1248, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'endingBalance'), string20Type, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1249, 13)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cashBackAmount'), string20Type, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1250, 13)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1247, 13))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1248, 13))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1249, 13))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1250, 13))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'availableBalance')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1247, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'beginningBalance')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1248, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'endingBalance')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1249, 13))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cashBackAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1250, 13))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_123()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountNumber'), ccAccountNumberType, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1258, 13)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1259, 13)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1258, 13))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1259, 13))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountNumber')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1258, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1259, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_124()




echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accType'), echeckAccountTypeEnum, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1429, 16)))

echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accNum'), echeckAccountNumberType, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1430, 16)))

echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), routingNumberType, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1431, 16)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1429, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1430, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'routingNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1431, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_126())
    sub_automata.append(_BuildAutomaton_127())
    sub_automata.append(_BuildAutomaton_128())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1428, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckAccountInfoType._Automaton = _BuildAutomaton_125()




echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accType'), echeckAccountTypeEnum, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1437, 16)))

echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), ccAccountNumberType, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1438, 16)))

echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), routingNumberType, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1439, 16)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1437, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1438, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'routingNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1439, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_130())
    sub_automata.append(_BuildAutomaton_131())
    sub_automata.append(_BuildAutomaton_132())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1436, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckTokenInfoType._Automaton = _BuildAutomaton_129()




cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=cardAccountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1446, 16)))

cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'number'), ccAccountNumberType, scope=cardAccountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1447, 16)))

cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'expDate'), expDateType, scope=cardAccountInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1448, 16)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1446, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'number')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1447, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'expDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1448, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_134())
    sub_automata.append(_BuildAutomaton_135())
    sub_automata.append(_BuildAutomaton_136())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1445, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardAccountInfoType._Automaton = _BuildAutomaton_133()




cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), ccAccountNumberType, scope=cardTokenInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1454, 16)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=cardTokenInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1455, 16)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'expDate'), expDateType, scope=cardTokenInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1456, 16)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bin'), pyxb.binding.datatypes.string, scope=cardTokenInfoType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1457, 16)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1454, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1455, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'expDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1456, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1457, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bin')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1457, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1457, 16))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_138())
    sub_automata.append(_BuildAutomaton_139())
    sub_automata.append(_BuildAutomaton_140())
    sub_automata.append(_BuildAutomaton_141())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1453, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenInfoType._Automaton = _BuildAutomaton_137()




extendedCardResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=extendedCardResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1464, 16)))

extendedCardResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), responseType, scope=extendedCardResponseType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1465, 16)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(extendedCardResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1464, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(extendedCardResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1465, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_143())
    sub_automata.append(_BuildAutomaton_144())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1463, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
extendedCardResponseType._Automaton = _BuildAutomaton_142()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originalAccountInfo'), echeckAccountInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1474, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'newAccountInfo'), echeckAccountInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1475, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originalTokenInfo'), echeckTokenInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1479, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'newTokenInfo'), echeckTokenInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1480, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originalCardInfo'), cardAccountInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1484, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'newCardInfo'), cardAccountInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1485, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extendedCardResponse'), extendedCardResponseType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1486, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originalCardTokenInfo'), cardTokenInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1490, 20)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'newCardTokenInfo'), cardTokenInfoType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1491, 20)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1486, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1492, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1495, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'originalAccountInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1474, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'newAccountInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1475, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'originalTokenInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1479, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'newTokenInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1480, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'originalCardInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1484, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'newCardInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1485, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extendedCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1486, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'originalCardTokenInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1490, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'newCardTokenInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1491, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extendedCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1492, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extendedCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1495, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_145()




echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accType'), echeckAccountTypeEnum, scope=echeckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1556, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accNum'), echeckAccountNumberType, scope=echeckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1557, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), routingNumberType, scope=echeckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1558, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'checkNum'), checkNumberType, scope=echeckType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1559, 12)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1556, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1557, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'routingNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1558, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1559, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'checkNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1559, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1559, 12))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_147())
    sub_automata.append(_BuildAutomaton_148())
    sub_automata.append(_BuildAutomaton_149())
    sub_automata.append(_BuildAutomaton_150())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1555, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckType._Automaton = _BuildAutomaton_146()




echeckForTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accNum'), echeckAccountNumberType, scope=echeckForTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1565, 12)))

echeckForTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'routingNum'), routingNumberType, scope=echeckForTokenType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1566, 12)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckForTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1565, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckForTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'routingNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1566, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_152())
    sub_automata.append(_BuildAutomaton_153())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1564, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckForTokenType._Automaton = _BuildAutomaton_151()




filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'prepaid'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1758, 12)))

filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'international'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1759, 12)))

filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'chargeback'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1760, 12)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1758, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1759, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1760, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'prepaid')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1758, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'international')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1759, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'chargeback')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1760, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
filteringType._Automaton = _BuildAutomaton_154()




virtualGiftCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountNumberLength'), pyxb.binding.datatypes.integer, scope=virtualGiftCardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1820, 20)))

virtualGiftCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardBin'), pyxb.binding.datatypes.string, scope=virtualGiftCardType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1821, 20)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(virtualGiftCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountNumberLength')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1820, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(virtualGiftCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardBin')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1821, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
virtualGiftCardType._Automaton = _BuildAutomaton_155()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RFRRequest'), CTD_ANON, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 21, 4)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'batchRequest'), CTD_ANON_24, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 29, 4)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authentication'), CTD_ANON_2, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 5, 4)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 12, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 13, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authentication')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 10, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'batchRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 12, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RFRRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 13, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_156()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_24, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 6, 4)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_24, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 8, 4)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'transaction')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 32, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 33, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_157()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'RFRResponse'), CTD_ANON_26, scope=CTD_ANON_25, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 179, 4)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'batchResponse'), CTD_ANON_27, scope=CTD_ANON_25, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 185, 4)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 168, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'batchResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 168, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'RFRResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 169, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_158()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 7, 4)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 771, 4)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 188, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 189, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'transactionResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 188, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 189, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_159()




cardTokenTypeAU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bin'), pyxb.binding.datatypes.string, scope=cardTokenTypeAU, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 221, 20)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 607, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 608, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 609, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 221, 20))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 606, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'expDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 607, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 608, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 609, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bin')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 221, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenTypeAU._Automaton = _BuildAutomaton_160()




baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authentication'), CTD_ANON_2, scope=baseRequest, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 5, 4)))

baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=baseRequest, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 6, 4)))

baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=baseRequest, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 8, 4)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authentication')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'transaction')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 13, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 14, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
baseRequest._Automaton = _BuildAutomaton_161()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 7, 4)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 771, 4)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 35, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 36, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'transactionResponse')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 35, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringTransactionResponse')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 36, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_162()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), litleIdType, scope=CTD_ANON_29, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 26, 25)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 26, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_163()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), litleIdType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 38, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'planCode'), string25Type, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 39, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 42, 29)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), cardTokenType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 43, 29)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypage'), cardPaypageType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 44, 29)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billingDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 46, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'createDiscount'), createDiscountType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 47, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updateDiscount'), updateDiscountType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 48, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deleteDiscount'), deleteDiscountType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 49, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'createAddOn'), createAddOnType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 50, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updateAddOn'), updateAddOnType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 51, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deleteAddOn'), deleteAddOnType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 52, 25)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 39, 25))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 40, 25))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 41, 25))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 46, 25))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 47, 25))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 48, 25))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 49, 25))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 50, 25))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 51, 25))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 52, 25))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 38, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'planCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 39, 25))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 40, 25))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 42, 29))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'token')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 43, 29))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 44, 29))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billingDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 46, 25))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'createDiscount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 47, 25))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'updateDiscount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 48, 25))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deleteDiscount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 49, 25))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'createAddOn')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 50, 25))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'updateAddOn')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 51, 25))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deleteAddOn')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 52, 25))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_164()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'planCode'), string25Type, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 64, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), nameType, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 65, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'description'), nameType, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 66, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'intervalType'), intervalTypeEnum, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 67, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 68, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'numberOfPayments'), numberOfPaymentsType, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 69, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'trialNumberOfIntervals'), numberOfPaymentsType, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 70, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'trialIntervalType'), trialIntervalTypeEnum, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 71, 25)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'active'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 72, 25)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 66, 25))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 69, 25))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 70, 25))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 71, 25))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 72, 25))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'planCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 64, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 65, 25))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'description')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 66, 25))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'intervalType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 67, 25))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 68, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'numberOfPayments')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 69, 25))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'trialNumberOfIntervals')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 70, 25))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'trialIntervalType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 71, 25))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'active')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 72, 25))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_165()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'planCode'), string25Type, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 84, 25)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'active'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 85, 25)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'planCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 84, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'active')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 85, 25))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_166()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), litleIdType, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 97, 25)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 14, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 16, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 17, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 97, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_167()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId'), litleIdType, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 109, 25)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 110, 25)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 110, 25))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 14, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 16, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 17, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscriptionId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 109, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 110, 25))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_168()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'planCode'), string25Type, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 122, 25)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 14, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 16, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 17, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'planCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 122, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_169()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'planCode'), string25Type, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 134, 25)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 14, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 16, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 17, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'planCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleRecurring_v9.0.xsd', 134, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_170()




def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authentication')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'transaction')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 13, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringTransaction')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 14, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_171()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardOrToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 146, 4)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 156, 24)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 156, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardOrToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 157, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_173())
    sub_automata.append(_BuildAutomaton_174())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 155, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_172()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 202, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 203, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 204, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 205, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 206, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updatedCard'), cardType, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 207, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originalCard'), cardType, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 208, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'updatedToken'), cardTokenTypeAU, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 209, 24)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'originalToken'), cardTokenTypeAU, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 210, 24)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 202, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 203, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 204, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 205, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 206, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 207, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'updatedCard')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 207, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 208, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'originalCard')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 208, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 209, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'updatedToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 209, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 210, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'originalToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 210, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 207, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 208, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 209, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 210, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_176())
    sub_automata.append(_BuildAutomaton_177())
    sub_automata.append(_BuildAutomaton_178())
    sub_automata.append(_BuildAutomaton_179())
    sub_automata.append(_BuildAutomaton_180())
    sub_automata.append(_BuildAutomaton_181())
    sub_automata.append(_BuildAutomaton_182())
    sub_automata.append(_BuildAutomaton_183())
    sub_automata.append(_BuildAutomaton_184())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 201, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_175()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), string25Type, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 253, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 254, 28)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 253, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 254, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_185()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 267, 24)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 268, 24)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 269, 24)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 270, 24)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 267, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 268, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 269, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 270, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_187())
    sub_automata.append(_BuildAutomaton_188())
    sub_automata.append(_BuildAutomaton_189())
    sub_automata.append(_BuildAutomaton_190())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 266, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_186()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), string25Type, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 283, 28)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 284, 28)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 283, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 284, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_191()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 297, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 298, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 299, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 300, 24)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 297, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 298, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 299, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 300, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_193())
    sub_automata.append(_BuildAutomaton_194())
    sub_automata.append(_BuildAutomaton_195())
    sub_automata.append(_BuildAutomaton_196())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 296, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_192()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), merchantIdentificationType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 313, 28)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'submerchantName'), string256Type, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 314, 28)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), string25Type, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 315, 28)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 316, 28)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountInfo'), echeckType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 317, 28)))

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 313, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'submerchantName')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 314, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 315, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 316, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 317, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_197()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), merchantIdentificationType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 331, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'submerchantName'), string256Type, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 332, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), string25Type, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 333, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 334, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountInfo'), echeckType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 335, 28)))

def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 331, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'submerchantName')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 332, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 333, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 334, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 335, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_198()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 348, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 349, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 350, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 351, 24)))

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 348, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 349, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 350, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 351, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_200())
    sub_automata.append(_BuildAutomaton_201())
    sub_automata.append(_BuildAutomaton_202())
    sub_automata.append(_BuildAutomaton_203())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 347, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_199()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 363, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 364, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 365, 24)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 366, 24)))

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 363, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 364, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 365, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 366, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_205())
    sub_automata.append(_BuildAutomaton_206())
    sub_automata.append(_BuildAutomaton_207())
    sub_automata.append(_BuildAutomaton_208())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 362, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_204()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), merchantIdentificationType, scope=CTD_ANON_48, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 379, 28)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), string25Type, scope=CTD_ANON_48, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 380, 28)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_48, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 381, 28)))

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 379, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 380, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 381, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_209()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 394, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 395, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 396, 24)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 397, 24)))

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 394, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 395, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 396, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 397, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_211())
    sub_automata.append(_BuildAutomaton_212())
    sub_automata.append(_BuildAutomaton_213())
    sub_automata.append(_BuildAutomaton_214())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 393, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_210()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId'), merchantIdentificationType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 410, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId'), string25Type, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 411, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 412, 28)))

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundingSubmerchantId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 410, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fundsTransferId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 411, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 412, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_215()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 425, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 426, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 427, 24)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 428, 24)))

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 425, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 426, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 427, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 428, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_217())
    sub_automata.append(_BuildAutomaton_218())
    sub_automata.append(_BuildAutomaton_219())
    sub_automata.append(_BuildAutomaton_220())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleBatch_v9.0.xsd', 424, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_216()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 49, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, scope=CTD_ANON_52, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4)))

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 49, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 50, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 50, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 50, 24))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_222())
    sub_automata.append(_BuildAutomaton_223())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 48, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_221()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 62, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 63, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 64, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 65, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 66, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycling'), voidRecyclingResponseType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 67, 24)))

def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 62, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 63, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 64, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 65, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 66, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 67, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycling')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 67, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 67, 24))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_225())
    sub_automata.append(_BuildAutomaton_226())
    sub_automata.append(_BuildAutomaton_227())
    sub_automata.append(_BuildAutomaton_228())
    sub_automata.append(_BuildAutomaton_229())
    sub_automata.append(_BuildAutomaton_230())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 61, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_224()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 87, 24)))

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 87, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_231()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 99, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 100, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 101, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 102, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 103, 24)))

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 99, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 100, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 101, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 102, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 103, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_233())
    sub_automata.append(_BuildAutomaton_234())
    sub_automata.append(_BuildAutomaton_235())
    sub_automata.append(_BuildAutomaton_236())
    sub_automata.append(_BuildAutomaton_237())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 98, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_232()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 116, 24)))

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 116, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_238()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 128, 24)))

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 128, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_239()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 140, 24)))

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 140, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_240()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 152, 24)))

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 152, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_241()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 164, 24)))

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 164, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_242()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 176, 24)))

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location('/Users/msherry/Desktop/vantiv/litleOnline_v9.0.xsd', 176, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_243()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerInfo'), CTD_ANON_3, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 56, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), CTD_ANON_4, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 202, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 205, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 206, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), transactionAmountType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 207, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 208, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 213, 32)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypal'), payPal, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 214, 32)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), cardTokenType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 215, 32)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypage'), cardPaypageType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 216, 32)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardholderAuthentication'), fraudCheckType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 219, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxType'), govtTaxTypeEnum, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 223, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'allowPartialAuth'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 226, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filtering'), filteringType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 228, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 229, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recyclingRequest'), recyclingRequestType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 230, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudFilterOverride'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 231, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringRequest'), recurringRequestType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 232, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 233, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 234, 28)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), contact, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'healthcareIIAS'), CTD_ANON_8, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 548, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), CTD_ANON_10, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), CTD_ANON_11, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pos'), CTD_ANON_16, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4)))

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 207, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 209, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 210, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 211, 28))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 218, 28))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 219, 28))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 220, 28))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 221, 28))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 222, 28))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 223, 28))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 224, 28))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 225, 28))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 226, 28))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 227, 28))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 228, 28))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 229, 28))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 230, 28))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 231, 28))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 232, 28))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 233, 28))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 234, 28))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 202, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 205, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 206, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 207, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 208, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 209, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 210, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 211, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 213, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypal')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 214, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'token')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 215, 32))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 216, 32))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 218, 28))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardholderAuthentication')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 219, 28))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 220, 28))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pos')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 221, 28))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 222, 28))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 223, 28))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 224, 28))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 225, 28))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'allowPartialAuth')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 226, 28))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'healthcareIIAS')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 227, 28))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filtering')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 228, 28))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 229, 28))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recyclingRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 230, 28))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudFilterOverride')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 231, 28))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 232, 28))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 233, 28))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudChecks')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 234, 28))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_28._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_244()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 248, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 249, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), transactionAmountType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 250, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), payPalNotesType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 251, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'actionReason'), actionReasonType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 252, 24)))

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 248, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 249, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 249, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 250, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 250, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 251, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 251, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 252, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'actionReason')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 252, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 249, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 250, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 251, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 252, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_246())
    sub_automata.append(_BuildAutomaton_247())
    sub_automata.append(_BuildAutomaton_248())
    sub_automata.append(_BuildAutomaton_249())
    sub_automata.append(_BuildAutomaton_250())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 247, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_245()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 264, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 265, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), transactionAmountType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 266, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payPalOrderComplete'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 269, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), payPalNotesType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 270, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), CTD_ANON_10, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4)))

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 264, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 265, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 265, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 266, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 266, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 267, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 267, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 268, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 268, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 269, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payPalOrderComplete')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 269, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 270, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 270, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 271, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 271, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 265, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 266, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 267, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 268, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 269, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 270, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 271, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_252())
    sub_automata.append(_BuildAutomaton_253())
    sub_automata.append(_BuildAutomaton_254())
    sub_automata.append(_BuildAutomaton_255())
    sub_automata.append(_BuildAutomaton_256())
    sub_automata.append(_BuildAutomaton_257())
    sub_automata.append(_BuildAutomaton_258())
    sub_automata.append(_BuildAutomaton_259())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 263, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_251()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 283, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 284, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), transactionAmountType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 285, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 286, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 289, 32)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), cardTokenType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 290, 32)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypage'), cardPaypageType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 291, 32)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxType'), govtTaxTypeEnum, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 294, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 299, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 300, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), CTD_ANON_10, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), CTD_ANON_11, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pos'), CTD_ANON_16, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4)))

def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 285, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 287, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 293, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 294, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 295, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 296, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 297, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 298, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 299, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 300, 24))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 283, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 284, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 285, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 286, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 287, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 289, 32))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'token')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 290, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 291, 32))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 293, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 294, 24))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 295, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 296, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pos')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 297, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 298, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 299, 24))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 300, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_260()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), CTD_ANON_4, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 312, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 314, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), transactionAmountType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 315, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 316, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 320, 32)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), cardTokenType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 321, 32)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypage'), cardPaypageType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 322, 32)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxType'), govtTaxTypeEnum, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 325, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 331, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 332, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), contact, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authInformation'), CTD_ANON_7, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 523, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), CTD_ANON_10, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), CTD_ANON_11, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pos'), CTD_ANON_16, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4)))

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 315, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 317, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 318, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 324, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 325, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 326, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 327, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 328, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 329, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 330, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 331, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 332, 24))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 312, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authInformation')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 313, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 314, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 315, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 316, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 317, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 318, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 320, 32))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'token')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 321, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 322, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 324, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 325, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 326, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 327, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 328, 24))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pos')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 329, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 330, 24))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 331, 24))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 332, 24))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_261()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customerInfo'), CTD_ANON_3, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 56, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), CTD_ANON_4, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 345, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 346, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 347, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), transactionAmountType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 348, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 349, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 354, 28)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypal'), payPal, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 355, 28)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), cardTokenType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 356, 28)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypage'), cardPaypageType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 357, 28)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudCheck'), fraudCheckType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 363, 28)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardholderAuthentication'), fraudCheckType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 364, 28)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxType'), govtTaxTypeEnum, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 367, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payPalOrderComplete'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 371, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), payPalNotesType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 372, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'allowPartialAuth'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 374, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filtering'), filteringType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 376, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 377, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recyclingRequest'), recyclingRequestType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 378, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudFilterOverride'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 379, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringRequest'), recurringRequestType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 380, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleInternalRecurringRequest'), litleInternalRecurringRequestType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 381, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 382, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 383, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), contact, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'healthcareIIAS'), CTD_ANON_8, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 548, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), CTD_ANON_10, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), CTD_ANON_11, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pos'), CTD_ANON_16, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4)))

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 345, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 348, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 350, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 351, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 352, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 359, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 363, 28))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 364, 28))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 366, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 367, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 368, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 369, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 370, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 371, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 372, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 373, 24))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 374, 24))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 375, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 376, 24))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 377, 24))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 378, 24))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 379, 24))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 380, 24))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 381, 24))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 382, 24))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 383, 24))
    counters.add(cc_25)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 345, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 346, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 347, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 348, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 349, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customerInfo')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 350, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 351, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 352, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 354, 28))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypal')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 355, 28))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'token')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 356, 28))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 357, 28))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 359, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudCheck')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 363, 28))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardholderAuthentication')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 364, 28))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 366, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 367, 24))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 368, 24))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 369, 24))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pos')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 370, 24))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payPalOrderComplete')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 371, 24))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 372, 24))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 373, 24))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'allowPartialAuth')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 374, 24))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'healthcareIIAS')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 375, 24))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filtering')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 376, 24))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 377, 24))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recyclingRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 378, 24))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudFilterOverride')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 379, 24))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 380, 24))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleInternalRecurringRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 381, 24))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'debtRepayment')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 382, 24))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'advancedFraudChecks')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 383, 24))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, True) ]))
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_262()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest'), CTD_ANON_4, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 117, 4)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 398, 32)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 399, 32)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount'), transactionAmountType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 400, 32)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 407, 32)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 410, 32)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 413, 36)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'token'), cardTokenType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 414, 36)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypage'), cardPaypageType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 415, 36)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypal'), CTD_ANON_6, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 416, 36)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'taxType'), govtTaxTypeEnum, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 442, 32)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 448, 32)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes'), payPalNotesType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 451, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'actionReason'), actionReasonType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 452, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedData'), CTD_ANON_10, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 569, 4)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData'), CTD_ANON_11, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 600, 4)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions'), CTD_ANON_15, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 713, 4)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pos'), CTD_ANON_16, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 721, 4)))

def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 399, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 400, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 401, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 402, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 403, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 404, 32))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 409, 32))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 411, 32))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 441, 32))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 442, 32))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 443, 32))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 444, 32))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 445, 32))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 446, 32))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 447, 32))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 448, 32))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 451, 24))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 452, 24))
    counters.add(cc_17)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 398, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 399, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 400, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 401, 32))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 402, 32))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 403, 32))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pos')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 404, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 407, 32))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 408, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'surchargeAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 409, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 410, 32))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 411, 32))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 413, 36))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'token')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 414, 36))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypage')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 415, 36))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypal')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 416, 36))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 441, 32))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'taxType')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 442, 32))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterRequest')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 443, 32))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 444, 32))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'processingInstructions')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 445, 32))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pos')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 446, 32))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amexAggregatorData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 447, 32))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 448, 32))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'payPalNotes')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 451, 24))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'actionReason')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 452, 24))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_263()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 464, 28)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 465, 28)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 466, 28)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 468, 37)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCard'), virtualGiftCardType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 469, 37)))

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 464, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 465, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 466, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 468, 37))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCard')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 469, 37))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_264()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 482, 28)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 483, 28)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 484, 28)))

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 482, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 483, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 484, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_265()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_71, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 496, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 497, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 498, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 499, 28)))

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 496, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 497, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 498, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 499, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_266()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_72, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 511, 28)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 512, 28)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 513, 28)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 514, 28)))

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 511, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 512, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 513, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 514, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_267()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_73, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 539, 28)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 540, 28)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'card'), cardType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 541, 28)))

def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 539, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 540, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'card')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 541, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_268()




registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=registerTokenRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 738, 20)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountNumber'), ccAccountNumberType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 740, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckForToken'), echeckForTokenType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 741, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'paypageRegistrationId'), string512Type, scope=registerTokenRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 742, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), cvNumType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 744, 20)))

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 738, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 744, 20))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 738, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountNumber')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 740, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'echeckForToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 741, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'paypageRegistrationId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 742, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 744, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
registerTokenRequestType._Automaton = _BuildAutomaton_269()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 755, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 756, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), ccAccountNumberType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 757, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bin'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 758, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'type'), methodOfPaymentTypeEnum, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 759, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eCheckAccountSuffix'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 760, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 761, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 762, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 763, 24)))

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 755, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 756, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 756, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 757, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 757, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 758, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bin')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 758, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_275
    del _BuildAutomaton_275
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 759, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'type')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 759, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_276
    del _BuildAutomaton_276
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 760, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'eCheckAccountSuffix')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 760, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_277
    del _BuildAutomaton_277
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 761, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_278
    del _BuildAutomaton_278
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 762, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_279
    del _BuildAutomaton_279
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 763, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 756, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 757, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 758, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 759, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 760, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_271())
    sub_automata.append(_BuildAutomaton_272())
    sub_automata.append(_BuildAutomaton_273())
    sub_automata.append(_BuildAutomaton_274())
    sub_automata.append(_BuildAutomaton_275())
    sub_automata.append(_BuildAutomaton_276())
    sub_automata.append(_BuildAutomaton_277())
    sub_automata.append(_BuildAutomaton_278())
    sub_automata.append(_BuildAutomaton_279())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 754, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_270()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterResponseData'), CTD_ANON_5, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 163, 4)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 778, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 779, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 780, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 781, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardProductId'), pyxb.binding.datatypes.string, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 782, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 784, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 785, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authCode'), authCodeType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 786, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorizationResponseSubCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 787, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount'), transactionAmountType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 788, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountInformation'), accountInfoType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 789, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 794, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycling'), recyclingType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 796, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringResponse'), recurringResponseType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 797, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedAuthResponse'), CTD_ANON_17, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 868, 4)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4)))

def _BuildAutomaton_281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_281
    del _BuildAutomaton_281
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 778, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_282
    del _BuildAutomaton_282
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 779, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_283
    del _BuildAutomaton_283
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 780, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_284
    del _BuildAutomaton_284
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 781, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_285
    del _BuildAutomaton_285
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 782, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardProductId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 782, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_286
    del _BuildAutomaton_286
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 784, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 784, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_287
    del _BuildAutomaton_287
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 785, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_288
    del _BuildAutomaton_288
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 786, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 786, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_289
    del _BuildAutomaton_289
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 787, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorizationResponseSubCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 787, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_290
    del _BuildAutomaton_290
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 788, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 788, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_291
    del _BuildAutomaton_291
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 789, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountInformation')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 789, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_292
    del _BuildAutomaton_292
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 790, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 790, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_293
    del _BuildAutomaton_293
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 791, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 791, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_294
    del _BuildAutomaton_294
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 792, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterResponseData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 792, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_295
    del _BuildAutomaton_295
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 794, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 794, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_296
    del _BuildAutomaton_296
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 795, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedAuthResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 795, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_297
    del _BuildAutomaton_297
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 796, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 796, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_298
    del _BuildAutomaton_298
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 797, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 797, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_299
    del _BuildAutomaton_299
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 799, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 799, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_280
    del _BuildAutomaton_280
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 782, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 784, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 786, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 787, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 788, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 789, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 790, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 791, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 792, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 794, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 795, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 796, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 797, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 799, 24))
    counters.add(cc_13)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_281())
    sub_automata.append(_BuildAutomaton_282())
    sub_automata.append(_BuildAutomaton_283())
    sub_automata.append(_BuildAutomaton_284())
    sub_automata.append(_BuildAutomaton_285())
    sub_automata.append(_BuildAutomaton_286())
    sub_automata.append(_BuildAutomaton_287())
    sub_automata.append(_BuildAutomaton_288())
    sub_automata.append(_BuildAutomaton_289())
    sub_automata.append(_BuildAutomaton_290())
    sub_automata.append(_BuildAutomaton_291())
    sub_automata.append(_BuildAutomaton_292())
    sub_automata.append(_BuildAutomaton_293())
    sub_automata.append(_BuildAutomaton_294())
    sub_automata.append(_BuildAutomaton_295())
    sub_automata.append(_BuildAutomaton_296())
    sub_automata.append(_BuildAutomaton_297())
    sub_automata.append(_BuildAutomaton_298())
    sub_automata.append(_BuildAutomaton_299())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 777, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_280()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 894, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 895, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 896, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 897, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 899, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 900, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_301
    del _BuildAutomaton_301
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 894, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_302
    del _BuildAutomaton_302
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 895, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_303
    del _BuildAutomaton_303
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 896, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_304
    del _BuildAutomaton_304
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 897, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_305
    del _BuildAutomaton_305
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 899, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 899, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_306
    del _BuildAutomaton_306
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 900, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_307
    del _BuildAutomaton_307
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 902, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 902, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_300
    del _BuildAutomaton_300
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 899, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 902, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_301())
    sub_automata.append(_BuildAutomaton_302())
    sub_automata.append(_BuildAutomaton_303())
    sub_automata.append(_BuildAutomaton_304())
    sub_automata.append(_BuildAutomaton_305())
    sub_automata.append(_BuildAutomaton_306())
    sub_automata.append(_BuildAutomaton_307())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 893, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_300()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 914, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 915, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 916, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 917, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 919, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 920, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_309 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_309
    del _BuildAutomaton_309
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 914, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_310 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_310
    del _BuildAutomaton_310
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 915, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_311 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_311
    del _BuildAutomaton_311
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 916, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_312 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_312
    del _BuildAutomaton_312
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 917, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_313 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_313
    del _BuildAutomaton_313
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 919, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 919, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_314 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_314
    del _BuildAutomaton_314
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 920, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_315 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_315
    del _BuildAutomaton_315
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 922, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 922, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_308
    del _BuildAutomaton_308
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 919, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 922, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_309())
    sub_automata.append(_BuildAutomaton_310())
    sub_automata.append(_BuildAutomaton_311())
    sub_automata.append(_BuildAutomaton_312())
    sub_automata.append(_BuildAutomaton_313())
    sub_automata.append(_BuildAutomaton_314())
    sub_automata.append(_BuildAutomaton_315())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 913, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_308()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 934, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 935, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 936, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 937, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 939, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 940, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_317 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_317
    del _BuildAutomaton_317
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 934, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_318 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_318
    del _BuildAutomaton_318
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 935, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_319 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_319
    del _BuildAutomaton_319
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 936, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_320 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_320
    del _BuildAutomaton_320
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 937, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_321 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_321
    del _BuildAutomaton_321
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 939, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 939, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_322 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_322
    del _BuildAutomaton_322
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 940, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_323 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_323
    del _BuildAutomaton_323
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 942, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 942, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_316 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_316
    del _BuildAutomaton_316
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 939, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 942, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_317())
    sub_automata.append(_BuildAutomaton_318())
    sub_automata.append(_BuildAutomaton_319())
    sub_automata.append(_BuildAutomaton_320())
    sub_automata.append(_BuildAutomaton_321())
    sub_automata.append(_BuildAutomaton_322())
    sub_automata.append(_BuildAutomaton_323())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 933, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_316()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 954, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 955, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 956, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 957, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 959, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 960, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_325 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_325
    del _BuildAutomaton_325
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 954, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_326 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_326
    del _BuildAutomaton_326
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 955, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_327 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_327
    del _BuildAutomaton_327
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 956, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_328 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_328
    del _BuildAutomaton_328
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 957, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_329 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_329
    del _BuildAutomaton_329
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 959, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 959, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_330 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_330
    del _BuildAutomaton_330
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 960, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_331 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_331
    del _BuildAutomaton_331
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 962, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 962, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_324 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_324
    del _BuildAutomaton_324
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 959, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 962, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_325())
    sub_automata.append(_BuildAutomaton_326())
    sub_automata.append(_BuildAutomaton_327())
    sub_automata.append(_BuildAutomaton_328())
    sub_automata.append(_BuildAutomaton_329())
    sub_automata.append(_BuildAutomaton_330())
    sub_automata.append(_BuildAutomaton_331())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 953, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_324()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 974, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 975, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 976, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 977, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 979, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 980, 24)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_333 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_333
    del _BuildAutomaton_333
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 974, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_334 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_334
    del _BuildAutomaton_334
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 975, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_335 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_335
    del _BuildAutomaton_335
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 976, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_336 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_336
    del _BuildAutomaton_336
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 977, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_337 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_337
    del _BuildAutomaton_337
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 979, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 979, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_338 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_338
    del _BuildAutomaton_338
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 980, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_339 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_339
    del _BuildAutomaton_339
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 982, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 982, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_332 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_332
    del _BuildAutomaton_332
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 979, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 982, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_333())
    sub_automata.append(_BuildAutomaton_334())
    sub_automata.append(_BuildAutomaton_335())
    sub_automata.append(_BuildAutomaton_336())
    sub_automata.append(_BuildAutomaton_337())
    sub_automata.append(_BuildAutomaton_338())
    sub_automata.append(_BuildAutomaton_339())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 973, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_332()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 994, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 995, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 996, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 997, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 999, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1000, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_341 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_341
    del _BuildAutomaton_341
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 994, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_342 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_342
    del _BuildAutomaton_342
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 995, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_343 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_343
    del _BuildAutomaton_343
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 996, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_344 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_344
    del _BuildAutomaton_344
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 997, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_345 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_345
    del _BuildAutomaton_345
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 999, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 999, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_346 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_346
    del _BuildAutomaton_346
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1000, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_347 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_347
    del _BuildAutomaton_347
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1002, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1002, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_340 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_340
    del _BuildAutomaton_340
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 999, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1002, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_341())
    sub_automata.append(_BuildAutomaton_342())
    sub_automata.append(_BuildAutomaton_343())
    sub_automata.append(_BuildAutomaton_344())
    sub_automata.append(_BuildAutomaton_345())
    sub_automata.append(_BuildAutomaton_346())
    sub_automata.append(_BuildAutomaton_347())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 993, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_340()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1014, 24)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1015, 24)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1016, 24)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1017, 24)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1019, 24)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1020, 24)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_349 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_349
    del _BuildAutomaton_349
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1014, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_350 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_350
    del _BuildAutomaton_350
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1015, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_351 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_351
    del _BuildAutomaton_351
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1016, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_352 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_352
    del _BuildAutomaton_352
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1017, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_353 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_353
    del _BuildAutomaton_353
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1019, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1019, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_354 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_354
    del _BuildAutomaton_354
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1020, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_355 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_355
    del _BuildAutomaton_355
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1022, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1022, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_348 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_348
    del _BuildAutomaton_348
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1019, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1022, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_349())
    sub_automata.append(_BuildAutomaton_350())
    sub_automata.append(_BuildAutomaton_351())
    sub_automata.append(_BuildAutomaton_352())
    sub_automata.append(_BuildAutomaton_353())
    sub_automata.append(_BuildAutomaton_354())
    sub_automata.append(_BuildAutomaton_355())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1013, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_348()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1034, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1036, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1037, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1038, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1040, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1041, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4)))

def _BuildAutomaton_357 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_357
    del _BuildAutomaton_357
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1034, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_358 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_358
    del _BuildAutomaton_358
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1036, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1036, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_359 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_359
    del _BuildAutomaton_359
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1037, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_360 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_360
    del _BuildAutomaton_360
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1038, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_361 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_361
    del _BuildAutomaton_361
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1040, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1040, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_362 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_362
    del _BuildAutomaton_362
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1041, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_363 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_363
    del _BuildAutomaton_363
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1042, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1042, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_364 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_364
    del _BuildAutomaton_364
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1044, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1044, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_365 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_365
    del _BuildAutomaton_365
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1045, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1045, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_356 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_356
    del _BuildAutomaton_356
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1036, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1040, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1042, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1044, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1045, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_357())
    sub_automata.append(_BuildAutomaton_358())
    sub_automata.append(_BuildAutomaton_359())
    sub_automata.append(_BuildAutomaton_360())
    sub_automata.append(_BuildAutomaton_361())
    sub_automata.append(_BuildAutomaton_362())
    sub_automata.append(_BuildAutomaton_363())
    sub_automata.append(_BuildAutomaton_364())
    sub_automata.append(_BuildAutomaton_365())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1033, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_356()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1059, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1060, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1061, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1062, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1064, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1065, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1067, 24)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4)))

def _BuildAutomaton_367 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_367
    del _BuildAutomaton_367
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1059, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_368 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_368
    del _BuildAutomaton_368
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1060, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_369 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_369
    del _BuildAutomaton_369
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1061, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_370 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_370
    del _BuildAutomaton_370
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1062, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_371 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_371
    del _BuildAutomaton_371
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1064, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1064, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_372 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_372
    del _BuildAutomaton_372
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1065, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_373 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_373
    del _BuildAutomaton_373
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1067, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1067, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_374 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_374
    del _BuildAutomaton_374
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1068, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1068, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_375 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_375
    del _BuildAutomaton_375
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1070, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1070, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_376 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_376
    del _BuildAutomaton_376
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1071, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1071, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_366 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_366
    del _BuildAutomaton_366
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1064, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1067, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1068, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1070, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1071, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_367())
    sub_automata.append(_BuildAutomaton_368())
    sub_automata.append(_BuildAutomaton_369())
    sub_automata.append(_BuildAutomaton_370())
    sub_automata.append(_BuildAutomaton_371())
    sub_automata.append(_BuildAutomaton_372())
    sub_automata.append(_BuildAutomaton_373())
    sub_automata.append(_BuildAutomaton_374())
    sub_automata.append(_BuildAutomaton_375())
    sub_automata.append(_BuildAutomaton_376())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1058, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_366()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1085, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1086, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1087, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1088, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1090, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1091, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1093, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_378 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_378
    del _BuildAutomaton_378
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1085, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_379 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_379
    del _BuildAutomaton_379
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1086, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_380 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_380
    del _BuildAutomaton_380
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1087, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_381 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_381
    del _BuildAutomaton_381
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1088, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_382 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_382
    del _BuildAutomaton_382
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1090, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1090, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_383 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_383
    del _BuildAutomaton_383
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1091, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_384 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_384
    del _BuildAutomaton_384
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1093, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1093, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_385 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_385
    del _BuildAutomaton_385
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1095, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1095, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_386 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_386
    del _BuildAutomaton_386
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1096, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1096, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_377 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_377
    del _BuildAutomaton_377
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1090, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1093, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1095, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1096, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_378())
    sub_automata.append(_BuildAutomaton_379())
    sub_automata.append(_BuildAutomaton_380())
    sub_automata.append(_BuildAutomaton_381())
    sub_automata.append(_BuildAutomaton_382())
    sub_automata.append(_BuildAutomaton_383())
    sub_automata.append(_BuildAutomaton_384())
    sub_automata.append(_BuildAutomaton_385())
    sub_automata.append(_BuildAutomaton_386())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1084, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_377()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterResponseData'), CTD_ANON_5, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 163, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'enhancedAuthResponse'), CTD_ANON_17, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 868, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1110, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1111, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1112, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1113, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardProductId'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1114, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1115, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1116, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authCode'), authCodeType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1117, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authorizationResponseSubCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1118, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount'), transactionAmountType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1119, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountInformation'), accountInfoType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1120, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1124, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recycling'), recyclingType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1127, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'recurringResponse'), recurringResponseType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1128, 24)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4)))

def _BuildAutomaton_388 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_388
    del _BuildAutomaton_388
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1110, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_389 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_389
    del _BuildAutomaton_389
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1111, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_390 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_390
    del _BuildAutomaton_390
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1112, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_391 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_391
    del _BuildAutomaton_391
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1113, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_392 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_392
    del _BuildAutomaton_392
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1114, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardProductId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1114, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_393 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_393
    del _BuildAutomaton_393
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1115, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1115, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_394 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_394
    del _BuildAutomaton_394
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1116, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_395 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_395
    del _BuildAutomaton_395
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1117, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1117, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_396 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_396
    del _BuildAutomaton_396
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1118, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authorizationResponseSubCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1118, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_397 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_397
    del _BuildAutomaton_397
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1119, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1119, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_398 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_398
    del _BuildAutomaton_398
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1120, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountInformation')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1120, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_399 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_399
    del _BuildAutomaton_399
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1121, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1121, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_400 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_400
    del _BuildAutomaton_400
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1122, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billMeLaterResponseData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1122, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_401 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_401
    del _BuildAutomaton_401
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1124, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1124, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_402 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_402
    del _BuildAutomaton_402
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1125, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'enhancedAuthResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1125, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_403 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_403
    del _BuildAutomaton_403
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1126, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1126, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_404 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_404
    del _BuildAutomaton_404
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1127, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recycling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1127, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_405 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_405
    del _BuildAutomaton_405
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1128, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'recurringResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1128, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_406 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_406
    del _BuildAutomaton_406
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1130, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1130, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_387 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_387
    del _BuildAutomaton_387
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1114, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1115, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1117, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1118, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1119, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1120, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1121, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1122, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1124, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1125, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1126, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1127, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1128, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1130, 24))
    counters.add(cc_13)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_388())
    sub_automata.append(_BuildAutomaton_389())
    sub_automata.append(_BuildAutomaton_390())
    sub_automata.append(_BuildAutomaton_391())
    sub_automata.append(_BuildAutomaton_392())
    sub_automata.append(_BuildAutomaton_393())
    sub_automata.append(_BuildAutomaton_394())
    sub_automata.append(_BuildAutomaton_395())
    sub_automata.append(_BuildAutomaton_396())
    sub_automata.append(_BuildAutomaton_397())
    sub_automata.append(_BuildAutomaton_398())
    sub_automata.append(_BuildAutomaton_399())
    sub_automata.append(_BuildAutomaton_400())
    sub_automata.append(_BuildAutomaton_401())
    sub_automata.append(_BuildAutomaton_402())
    sub_automata.append(_BuildAutomaton_403())
    sub_automata.append(_BuildAutomaton_404())
    sub_automata.append(_BuildAutomaton_405())
    sub_automata.append(_BuildAutomaton_406())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1109, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_387()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1144, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1145, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1146, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1147, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1149, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1150, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1152, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_408 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_408
    del _BuildAutomaton_408
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1144, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_409 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_409
    del _BuildAutomaton_409
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1145, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1145, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_410 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_410
    del _BuildAutomaton_410
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1146, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_411 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_411
    del _BuildAutomaton_411
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1147, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_412 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_412
    del _BuildAutomaton_412
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1149, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1149, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_413 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_413
    del _BuildAutomaton_413
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1150, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_414 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_414
    del _BuildAutomaton_414
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1152, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1152, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_415 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_415
    del _BuildAutomaton_415
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1154, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1154, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_416 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_416
    del _BuildAutomaton_416
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1155, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1155, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_407 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_407
    del _BuildAutomaton_407
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1145, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1149, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1152, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1154, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1155, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_408())
    sub_automata.append(_BuildAutomaton_409())
    sub_automata.append(_BuildAutomaton_410())
    sub_automata.append(_BuildAutomaton_411())
    sub_automata.append(_BuildAutomaton_412())
    sub_automata.append(_BuildAutomaton_413())
    sub_automata.append(_BuildAutomaton_414())
    sub_automata.append(_BuildAutomaton_415())
    sub_automata.append(_BuildAutomaton_416())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1143, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_407()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1182, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1183, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1184, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1185, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1187, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1188, 24)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCardResponse'), CTD_ANON_21, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1255, 4)))

def _BuildAutomaton_418 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_418
    del _BuildAutomaton_418
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1182, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_419 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_419
    del _BuildAutomaton_419
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1183, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_420 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_420
    del _BuildAutomaton_420
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1184, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_421 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_421
    del _BuildAutomaton_421
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1185, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_422 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_422
    del _BuildAutomaton_422
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1187, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1187, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_423 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_423
    del _BuildAutomaton_423
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1188, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_424 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_424
    del _BuildAutomaton_424
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1189, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1189, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_425 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_425
    del _BuildAutomaton_425
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1190, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1190, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_426 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_426
    del _BuildAutomaton_426
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1191, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'virtualGiftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1191, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_417 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_417
    del _BuildAutomaton_417
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1187, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1189, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1190, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1191, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_418())
    sub_automata.append(_BuildAutomaton_419())
    sub_automata.append(_BuildAutomaton_420())
    sub_automata.append(_BuildAutomaton_421())
    sub_automata.append(_BuildAutomaton_422())
    sub_automata.append(_BuildAutomaton_423())
    sub_automata.append(_BuildAutomaton_424())
    sub_automata.append(_BuildAutomaton_425())
    sub_automata.append(_BuildAutomaton_426())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1181, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_417()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1205, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1206, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1207, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1208, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1210, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1211, 24)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_428 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_428
    del _BuildAutomaton_428
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1205, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_429 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_429
    del _BuildAutomaton_429
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1206, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_430 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_430
    del _BuildAutomaton_430
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1207, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_431 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_431
    del _BuildAutomaton_431
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1208, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_432 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_432
    del _BuildAutomaton_432
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1210, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1210, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_433 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_433
    del _BuildAutomaton_433
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1211, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_434 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_434
    del _BuildAutomaton_434
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1212, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1212, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_435 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_435
    del _BuildAutomaton_435
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1213, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1213, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_427 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_427
    del _BuildAutomaton_427
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1210, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1212, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1213, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_428())
    sub_automata.append(_BuildAutomaton_429())
    sub_automata.append(_BuildAutomaton_430())
    sub_automata.append(_BuildAutomaton_431())
    sub_automata.append(_BuildAutomaton_432())
    sub_automata.append(_BuildAutomaton_433())
    sub_automata.append(_BuildAutomaton_434())
    sub_automata.append(_BuildAutomaton_435())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1204, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_427()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1227, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1228, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1229, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1230, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1232, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1233, 24)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_90, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

def _BuildAutomaton_437 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_437
    del _BuildAutomaton_437
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1227, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_438 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_438
    del _BuildAutomaton_438
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1228, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_439 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_439
    del _BuildAutomaton_439
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1229, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_440 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_440
    del _BuildAutomaton_440
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1230, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_441 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_441
    del _BuildAutomaton_441
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1232, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1232, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_442 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_442
    del _BuildAutomaton_442
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1233, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_443 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_443
    del _BuildAutomaton_443
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1234, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1234, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_444 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_444
    del _BuildAutomaton_444
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1235, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1235, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_436 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_436
    del _BuildAutomaton_436
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1232, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1234, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1235, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_437())
    sub_automata.append(_BuildAutomaton_438())
    sub_automata.append(_BuildAutomaton_439())
    sub_automata.append(_BuildAutomaton_440())
    sub_automata.append(_BuildAutomaton_441())
    sub_automata.append(_BuildAutomaton_442())
    sub_automata.append(_BuildAutomaton_443())
    sub_automata.append(_BuildAutomaton_444())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1226, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_436()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1270, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1271, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1272, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1273, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1275, 24)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1276, 24)))

def _BuildAutomaton_446 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_446
    del _BuildAutomaton_446
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1270, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_447 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_447
    del _BuildAutomaton_447
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1271, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_448 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_448
    del _BuildAutomaton_448
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1272, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_449 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_449
    del _BuildAutomaton_449
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1273, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_450 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_450
    del _BuildAutomaton_450
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1275, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1275, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_451 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_451
    del _BuildAutomaton_451
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1276, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_452 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_452
    del _BuildAutomaton_452
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1277, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1277, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_453 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_453
    del _BuildAutomaton_453
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1278, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1278, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_445 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_445
    del _BuildAutomaton_445
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1275, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1277, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1278, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_446())
    sub_automata.append(_BuildAutomaton_447())
    sub_automata.append(_BuildAutomaton_448())
    sub_automata.append(_BuildAutomaton_449())
    sub_automata.append(_BuildAutomaton_450())
    sub_automata.append(_BuildAutomaton_451())
    sub_automata.append(_BuildAutomaton_452())
    sub_automata.append(_BuildAutomaton_453())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1269, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_445()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fraudResult'), CTD_ANON_19, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1164, 4)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse'), CTD_ANON_20, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1244, 4)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1290, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1291, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1292, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1293, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1295, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1296, 24)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount'), transactionAmountType, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1298, 24)))

def _BuildAutomaton_455 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_455
    del _BuildAutomaton_455
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1290, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_456 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_456
    del _BuildAutomaton_456
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1291, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_457 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_457
    del _BuildAutomaton_457
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1292, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_458 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_458
    del _BuildAutomaton_458
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1293, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_459 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_459
    del _BuildAutomaton_459
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1295, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1295, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_460 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_460
    del _BuildAutomaton_460
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1296, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_461 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_461
    del _BuildAutomaton_461
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1297, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fraudResult')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1297, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_462 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_462
    del _BuildAutomaton_462
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1298, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'approvedAmount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1298, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_463 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_463
    del _BuildAutomaton_463
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1299, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'giftCardResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1299, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_454 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_454
    del _BuildAutomaton_454
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1295, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1297, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1298, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1299, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_455())
    sub_automata.append(_BuildAutomaton_456())
    sub_automata.append(_BuildAutomaton_457())
    sub_automata.append(_BuildAutomaton_458())
    sub_automata.append(_BuildAutomaton_459())
    sub_automata.append(_BuildAutomaton_460())
    sub_automata.append(_BuildAutomaton_461())
    sub_automata.append(_BuildAutomaton_462())
    sub_automata.append(_BuildAutomaton_463())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1289, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_454()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress'), contact, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 521, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1318, 28)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1319, 28)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1323, 28)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verify'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1324, 28)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1326, 28)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1331, 28)))

def _BuildAutomaton_464 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_464
    del _BuildAutomaton_464
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1319, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1320, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1324, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1328, 28))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1330, 28))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1331, 28))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1318, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1319, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1320, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1323, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verify')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1324, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1325, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1326, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1327, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shipToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1328, 28))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1329, 28))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1330, 28))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1331, 28))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_464()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customBilling'), CTD_ANON_14, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 680, 4)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1346, 29)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1347, 29)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1351, 29)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1353, 29)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1357, 29)))

def _BuildAutomaton_465 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_465
    del _BuildAutomaton_465
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1347, 29))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1348, 29))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1356, 29))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1357, 29))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1346, 29))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1347, 29))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1348, 29))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1351, 29))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1352, 29))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1353, 29))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1354, 29))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1355, 29))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customBilling')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1356, 29))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1357, 29))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_465()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'billToAddress'), contact, scope=CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleCommon_v9.0.xsd', 586, 4)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1371, 24)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1372, 24)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'amount'), transactionAmountType, scope=CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1373, 24)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderSource'), orderSourceType, scope=CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1374, 24)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_95, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1377, 24)))

def _BuildAutomaton_467 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_467
    del _BuildAutomaton_467
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1371, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1371, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_468 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_468
    del _BuildAutomaton_468
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1372, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_469 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_469
    del _BuildAutomaton_469
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'amount')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1373, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_470 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_470
    del _BuildAutomaton_470
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderSource')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1374, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_471 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_471
    del _BuildAutomaton_471
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'billToAddress')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1375, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_472 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_472
    del _BuildAutomaton_472
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1376, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_473 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_473
    del _BuildAutomaton_473
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1377, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1377, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_466 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_466
    del _BuildAutomaton_466
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1371, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1377, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_467())
    sub_automata.append(_BuildAutomaton_468())
    sub_automata.append(_BuildAutomaton_469())
    sub_automata.append(_BuildAutomaton_470())
    sub_automata.append(_BuildAutomaton_471())
    sub_automata.append(_BuildAutomaton_472())
    sub_automata.append(_BuildAutomaton_473())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1370, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_466()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1389, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1390, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1391, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1392, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1393, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'verificationCode'), authCodeType, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1394, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1396, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1398, 24)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4)))

def _BuildAutomaton_475 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_475
    del _BuildAutomaton_475
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1389, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_476 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_476
    del _BuildAutomaton_476
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1390, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1390, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_477 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_477
    del _BuildAutomaton_477
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1391, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_478 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_478
    del _BuildAutomaton_478
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1392, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_479 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_479
    del _BuildAutomaton_479
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1393, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_480 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_480
    del _BuildAutomaton_480
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1394, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'verificationCode')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1394, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_481 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_481
    del _BuildAutomaton_481
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1396, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1396, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_482 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_482
    del _BuildAutomaton_482
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1397, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1397, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_483 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_483
    del _BuildAutomaton_483
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1398, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1398, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_474 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_474
    del _BuildAutomaton_474
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1390, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1394, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1396, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1397, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1398, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_475())
    sub_automata.append(_BuildAutomaton_476())
    sub_automata.append(_BuildAutomaton_477())
    sub_automata.append(_BuildAutomaton_478())
    sub_automata.append(_BuildAutomaton_479())
    sub_automata.append(_BuildAutomaton_480())
    sub_automata.append(_BuildAutomaton_481())
    sub_automata.append(_BuildAutomaton_482())
    sub_automata.append(_BuildAutomaton_483())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1388, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_474()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1411, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1412, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1413, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1414, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1415, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1417, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1419, 24)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4)))

def _BuildAutomaton_485 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_485
    del _BuildAutomaton_485
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1411, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_486 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_486
    del _BuildAutomaton_486
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1412, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1412, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_487 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_487
    del _BuildAutomaton_487
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1413, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_488 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_488
    del _BuildAutomaton_488
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1414, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_489 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_489
    del _BuildAutomaton_489
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1415, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_490 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_490
    del _BuildAutomaton_490
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1417, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1417, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_491 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_491
    del _BuildAutomaton_491
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1418, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1418, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_492 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_492
    del _BuildAutomaton_492
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1419, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1419, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_484 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_484
    del _BuildAutomaton_484
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1412, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1417, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1418, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1419, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_485())
    sub_automata.append(_BuildAutomaton_486())
    sub_automata.append(_BuildAutomaton_487())
    sub_automata.append(_BuildAutomaton_488())
    sub_automata.append(_BuildAutomaton_489())
    sub_automata.append(_BuildAutomaton_490())
    sub_automata.append(_BuildAutomaton_491())
    sub_automata.append(_BuildAutomaton_492())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1410, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_484()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1505, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1506, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1507, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1508, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1509, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1511, 24)))

CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1512, 24)))

def _BuildAutomaton_494 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_494
    del _BuildAutomaton_494
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1505, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_495 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_495
    del _BuildAutomaton_495
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1506, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_496 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_496
    del _BuildAutomaton_496
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1507, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_497 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_497
    del _BuildAutomaton_497
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1508, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_498 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_498
    del _BuildAutomaton_498
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1509, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_499 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_499
    del _BuildAutomaton_499
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1511, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1511, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_500 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_500
    del _BuildAutomaton_500
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1512, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1512, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_493 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_493
    del _BuildAutomaton_493
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1511, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1512, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_494())
    sub_automata.append(_BuildAutomaton_495())
    sub_automata.append(_BuildAutomaton_496())
    sub_automata.append(_BuildAutomaton_497())
    sub_automata.append(_BuildAutomaton_498())
    sub_automata.append(_BuildAutomaton_499())
    sub_automata.append(_BuildAutomaton_500())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1504, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_493()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_99, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1308, 4)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_99, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1524, 24)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'merchantData'), merchantDataType, scope=CTD_ANON_99, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1526, 24)))

def _BuildAutomaton_501 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_501
    del _BuildAutomaton_501
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1525, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1526, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1524, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'echeckOrEcheckToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1525, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'merchantData')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1526, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_501()




CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater'), CTD_ANON_22, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1470, 4)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1538, 24)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1539, 24)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1540, 24)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), messageType, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1541, 24)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1543, 24)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse'), tokenResponseType, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1545, 24)))

def _BuildAutomaton_503 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_503
    del _BuildAutomaton_503
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1538, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_504 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_504
    del _BuildAutomaton_504
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1539, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_505 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_505
    del _BuildAutomaton_505
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1540, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_506 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_506
    del _BuildAutomaton_506
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1541, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_507 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_507
    del _BuildAutomaton_507
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1543, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'postDate')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1543, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_508 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_508
    del _BuildAutomaton_508
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1544, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accountUpdater')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1544, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_509 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_509
    del _BuildAutomaton_509
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1545, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tokenResponse')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1545, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_502 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_502
    del _BuildAutomaton_502
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1543, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1544, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1545, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_503())
    sub_automata.append(_BuildAutomaton_504())
    sub_automata.append(_BuildAutomaton_505())
    sub_automata.append(_BuildAutomaton_506())
    sub_automata.append(_BuildAutomaton_507())
    sub_automata.append(_BuildAutomaton_508())
    sub_automata.append(_BuildAutomaton_509())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1537, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_502()




updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1794, 20)))

updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleToken'), ccAccountNumberType, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1795, 20)))

updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum'), cvNumType, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1796, 20)))

def _BuildAutomaton_510 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_510
    del _BuildAutomaton_510
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1794, 20))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1794, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleToken')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1795, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cardValidationNum')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1796, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
updateCardValidationNumOnToken_._Automaton = _BuildAutomaton_510()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId'), litleIdType, scope=CTD_ANON_101, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1807, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'orderId'), string25Type, scope=CTD_ANON_101, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1808, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'response'), responseType, scope=CTD_ANON_101, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1809, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1810, 24)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_101, location=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1811, 24)))

def _BuildAutomaton_512 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_512
    del _BuildAutomaton_512
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'litleTxnId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1807, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_513 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_513
    del _BuildAutomaton_513
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1808, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'orderId')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1808, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_514 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_514
    del _BuildAutomaton_514
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'response')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1809, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_515 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_515
    del _BuildAutomaton_515
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1810, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_516 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_516
    del _BuildAutomaton_516
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responseTime')), pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1811, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_511 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_511
    del _BuildAutomaton_511
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1808, 24))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_512())
    sub_automata.append(_BuildAutomaton_513())
    sub_automata.append(_BuildAutomaton_514())
    sub_automata.append(_BuildAutomaton_515())
    sub_automata.append(_BuildAutomaton_516())
    final_update = set()
    symbol = pyxb.utils.utility.Location(u'/Users/msherry/Desktop/vantiv/litleTransaction_v9.0.xsd', 1806, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_511()


card._setSubstitutionGroup(cardOrToken)

token._setSubstitutionGroup(cardOrToken)

echeck._setSubstitutionGroup(echeckOrEcheckToken)

echeckToken._setSubstitutionGroup(echeckOrEcheckToken)

cancelSubscription._setSubstitutionGroup(recurringTransaction)

updateSubscription._setSubstitutionGroup(recurringTransaction)

createPlan._setSubstitutionGroup(recurringTransaction)

updatePlan._setSubstitutionGroup(recurringTransaction)

cancelSubscriptionResponse._setSubstitutionGroup(recurringTransactionResponse)

updateSubscriptionResponse._setSubstitutionGroup(recurringTransactionResponse)

createPlanResponse._setSubstitutionGroup(recurringTransactionResponse)

updatePlanResponse._setSubstitutionGroup(recurringTransactionResponse)

accountUpdate._setSubstitutionGroup(transaction)

accountUpdateResponse._setSubstitutionGroup(transactionResponse)

payFacCredit._setSubstitutionGroup(transaction)

payFacCreditResponse._setSubstitutionGroup(transactionResponse)

payFacDebit._setSubstitutionGroup(transaction)

payFacDebitResponse._setSubstitutionGroup(transactionResponse)

submerchantCredit._setSubstitutionGroup(transaction)

submerchantDebit._setSubstitutionGroup(transaction)

submerchantCreditResponse._setSubstitutionGroup(transactionResponse)

submerchantDebitResponse._setSubstitutionGroup(transactionResponse)

reserveCredit._setSubstitutionGroup(transaction)

reserveCreditResponse._setSubstitutionGroup(transactionResponse)

reserveDebit._setSubstitutionGroup(transaction)

reserveDebitResponse._setSubstitutionGroup(transactionResponse)

void._setSubstitutionGroup(transaction)

voidResponse._setSubstitutionGroup(transactionResponse)

echeckVoid._setSubstitutionGroup(transaction)

echeckVoidResponse._setSubstitutionGroup(transactionResponse)

depositReversal._setSubstitutionGroup(transaction)

refundReversal._setSubstitutionGroup(transaction)

activateReversal._setSubstitutionGroup(transaction)

deactivateReversal._setSubstitutionGroup(transaction)

loadReversal._setSubstitutionGroup(transaction)

unloadReversal._setSubstitutionGroup(transaction)

authorization._setSubstitutionGroup(transaction)

authReversal._setSubstitutionGroup(transaction)

capture._setSubstitutionGroup(transaction)

forceCapture._setSubstitutionGroup(transaction)

captureGivenAuth._setSubstitutionGroup(transaction)

sale._setSubstitutionGroup(transaction)

credit._setSubstitutionGroup(transaction)

activate._setSubstitutionGroup(transaction)

deactivate._setSubstitutionGroup(transaction)

load._setSubstitutionGroup(transaction)

unload._setSubstitutionGroup(transaction)

balanceInquiry._setSubstitutionGroup(transaction)

registerTokenRequest._setSubstitutionGroup(transaction)

registerTokenResponse._setSubstitutionGroup(transactionResponse)

authorizationResponse._setSubstitutionGroup(transactionResponse)

authReversalResponse._setSubstitutionGroup(transactionResponse)

depositReversalResponse._setSubstitutionGroup(transactionResponse)

refundReversalResponse._setSubstitutionGroup(transactionResponse)

activateReversalResponse._setSubstitutionGroup(transactionResponse)

deactivateReversalResponse._setSubstitutionGroup(transactionResponse)

loadReversalResponse._setSubstitutionGroup(transactionResponse)

unloadReversalResponse._setSubstitutionGroup(transactionResponse)

captureResponse._setSubstitutionGroup(transactionResponse)

forceCaptureResponse._setSubstitutionGroup(transactionResponse)

captureGivenAuthResponse._setSubstitutionGroup(transactionResponse)

saleResponse._setSubstitutionGroup(transactionResponse)

creditResponse._setSubstitutionGroup(transactionResponse)

activateResponse._setSubstitutionGroup(transactionResponse)

loadResponse._setSubstitutionGroup(transactionResponse)

unloadResponse._setSubstitutionGroup(transactionResponse)

balanceInquiryResponse._setSubstitutionGroup(transactionResponse)

deactivateResponse._setSubstitutionGroup(transactionResponse)

echeckSale._setSubstitutionGroup(transaction)

echeckCredit._setSubstitutionGroup(transaction)

echeckVerification._setSubstitutionGroup(transaction)

echeckSalesResponse._setSubstitutionGroup(transactionResponse)

echeckCreditResponse._setSubstitutionGroup(transactionResponse)

echeckVerificationResponse._setSubstitutionGroup(transactionResponse)

echeckRedeposit._setSubstitutionGroup(transaction)

echeckRedepositResponse._setSubstitutionGroup(transactionResponse)

updateCardValidationNumOnToken._setSubstitutionGroup(transaction)

updateCardValidationNumOnTokenResponse._setSubstitutionGroup(transactionResponse)
